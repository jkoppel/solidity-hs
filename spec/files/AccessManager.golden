[ Pragma
    ( PragmaDefinition
        { pragma = "solidity ^0.8.20" }
    )
, Import
    ( ImportDefinition
        ( ImportAliases
            [
                ( Identifier "IAccessManager"
                , Nothing
                )
            ] "./IAccessManager.sol"
        )
    )
, Import
    ( ImportDefinition
        ( ImportAliases
            [
                ( Identifier "IAccessManaged"
                , Nothing
                )
            ] "./IAccessManaged.sol"
        )
    )
, Import
    ( ImportDefinition
        ( ImportAliases
            [
                ( Identifier "Address"
                , Nothing
                )
            ] "../../utils/Address.sol"
        )
    )
, Import
    ( ImportDefinition
        ( ImportAliases
            [
                ( Identifier "Context"
                , Nothing
                )
            ] "../../utils/Context.sol"
        )
    )
, Import
    ( ImportDefinition
        ( ImportAliases
            [
                ( Identifier "Multicall"
                , Nothing
                )
            ] "../../utils/Multicall.sol"
        )
    )
, Import
    ( ImportDefinition
        ( ImportAliases
            [
                ( Identifier "Math"
                , Nothing
                )
            ] "../../utils/math/Math.sol"
        )
    )
, Import
    ( ImportDefinition
        ( ImportAliases
            [
                ( Identifier "Time"
                , Nothing
                )
            ] "../../utils/types/Time.sol"
        )
    )
, Contract
    ( ContractDefinition
        { abstract = False
        , name = Identifier "AccessManager"
        , inheritance = Just
            [ InheritanceSpecifier
                ( IdentifierPath
                    [ Identifier "Context" ]
                ) Nothing
            , InheritanceSpecifier
                ( IdentifierPath
                    [ Identifier "Multicall" ]
                ) Nothing
            , InheritanceSpecifier
                ( IdentifierPath
                    [ Identifier "IAccessManager" ]
                ) Nothing
            ]
        , body =
            [ CUsing
                ( UsingDirective
                    { binders = UsingDirectiveBoundIdent
                        ( IdentifierPath
                            [ Identifier "Time" ]
                        )
                    , bound = DirectiveAll
                    , global = False
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "TargetConfig"
                    , members =
                        [
                            ( MappingType
                                ( MappingDefinition
                                    { mapping = MappingKey
                                        { mappingKeyType = MappingElementaryType
                                            ( FixedBytes 4 )
                                        , mappingKeyIdentifier = Just
                                            ( Identifier "selector" )
                                        }
                                    , kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 64 )
                                        )
                                    , kindIdentifier = Just
                                        ( Identifier "roleId" )
                                    }
                                )
                            , Identifier "allowedRoles"
                            )
                        ,
                            ( IdentifierType
                                ( IdentifierPath
                                    [ Identifier "Time"
                                    , Identifier "Delay"
                                    ]
                                )
                            , Identifier "adminDelay"
                            )
                        ,
                            ( ElementaryType Bool
                            , Identifier "closed"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "Access"
                    , members =
                        [
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 48 )
                                )
                            , Identifier "since"
                            )
                        ,
                            ( IdentifierType
                                ( IdentifierPath
                                    [ Identifier "Time"
                                    , Identifier "Delay"
                                    ]
                                )
                            , Identifier "delay"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "Role"
                    , members =
                        [
                            ( MappingType
                                ( MappingDefinition
                                    { mapping = MappingKey
                                        { mappingKeyType = MappingElementaryType Address
                                        , mappingKeyIdentifier = Just
                                            ( Identifier "user" )
                                        }
                                    , kind = IdentifierType
                                        ( IdentifierPath
                                            [ Identifier "Access" ]
                                        )
                                    , kindIdentifier = Just
                                        ( Identifier "access" )
                                    }
                                )
                            , Identifier "members"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , Identifier "admin"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , Identifier "guardian"
                            )
                        ,
                            ( IdentifierType
                                ( IdentifierPath
                                    [ Identifier "Time"
                                    , Identifier "Delay"
                                    ]
                                )
                            , Identifier "grantDelay"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "Schedule"
                    , members =
                        [
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 48 )
                                )
                            , Identifier "timepoint"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , Identifier "nonce"
                            )
                        ]
                    }
                )
            , CStateVariableDec
                ( StateVariableDec
                    { kind = ElementaryType
                        ( UnsignedInteger
                            ( Just 64 )
                        )
                    , modifiers = Just
                        [ StatePublic
                        , StateConstant
                        ]
                    , ident = Identifier "ADMIN_ROLE"
                    , expr = Just
                        ( MemberAccess
                            ( MetaType
                                ( ElementaryType
                                    ( UnsignedInteger
                                        ( Just 64 )
                                    )
                                )
                            )
                            ( MemberAccessIdentifier
                                ( Identifier "min" )
                            )
                        )
                    }
                )
            , CStateVariableDec
                ( StateVariableDec
                    { kind = ElementaryType
                        ( UnsignedInteger
                            ( Just 64 )
                        )
                    , modifiers = Just
                        [ StatePublic
                        , StateConstant
                        ]
                    , ident = Identifier "PUBLIC_ROLE"
                    , expr = Just
                        ( MemberAccess
                            ( MetaType
                                ( ElementaryType
                                    ( UnsignedInteger
                                        ( Just 64 )
                                    )
                                )
                            )
                            ( MemberAccessIdentifier
                                ( Identifier "max" )
                            )
                        )
                    }
                )
            , CStateVariableDec
                ( StateVariableDec
                    { kind = MappingType
                        ( MappingDefinition
                            { mapping = MappingKey
                                { mappingKeyType = MappingElementaryType Address
                                , mappingKeyIdentifier = Just
                                    ( Identifier "target" )
                                }
                            , kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "TargetConfig" ]
                                )
                            , kindIdentifier = Just
                                ( Identifier "mode" )
                            }
                        )
                    , modifiers = Just [ StatePrivate ]
                    , ident = Identifier "_targets"
                    , expr = Nothing
                    }
                )
            , CStateVariableDec
                ( StateVariableDec
                    { kind = MappingType
                        ( MappingDefinition
                            { mapping = MappingKey
                                { mappingKeyType = MappingElementaryType
                                    ( UnsignedInteger
                                        ( Just 64 )
                                    )
                                , mappingKeyIdentifier = Just
                                    ( Identifier "roleId" )
                                }
                            , kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "Role" ]
                                )
                            , kindIdentifier = Nothing
                            }
                        )
                    , modifiers = Just [ StatePrivate ]
                    , ident = Identifier "_roles"
                    , expr = Nothing
                    }
                )
            , CStateVariableDec
                ( StateVariableDec
                    { kind = MappingType
                        ( MappingDefinition
                            { mapping = MappingKey
                                { mappingKeyType = MappingElementaryType
                                    ( FixedBytes 32 )
                                , mappingKeyIdentifier = Just
                                    ( Identifier "operationId" )
                                }
                            , kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "Schedule" ]
                                )
                            , kindIdentifier = Nothing
                            }
                        )
                    , modifiers = Just [ StatePrivate ]
                    , ident = Identifier "_schedules"
                    , expr = Nothing
                    }
                )
            , CStateVariableDec
                ( StateVariableDec
                    { kind = ElementaryType
                        ( FixedBytes 32 )
                    , modifiers = Just [ StatePrivate ]
                    , ident = Identifier "_executionId"
                    , expr = Nothing
                    }
                )
            , CModifier
                ( ModifierDefinition
                    { ident = Identifier "onlyAuthorized"
                    , params = Just []
                    , modifiers = []
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "_checkAuthorized" )
                                )
                                ( CommaArguments [] )
                            )
                        , ExpressionStatement
                            ( IdentifierExpression
                                ( Identifier "_" )
                            )
                        ]
                    }
                )
            , Constructor
                ( ConstructorDefinition
                    { params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "initialAdmin" )
                            }
                        ]
                    , modifiers = Just []
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression Equal
                                    ( IdentifierExpression
                                        ( Identifier "initialAdmin" )
                                    )
                                    ( FunctionCall
                                        ( TypeExpression ( ElementaryType Address ) )
                                        ( CommaArguments
                                            [ ExpressionLiteral
                                                ( NumberLiteral 0.0 Nothing )
                                            ]
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ Revert
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "AccessManagerInvalidInitialAdmin" )
                                            )
                                            ( CommaArguments
                                                [ FunctionCall
                                                    ( TypeExpression ( ElementaryType Address ) )
                                                    ( CommaArguments
                                                        [ ExpressionLiteral
                                                            ( NumberLiteral 0.0 Nothing )
                                                        ]
                                                    )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "_grantRole" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "ADMIN_ROLE" )
                                    , IdentifierExpression
                                        ( Identifier "initialAdmin" )
                                    , ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    , ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "canCall"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "caller" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( FixedBytes 4 )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "selector" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Just
                                ( Identifier "immediate" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "delay" )
                            }
                        ]
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "isTargetClosed" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "target" )
                                        ]
                                    )
                                , trueStmt = BlockStatement
                                    [ Return
                                        ( Just
                                            ( TupleExpression
                                                [ Just
                                                    ( ExpressionLiteral ( BooleanLiteral False ) )
                                                , Just
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 0.0 Nothing )
                                                    )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Just
                                    ( If
                                        ( IfStatement
                                            { expr = BinaryExpression Equal
                                                ( IdentifierExpression
                                                    ( Identifier "caller" )
                                                )
                                                ( FunctionCall
                                                    ( TypeExpression ( ElementaryType Address ) )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "this" )
                                                        ]
                                                    )
                                                )
                                            , trueStmt = BlockStatement
                                                [ Return
                                                    ( Just
                                                        ( TupleExpression
                                                            [ Just
                                                                ( FunctionCall
                                                                    ( IdentifierExpression
                                                                        ( Identifier "_isExecuting" )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ IdentifierExpression
                                                                            ( Identifier "target" )
                                                                        , IdentifierExpression
                                                                            ( Identifier "selector" )
                                                                        ]
                                                                    )
                                                                )
                                                            , Just
                                                                ( ExpressionLiteral
                                                                    ( NumberLiteral 0.0 Nothing )
                                                                )
                                                            ]
                                                        )
                                                    )
                                                ]
                                            , elseStmt = Just
                                                ( BlockStatement
                                                    [ VariableStatement
                                                        ( VariableDecStatement
                                                            ( VariableDeclaration
                                                                { kind = ElementaryType
                                                                    ( UnsignedInteger
                                                                        ( Just 64 )
                                                                    )
                                                                , location = Nothing
                                                                , ident = Identifier "roleId"
                                                                }
                                                            )
                                                            ( Just
                                                                ( FunctionCall
                                                                    ( IdentifierExpression
                                                                        ( Identifier "getTargetFunctionRole" )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ IdentifierExpression
                                                                            ( Identifier "target" )
                                                                        , IdentifierExpression
                                                                            ( Identifier "selector" )
                                                                        ]
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    , VariableStatement
                                                        ( VariableDecTupleStatement
                                                            [ Just
                                                                ( VariableDeclaration
                                                                    { kind = ElementaryType Bool
                                                                    , location = Nothing
                                                                    , ident = Identifier "isMember"
                                                                    }
                                                                )
                                                            , Just
                                                                ( VariableDeclaration
                                                                    { kind = ElementaryType
                                                                        ( UnsignedInteger
                                                                            ( Just 32 )
                                                                        )
                                                                    , location = Nothing
                                                                    , ident = Identifier "currentDelay"
                                                                    }
                                                                )
                                                            ]
                                                            ( FunctionCall
                                                                ( IdentifierExpression
                                                                    ( Identifier "hasRole" )
                                                                )
                                                                ( CommaArguments
                                                                    [ IdentifierExpression
                                                                        ( Identifier "roleId" )
                                                                    , IdentifierExpression
                                                                        ( Identifier "caller" )
                                                                    ]
                                                                )
                                                            )
                                                        )
                                                    , Return
                                                        ( Just
                                                            ( ConditionalExpression
                                                                ( IdentifierExpression
                                                                    ( Identifier "isMember" )
                                                                )
                                                                ( TupleExpression
                                                                    [ Just
                                                                        ( BinaryExpression Equal
                                                                            ( IdentifierExpression
                                                                                ( Identifier "currentDelay" )
                                                                            )
                                                                            ( ExpressionLiteral
                                                                                ( NumberLiteral 0.0 Nothing )
                                                                            )
                                                                        )
                                                                    , Just
                                                                        ( IdentifierExpression
                                                                            ( Identifier "currentDelay" )
                                                                        )
                                                                    ]
                                                                )
                                                                ( TupleExpression
                                                                    [ Just
                                                                        ( ExpressionLiteral ( BooleanLiteral False ) )
                                                                    , Just
                                                                        ( ExpressionLiteral
                                                                            ( NumberLiteral 0.0 Nothing )
                                                                        )
                                                                    ]
                                                                )
                                                            )
                                                        )
                                                    ]
                                                )
                                            }
                                        )
                                    )
                                }
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "expiration"
                    , params = []
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( ExpressionLiteral
                                    ( NumberLiteral 1.0 ( Just Weeks ) )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "minSetback"
                    , params = []
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( ExpressionLiteral
                                    ( NumberLiteral 5.0 ( Just Days ) )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "isTargetClosed"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( MemberAccess
                                    ( IndexExpression
                                        ( IdentifierExpression
                                            ( Identifier "_targets" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "target" )
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "closed" )
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "getTargetFunctionRole"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( FixedBytes 4 )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "selector" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( IndexExpression
                                    ( MemberAccess
                                        ( IndexExpression
                                            ( IdentifierExpression
                                                ( Identifier "_targets" )
                                            )
                                            ( IdentifierExpression
                                                ( Identifier "target" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "allowedRoles" )
                                        )
                                    )
                                    ( IdentifierExpression
                                        ( Identifier "selector" )
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "getTargetAdminDelay"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( FunctionCall
                                    ( MemberAccess
                                        ( MemberAccess
                                            ( IndexExpression
                                                ( IdentifierExpression
                                                    ( Identifier "_targets" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "target" )
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "adminDelay" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "get" )
                                        )
                                    )
                                    ( CommaArguments [] )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "getRoleAdmin"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( MemberAccess
                                    ( IndexExpression
                                        ( IdentifierExpression
                                            ( Identifier "_roles" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "roleId" )
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "admin" )
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "getRoleGuardian"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( MemberAccess
                                    ( IndexExpression
                                        ( IdentifierExpression
                                            ( Identifier "_roles" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "roleId" )
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "guardian" )
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "getRoleGrantDelay"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( FunctionCall
                                    ( MemberAccess
                                        ( MemberAccess
                                            ( IndexExpression
                                                ( IdentifierExpression
                                                    ( Identifier "_roles" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "roleId" )
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "grantDelay" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "get" )
                                        )
                                    )
                                    ( CommaArguments [] )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "getAccess"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "account" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 48 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "since" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "currentDelay" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "pendingDelay" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 48 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "effect" )
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = IdentifierType
                                        ( IdentifierPath
                                            [ Identifier "Access" ]
                                        )
                                    , location = Just Storage
                                    , ident = Identifier "access"
                                    }
                                )
                                ( Just
                                    ( IndexExpression
                                        ( MemberAccess
                                            ( IndexExpression
                                                ( IdentifierExpression
                                                    ( Identifier "_roles" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "roleId" )
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "members" )
                                            )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "account" )
                                        )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( IdentifierExpression
                                    ( Identifier "since" )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "access" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "since" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( TupleExpression
                                    [ Just
                                        ( IdentifierExpression
                                            ( Identifier "currentDelay" )
                                        )
                                    , Just
                                        ( IdentifierExpression
                                            ( Identifier "pendingDelay" )
                                        )
                                    , Just
                                        ( IdentifierExpression
                                            ( Identifier "effect" )
                                        )
                                    ]
                                )
                                ( FunctionCall
                                    ( MemberAccess
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "access" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "delay" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "getFull" )
                                        )
                                    )
                                    ( CommaArguments [] )
                                )
                            )
                        , Return
                            ( Just
                                ( TupleExpression
                                    [ Just
                                        ( IdentifierExpression
                                            ( Identifier "since" )
                                        )
                                    , Just
                                        ( IdentifierExpression
                                            ( Identifier "currentDelay" )
                                        )
                                    , Just
                                        ( IdentifierExpression
                                            ( Identifier "pendingDelay" )
                                        )
                                    , Just
                                        ( IdentifierExpression
                                            ( Identifier "effect" )
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "hasRole"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "account" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Just
                                ( Identifier "isMember" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "executionDelay" )
                            }
                        ]
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression Equal
                                    ( IdentifierExpression
                                        ( Identifier "roleId" )
                                    )
                                    ( IdentifierExpression
                                        ( Identifier "PUBLIC_ROLE" )
                                    )
                                , trueStmt = BlockStatement
                                    [ Return
                                        ( Just
                                            ( TupleExpression
                                                [ Just
                                                    ( ExpressionLiteral ( BooleanLiteral True ) )
                                                , Just
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 0.0 Nothing )
                                                    )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Just
                                    ( BlockStatement
                                        [ VariableStatement
                                            ( VariableDecTupleStatement
                                                [ Just
                                                    ( VariableDeclaration
                                                        { kind = ElementaryType
                                                            ( UnsignedInteger
                                                                ( Just 48 )
                                                            )
                                                        , location = Nothing
                                                        , ident = Identifier "hasRoleSince"
                                                        }
                                                    )
                                                , Just
                                                    ( VariableDeclaration
                                                        { kind = ElementaryType
                                                            ( UnsignedInteger
                                                                ( Just 32 )
                                                            )
                                                        , location = Nothing
                                                        , ident = Identifier "currentDelay"
                                                        }
                                                    )
                                                , Nothing
                                                , Nothing
                                                ]
                                                ( FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "getAccess" )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "roleId" )
                                                        , IdentifierExpression
                                                            ( Identifier "account" )
                                                        ]
                                                    )
                                                )
                                            )
                                        , Return
                                            ( Just
                                                ( TupleExpression
                                                    [ Just
                                                        ( BinaryExpression And
                                                            ( BinaryExpression NotEqual
                                                                ( IdentifierExpression
                                                                    ( Identifier "hasRoleSince" )
                                                                )
                                                                ( ExpressionLiteral
                                                                    ( NumberLiteral 0.0 Nothing )
                                                                )
                                                            )
                                                            ( BinaryExpression LessEqual
                                                                ( IdentifierExpression
                                                                    ( Identifier "hasRoleSince" )
                                                                )
                                                                ( FunctionCall
                                                                    ( MemberAccess
                                                                        ( IdentifierExpression
                                                                            ( Identifier "Time" )
                                                                        )
                                                                        ( MemberAccessIdentifier
                                                                            ( Identifier "timestamp" )
                                                                        )
                                                                    )
                                                                    ( CommaArguments [] )
                                                                )
                                                            )
                                                        )
                                                    , Just
                                                        ( IdentifierExpression
                                                            ( Identifier "currentDelay" )
                                                        )
                                                    ]
                                                )
                                            )
                                        ]
                                    )
                                }
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "labelRole"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        , Parameter
                            { kind = ElementaryType String
                            , location = Just Calldata
                            , ident = Just
                                ( Identifier "label" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncVirtual
                        , FuncModifierInvocation
                            ( ModifierInvocation
                                { path = IdentifierPath
                                    [ Identifier "onlyAuthorized" ]
                                , args = Nothing
                                }
                            )
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression Or
                                    ( BinaryExpression Equal
                                        ( IdentifierExpression
                                            ( Identifier "roleId" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "ADMIN_ROLE" )
                                        )
                                    )
                                    ( BinaryExpression Equal
                                        ( IdentifierExpression
                                            ( Identifier "roleId" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "PUBLIC_ROLE" )
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ Revert
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "AccessManagerLockedRole" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "roleId" )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , Emit
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "RoleLabel" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "roleId" )
                                    , IdentifierExpression
                                        ( Identifier "label" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "grantRole"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "account" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "executionDelay" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncVirtual
                        , FuncModifierInvocation
                            ( ModifierInvocation
                                { path = IdentifierPath
                                    [ Identifier "onlyAuthorized" ]
                                , args = Nothing
                                }
                            )
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "_grantRole" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "roleId" )
                                    , IdentifierExpression
                                        ( Identifier "account" )
                                    , FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "getRoleGrantDelay" )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "roleId" )
                                            ]
                                        )
                                    , IdentifierExpression
                                        ( Identifier "executionDelay" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "revokeRole"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "account" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncVirtual
                        , FuncModifierInvocation
                            ( ModifierInvocation
                                { path = IdentifierPath
                                    [ Identifier "onlyAuthorized" ]
                                , args = Nothing
                                }
                            )
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "_revokeRole" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "roleId" )
                                    , IdentifierExpression
                                        ( Identifier "account" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "renounceRole"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "callerConfirmation" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression NotEqual
                                    ( IdentifierExpression
                                        ( Identifier "callerConfirmation" )
                                    )
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "_msgSender" )
                                        )
                                        ( CommaArguments [] )
                                    )
                                , trueStmt = BlockStatement
                                    [ Revert
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "AccessManagerBadConfirmation" )
                                            )
                                            ( CommaArguments [] )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "_revokeRole" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "roleId" )
                                    , IdentifierExpression
                                        ( Identifier "callerConfirmation" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "setRoleAdmin"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "admin" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncVirtual
                        , FuncModifierInvocation
                            ( ModifierInvocation
                                { path = IdentifierPath
                                    [ Identifier "onlyAuthorized" ]
                                , args = Nothing
                                }
                            )
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "_setRoleAdmin" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "roleId" )
                                    , IdentifierExpression
                                        ( Identifier "admin" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "setRoleGuardian"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "guardian" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncVirtual
                        , FuncModifierInvocation
                            ( ModifierInvocation
                                { path = IdentifierPath
                                    [ Identifier "onlyAuthorized" ]
                                , args = Nothing
                                }
                            )
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "_setRoleGuardian" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "roleId" )
                                    , IdentifierExpression
                                        ( Identifier "guardian" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "setGrantDelay"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "newDelay" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncVirtual
                        , FuncModifierInvocation
                            ( ModifierInvocation
                                { path = IdentifierPath
                                    [ Identifier "onlyAuthorized" ]
                                , args = Nothing
                                }
                            )
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "_setGrantDelay" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "roleId" )
                                    , NewType
                                        ( IdentifierType
                                            ( IdentifierPath
                                                [ Identifier "Delay" ]
                                            )
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_grantRole"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "account" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "grantDelay" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "executionDelay" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression Equal
                                    ( IdentifierExpression
                                        ( Identifier "roleId" )
                                    )
                                    ( IdentifierExpression
                                        ( Identifier "PUBLIC_ROLE" )
                                    )
                                , trueStmt = BlockStatement
                                    [ Revert
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "AccessManagerLockedRole" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "roleId" )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bool
                                    , location = Nothing
                                    , ident = Identifier "newMember"
                                    }
                                )
                                ( Just
                                    ( BinaryExpression Equal
                                        ( MemberAccess
                                            ( IndexExpression
                                                ( MemberAccess
                                                    ( IndexExpression
                                                        ( IdentifierExpression
                                                            ( Identifier "_roles" )
                                                        )
                                                        ( IdentifierExpression
                                                            ( Identifier "roleId" )
                                                        )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "members" )
                                                    )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "account" )
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "since" )
                                            )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 0.0 Nothing )
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 48 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "since"
                                    }
                                ) Nothing
                            )
                        , If
                            ( IfStatement
                                { expr = NewType
                                    ( IdentifierType
                                        ( IdentifierPath
                                            [ Identifier "Member" ]
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IdentifierExpression
                                                ( Identifier "since" )
                                            )
                                            ( BinaryExpression Add
                                                ( FunctionCall
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "Time" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "timestamp" )
                                                        )
                                                    )
                                                    ( CommaArguments [] )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "grantDelay" )
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IndexExpression
                                                ( MemberAccess
                                                    ( IndexExpression
                                                        ( IdentifierExpression
                                                            ( Identifier "_roles" )
                                                        )
                                                        ( IdentifierExpression
                                                            ( Identifier "roleId" )
                                                        )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "members" )
                                                    )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "account" )
                                                )
                                            )
                                            ( FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "Access" )
                                                )
                                                ( NamedArguments
                                                    [
                                                        ( Identifier "since"
                                                        , IdentifierExpression
                                                            ( Identifier "since" )
                                                        )
                                                    ,
                                                        ( Identifier "delay"
                                                        , FunctionCall
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "executionDelay" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "toDelay" )
                                                                )
                                                            )
                                                            ( CommaArguments [] )
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    ]
                                , elseStmt = Just
                                    ( BlockStatement
                                        [ ExpressionStatement
                                            ( BinaryExpression Assign
                                                ( TupleExpression
                                                    [ Just
                                                        ( MemberAccess
                                                            ( IndexExpression
                                                                ( MemberAccess
                                                                    ( IndexExpression
                                                                        ( IdentifierExpression
                                                                            ( Identifier "_roles" )
                                                                        )
                                                                        ( IdentifierExpression
                                                                            ( Identifier "roleId" )
                                                                        )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "members" )
                                                                    )
                                                                )
                                                                ( IdentifierExpression
                                                                    ( Identifier "account" )
                                                                )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "delay" )
                                                            )
                                                        )
                                                    , Just
                                                        ( IdentifierExpression
                                                            ( Identifier "since" )
                                                        )
                                                    ]
                                                )
                                                ( FunctionCall
                                                    ( MemberAccess
                                                        ( MemberAccess
                                                            ( IndexExpression
                                                                ( MemberAccess
                                                                    ( IndexExpression
                                                                        ( IdentifierExpression
                                                                            ( Identifier "_roles" )
                                                                        )
                                                                        ( IdentifierExpression
                                                                            ( Identifier "roleId" )
                                                                        )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "members" )
                                                                    )
                                                                )
                                                                ( IdentifierExpression
                                                                    ( Identifier "account" )
                                                                )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "delay" )
                                                            )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "withUpdate" )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "executionDelay" )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 0.0 Nothing )
                                                        ]
                                                    )
                                                )
                                            )
                                        ]
                                    )
                                }
                            )
                        , Emit
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "RoleGranted" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "roleId" )
                                    , IdentifierExpression
                                        ( Identifier "account" )
                                    , IdentifierExpression
                                        ( Identifier "executionDelay" )
                                    , IdentifierExpression
                                        ( Identifier "since" )
                                    , NewType
                                        ( IdentifierType
                                            ( IdentifierPath
                                                [ Identifier "Member" ]
                                            )
                                        )
                                    ]
                                )
                            )
                        , Return
                            ( Just
                                ( NewType
                                    ( IdentifierType
                                        ( IdentifierPath
                                            [ Identifier "Member" ]
                                        )
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_revokeRole"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "account" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression Equal
                                    ( IdentifierExpression
                                        ( Identifier "roleId" )
                                    )
                                    ( IdentifierExpression
                                        ( Identifier "PUBLIC_ROLE" )
                                    )
                                , trueStmt = BlockStatement
                                    [ Revert
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "AccessManagerLockedRole" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "roleId" )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression Equal
                                    ( MemberAccess
                                        ( IndexExpression
                                            ( MemberAccess
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "_roles" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "roleId" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "members" )
                                                )
                                            )
                                            ( IdentifierExpression
                                                ( Identifier "account" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "since" )
                                        )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    )
                                , trueStmt = BlockStatement
                                    [ Return
                                        ( Just
                                            ( ExpressionLiteral ( BooleanLiteral False ) )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , ExpressionStatement
                            ( UnaryExpression UPreDelete
                                ( IndexExpression
                                    ( MemberAccess
                                        ( IndexExpression
                                            ( IdentifierExpression
                                                ( Identifier "_roles" )
                                            )
                                            ( IdentifierExpression
                                                ( Identifier "roleId" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "members" )
                                        )
                                    )
                                    ( IdentifierExpression
                                        ( Identifier "account" )
                                    )
                                )
                            )
                        , Emit
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "RoleRevoked" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "roleId" )
                                    , IdentifierExpression
                                        ( Identifier "account" )
                                    ]
                                )
                            )
                        , Return
                            ( Just
                                ( ExpressionLiteral ( BooleanLiteral True ) )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_setRoleAdmin"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "admin" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression Or
                                    ( BinaryExpression Equal
                                        ( IdentifierExpression
                                            ( Identifier "roleId" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "ADMIN_ROLE" )
                                        )
                                    )
                                    ( BinaryExpression Equal
                                        ( IdentifierExpression
                                            ( Identifier "roleId" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "PUBLIC_ROLE" )
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ Revert
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "AccessManagerLockedRole" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "roleId" )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IndexExpression
                                        ( IdentifierExpression
                                            ( Identifier "_roles" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "roleId" )
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "admin" )
                                    )
                                )
                                ( IdentifierExpression
                                    ( Identifier "admin" )
                                )
                            )
                        , Emit
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "RoleAdminChanged" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "roleId" )
                                    , IdentifierExpression
                                        ( Identifier "admin" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_setRoleGuardian"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "guardian" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression Or
                                    ( BinaryExpression Equal
                                        ( IdentifierExpression
                                            ( Identifier "roleId" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "ADMIN_ROLE" )
                                        )
                                    )
                                    ( BinaryExpression Equal
                                        ( IdentifierExpression
                                            ( Identifier "roleId" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "PUBLIC_ROLE" )
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ Revert
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "AccessManagerLockedRole" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "roleId" )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IndexExpression
                                        ( IdentifierExpression
                                            ( Identifier "_roles" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "roleId" )
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "guardian" )
                                    )
                                )
                                ( IdentifierExpression
                                    ( Identifier "guardian" )
                                )
                            )
                        , Emit
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "RoleGuardianChanged" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "roleId" )
                                    , IdentifierExpression
                                        ( Identifier "guardian" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_setGrantDelay"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "newDelay" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression Equal
                                    ( IdentifierExpression
                                        ( Identifier "roleId" )
                                    )
                                    ( IdentifierExpression
                                        ( Identifier "PUBLIC_ROLE" )
                                    )
                                , trueStmt = BlockStatement
                                    [ Revert
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "AccessManagerLockedRole" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "roleId" )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 48 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "effect"
                                    }
                                ) Nothing
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( TupleExpression
                                    [ Just
                                        ( MemberAccess
                                            ( IndexExpression
                                                ( IdentifierExpression
                                                    ( Identifier "_roles" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "roleId" )
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "grantDelay" )
                                            )
                                        )
                                    , Just
                                        ( IdentifierExpression
                                            ( Identifier "effect" )
                                        )
                                    ]
                                )
                                ( FunctionCall
                                    ( MemberAccess
                                        ( MemberAccess
                                            ( IndexExpression
                                                ( IdentifierExpression
                                                    ( Identifier "_roles" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "roleId" )
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "grantDelay" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "withUpdate" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ NewType
                                            ( IdentifierType
                                                ( IdentifierPath
                                                    [ Identifier "Delay" ]
                                                )
                                            )
                                        , FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "minSetback" )
                                            )
                                            ( CommaArguments [] )
                                        ]
                                    )
                                )
                            )
                        , Emit
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "RoleGrantDelayChanged" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "roleId" )
                                    , NewType
                                        ( IdentifierType
                                            ( IdentifierPath
                                                [ Identifier "Delay" ]
                                            )
                                        )
                                    , IdentifierExpression
                                        ( Identifier "effect" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "setTargetFunctionRole"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ArrayType
                                ( ElementaryType
                                    ( FixedBytes 4 )
                                ) [ ArrayTypeEmpty ]
                            , location = Just Calldata
                            , ident = Just
                                ( Identifier "selectors" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncVirtual
                        , FuncModifierInvocation
                            ( ModifierInvocation
                                { path = IdentifierPath
                                    [ Identifier "onlyAuthorized" ]
                                , args = Nothing
                                }
                            )
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ For
                            ( ForStatement
                                { initializer = ForInitializerVariable
                                    ( VariableDecStatement
                                        ( VariableDeclaration
                                            { kind = ElementaryType
                                                ( UnsignedInteger
                                                    ( Just 256 )
                                                )
                                            , location = Nothing
                                            , ident = Identifier "i"
                                            }
                                        )
                                        ( Just
                                            ( ExpressionLiteral
                                                ( NumberLiteral 0.0 Nothing )
                                            )
                                        )
                                    )
                                , condition = Just
                                    ( BinaryExpression LessThan
                                        ( IdentifierExpression
                                            ( Identifier "i" )
                                        )
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "selectors" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "length" )
                                            )
                                        )
                                    )
                                , increment = Just
                                    ( UnaryExpression UPreInc
                                        ( IdentifierExpression
                                            ( Identifier "i" )
                                        )
                                    )
                                , body = BlockStatement
                                    [ ExpressionStatement
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "_setTargetFunctionRole" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "target" )
                                                , IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "selectors" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                , IdentifierExpression
                                                    ( Identifier "roleId" )
                                                ]
                                            )
                                        )
                                    ]
                                }
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_setTargetFunctionRole"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( FixedBytes 4 )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "selector" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleId" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( BinaryExpression Assign
                                ( IndexExpression
                                    ( MemberAccess
                                        ( IndexExpression
                                            ( IdentifierExpression
                                                ( Identifier "_targets" )
                                            )
                                            ( IdentifierExpression
                                                ( Identifier "target" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "allowedRoles" )
                                        )
                                    )
                                    ( IdentifierExpression
                                        ( Identifier "selector" )
                                    )
                                )
                                ( IdentifierExpression
                                    ( Identifier "roleId" )
                                )
                            )
                        , Emit
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "TargetFunctionRoleUpdated" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "target" )
                                    , IdentifierExpression
                                        ( Identifier "selector" )
                                    , IdentifierExpression
                                        ( Identifier "roleId" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "setTargetAdminDelay"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "newDelay" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncVirtual
                        , FuncModifierInvocation
                            ( ModifierInvocation
                                { path = IdentifierPath
                                    [ Identifier "onlyAuthorized" ]
                                , args = Nothing
                                }
                            )
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "_setTargetAdminDelay" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "target" )
                                    , NewType
                                        ( IdentifierType
                                            ( IdentifierPath
                                                [ Identifier "Delay" ]
                                            )
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_setTargetAdminDelay"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "newDelay" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 48 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "effect"
                                    }
                                ) Nothing
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( TupleExpression
                                    [ Just
                                        ( MemberAccess
                                            ( IndexExpression
                                                ( IdentifierExpression
                                                    ( Identifier "_targets" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "target" )
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "adminDelay" )
                                            )
                                        )
                                    , Just
                                        ( IdentifierExpression
                                            ( Identifier "effect" )
                                        )
                                    ]
                                )
                                ( FunctionCall
                                    ( MemberAccess
                                        ( MemberAccess
                                            ( IndexExpression
                                                ( IdentifierExpression
                                                    ( Identifier "_targets" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "target" )
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "adminDelay" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "withUpdate" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ NewType
                                            ( IdentifierType
                                                ( IdentifierPath
                                                    [ Identifier "Delay" ]
                                                )
                                            )
                                        , FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "minSetback" )
                                            )
                                            ( CommaArguments [] )
                                        ]
                                    )
                                )
                            )
                        , Emit
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "TargetAdminDelayUpdated" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "target" )
                                    , NewType
                                        ( IdentifierType
                                            ( IdentifierPath
                                                [ Identifier "Delay" ]
                                            )
                                        )
                                    , IdentifierExpression
                                        ( Identifier "effect" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "setTargetClosed"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Just
                                ( Identifier "closed" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncVirtual
                        , FuncModifierInvocation
                            ( ModifierInvocation
                                { path = IdentifierPath
                                    [ Identifier "onlyAuthorized" ]
                                , args = Nothing
                                }
                            )
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "_setTargetClosed" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "target" )
                                    , IdentifierExpression
                                        ( Identifier "closed" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_setTargetClosed"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Just
                                ( Identifier "closed" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression Equal
                                    ( IdentifierExpression
                                        ( Identifier "target" )
                                    )
                                    ( FunctionCall
                                        ( TypeExpression ( ElementaryType Address ) )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "this" )
                                            ]
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ Revert
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "AccessManagerLockedAccount" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "target" )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IndexExpression
                                        ( IdentifierExpression
                                            ( Identifier "_targets" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "target" )
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "closed" )
                                    )
                                )
                                ( IdentifierExpression
                                    ( Identifier "closed" )
                                )
                            )
                        , Emit
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "TargetClosed" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "target" )
                                    , IdentifierExpression
                                        ( Identifier "closed" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "getSchedule"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( FixedBytes 32 )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "id" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 48 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 48 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "timepoint"
                                    }
                                )
                                ( Just
                                    ( MemberAccess
                                        ( IndexExpression
                                            ( IdentifierExpression
                                                ( Identifier "_schedules" )
                                            )
                                            ( IdentifierExpression
                                                ( Identifier "id" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "timepoint" )
                                        )
                                    )
                                )
                            )
                        , Return
                            ( Just
                                ( ConditionalExpression
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "_isExpired" )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "timepoint" )
                                            ]
                                        )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    )
                                    ( IdentifierExpression
                                        ( Identifier "timepoint" )
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "getNonce"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( FixedBytes 32 )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "id" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( MemberAccess
                                    ( IndexExpression
                                        ( IdentifierExpression
                                            ( Identifier "_schedules" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "id" )
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "nonce" )
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "schedule"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ElementaryType Bytes
                            , location = Just Calldata
                            , ident = Just
                                ( Identifier "data" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 48 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "when" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( FixedBytes 32 )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "operationId" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "nonce" )
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Address
                                    , location = Nothing
                                    , ident = Identifier "caller"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "_msgSender" )
                                        )
                                        ( CommaArguments [] )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecTupleStatement
                                [ Nothing
                                , Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType
                                            ( UnsignedInteger
                                                ( Just 32 )
                                            )
                                        , location = Nothing
                                        , ident = Identifier "setback"
                                        }
                                    )
                                ]
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "_canCallExtended" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "caller" )
                                        , IdentifierExpression
                                            ( Identifier "target" )
                                        , IdentifierExpression
                                            ( Identifier "data" )
                                        ]
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 48 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "minWhen"
                                    }
                                )
                                ( Just
                                    ( BinaryExpression Add
                                        ( FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "Time" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "timestamp" )
                                                )
                                            )
                                            ( CommaArguments [] )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "setback" )
                                        )
                                    )
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression Or
                                    ( BinaryExpression Equal
                                        ( IdentifierExpression
                                            ( Identifier "setback" )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 0.0 Nothing )
                                        )
                                    )
                                    ( TupleExpression
                                        [ Just
                                            ( BinaryExpression And
                                                ( BinaryExpression GreaterThan
                                                    ( IdentifierExpression
                                                        ( Identifier "when" )
                                                    )
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 0.0 Nothing )
                                                    )
                                                )
                                                ( BinaryExpression LessThan
                                                    ( IdentifierExpression
                                                        ( Identifier "when" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "minWhen" )
                                                    )
                                                )
                                            )
                                        ]
                                    )
                                , trueStmt = BlockStatement
                                    [ Revert
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "AccessManagerUnauthorizedCall" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "caller" )
                                                , IdentifierExpression
                                                    ( Identifier "target" )
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "_checkSelector" )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "data" )
                                                        ]
                                                    )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( IdentifierExpression
                                    ( Identifier "when" )
                                )
                                ( FunctionCall
                                    ( TypeExpression
                                        ( ElementaryType
                                            ( UnsignedInteger
                                                ( Just 48 )
                                            )
                                        )
                                    )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "Math" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "max" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "when" )
                                                , IdentifierExpression
                                                    ( Identifier "minWhen" )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( IdentifierExpression
                                    ( Identifier "operationId" )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "hashOperation" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "caller" )
                                        , IdentifierExpression
                                            ( Identifier "target" )
                                        , IdentifierExpression
                                            ( Identifier "data" )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "_checkNotScheduled" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "operationId" )
                                    ]
                                )
                            )
                        , BlockStatement
                            [ ExpressionStatement
                                ( BinaryExpression Assign
                                    ( IdentifierExpression
                                        ( Identifier "nonce" )
                                    )
                                    ( BinaryExpression Add
                                        ( MemberAccess
                                            ( IndexExpression
                                                ( IdentifierExpression
                                                    ( Identifier "_schedules" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "operationId" )
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "nonce" )
                                            )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 1.0 Nothing )
                                        )
                                    )
                                )
                            ]
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IndexExpression
                                        ( IdentifierExpression
                                            ( Identifier "_schedules" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "operationId" )
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "timepoint" )
                                    )
                                )
                                ( IdentifierExpression
                                    ( Identifier "when" )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IndexExpression
                                        ( IdentifierExpression
                                            ( Identifier "_schedules" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "operationId" )
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "nonce" )
                                    )
                                )
                                ( IdentifierExpression
                                    ( Identifier "nonce" )
                                )
                            )
                        , Emit
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "OperationScheduled" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "operationId" )
                                    , IdentifierExpression
                                        ( Identifier "nonce" )
                                    , IdentifierExpression
                                        ( Identifier "when" )
                                    , IdentifierExpression
                                        ( Identifier "caller" )
                                    , IdentifierExpression
                                        ( Identifier "target" )
                                    , IdentifierExpression
                                        ( Identifier "data" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_checkNotScheduled"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( FixedBytes 32 )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "operationId" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability View
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 48 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "prevTimepoint"
                                    }
                                )
                                ( Just
                                    ( MemberAccess
                                        ( IndexExpression
                                            ( IdentifierExpression
                                                ( Identifier "_schedules" )
                                            )
                                            ( IdentifierExpression
                                                ( Identifier "operationId" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "timepoint" )
                                        )
                                    )
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression And
                                    ( BinaryExpression NotEqual
                                        ( IdentifierExpression
                                            ( Identifier "prevTimepoint" )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 0.0 Nothing )
                                        )
                                    )
                                    ( UnaryExpression UPreNot
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "_isExpired" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "prevTimepoint" )
                                                ]
                                            )
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ Revert
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "AccessManagerAlreadyScheduled" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "operationId" )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "execute"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ElementaryType Bytes
                            , location = Just Calldata
                            , ident = Just
                                ( Identifier "data" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability Payable
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Address
                                    , location = Nothing
                                    , ident = Identifier "caller"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "_msgSender" )
                                        )
                                        ( CommaArguments [] )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecTupleStatement
                                [ Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType Bool
                                        , location = Nothing
                                        , ident = Identifier "immediate"
                                        }
                                    )
                                , Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType
                                            ( UnsignedInteger
                                                ( Just 32 )
                                            )
                                        , location = Nothing
                                        , ident = Identifier "setback"
                                        }
                                    )
                                ]
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "_canCallExtended" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "caller" )
                                        , IdentifierExpression
                                            ( Identifier "target" )
                                        , IdentifierExpression
                                            ( Identifier "data" )
                                        ]
                                    )
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression And
                                    ( UnaryExpression UPreNot
                                        ( IdentifierExpression
                                            ( Identifier "immediate" )
                                        )
                                    )
                                    ( BinaryExpression Equal
                                        ( IdentifierExpression
                                            ( Identifier "setback" )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 0.0 Nothing )
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ Revert
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "AccessManagerUnauthorizedCall" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "caller" )
                                                , IdentifierExpression
                                                    ( Identifier "target" )
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "_checkSelector" )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "data" )
                                                        ]
                                                    )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( FixedBytes 32 )
                                    , location = Nothing
                                    , ident = Identifier "operationId"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "hashOperation" )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "caller" )
                                            , IdentifierExpression
                                                ( Identifier "target" )
                                            , IdentifierExpression
                                                ( Identifier "data" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 32 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "nonce"
                                    }
                                ) Nothing
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression Or
                                    ( BinaryExpression NotEqual
                                        ( IdentifierExpression
                                            ( Identifier "setback" )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 0.0 Nothing )
                                        )
                                    )
                                    ( BinaryExpression NotEqual
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "getSchedule" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "operationId" )
                                                ]
                                            )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 0.0 Nothing )
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IdentifierExpression
                                                ( Identifier "nonce" )
                                            )
                                            ( FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "_consumeScheduledOp" )
                                                )
                                                ( CommaArguments
                                                    [ IdentifierExpression
                                                        ( Identifier "operationId" )
                                                    ]
                                                )
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( FixedBytes 32 )
                                    , location = Nothing
                                    , ident = Identifier "executionIdBefore"
                                    }
                                )
                                ( Just
                                    ( IdentifierExpression
                                        ( Identifier "_executionId" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( IdentifierExpression
                                    ( Identifier "_executionId" )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "_hashExecutionId" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "target" )
                                        , FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "_checkSelector" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "data" )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "Address" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "functionCallWithValue" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "target" )
                                    , IdentifierExpression
                                        ( Identifier "data" )
                                    , MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "msg" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "value" )
                                        )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( IdentifierExpression
                                    ( Identifier "_executionId" )
                                )
                                ( IdentifierExpression
                                    ( Identifier "executionIdBefore" )
                                )
                            )
                        , Return
                            ( Just
                                ( IdentifierExpression
                                    ( Identifier "nonce" )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "cancel"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "caller" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ElementaryType Bytes
                            , location = Just Calldata
                            , ident = Just
                                ( Identifier "data" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Address
                                    , location = Nothing
                                    , ident = Identifier "msgsender"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "_msgSender" )
                                        )
                                        ( CommaArguments [] )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( FixedBytes 4 )
                                    , location = Nothing
                                    , ident = Identifier "selector"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "_checkSelector" )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "data" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( FixedBytes 32 )
                                    , location = Nothing
                                    , ident = Identifier "operationId"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "hashOperation" )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "caller" )
                                            , IdentifierExpression
                                                ( Identifier "target" )
                                            , IdentifierExpression
                                                ( Identifier "data" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression Equal
                                    ( MemberAccess
                                        ( IndexExpression
                                            ( IdentifierExpression
                                                ( Identifier "_schedules" )
                                            )
                                            ( IdentifierExpression
                                                ( Identifier "operationId" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "timepoint" )
                                        )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    )
                                , trueStmt = BlockStatement
                                    [ Revert
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "AccessManagerNotScheduled" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "operationId" )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Just
                                    ( If
                                        ( IfStatement
                                            { expr = BinaryExpression NotEqual
                                                ( IdentifierExpression
                                                    ( Identifier "caller" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "msgsender" )
                                                )
                                            , trueStmt = BlockStatement
                                                [ VariableStatement
                                                    ( VariableDecTupleStatement
                                                        [ Just
                                                            ( VariableDeclaration
                                                                { kind = ElementaryType Bool
                                                                , location = Nothing
                                                                , ident = Identifier "isAdmin"
                                                                }
                                                            )
                                                        , Nothing
                                                        ]
                                                        ( FunctionCall
                                                            ( IdentifierExpression
                                                                ( Identifier "hasRole" )
                                                            )
                                                            ( CommaArguments
                                                                [ IdentifierExpression
                                                                    ( Identifier "ADMIN_ROLE" )
                                                                , IdentifierExpression
                                                                    ( Identifier "msgsender" )
                                                                ]
                                                            )
                                                        )
                                                    )
                                                , VariableStatement
                                                    ( VariableDecTupleStatement
                                                        [ Just
                                                            ( VariableDeclaration
                                                                { kind = ElementaryType Bool
                                                                , location = Nothing
                                                                , ident = Identifier "isGuardian"
                                                                }
                                                            )
                                                        , Nothing
                                                        ]
                                                        ( FunctionCall
                                                            ( IdentifierExpression
                                                                ( Identifier "hasRole" )
                                                            )
                                                            ( CommaArguments
                                                                [ FunctionCall
                                                                    ( IdentifierExpression
                                                                        ( Identifier "getRoleGuardian" )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ FunctionCall
                                                                            ( IdentifierExpression
                                                                                ( Identifier "getTargetFunctionRole" )
                                                                            )
                                                                            ( CommaArguments
                                                                                [ IdentifierExpression
                                                                                    ( Identifier "target" )
                                                                                , IdentifierExpression
                                                                                    ( Identifier "selector" )
                                                                                ]
                                                                            )
                                                                        ]
                                                                    )
                                                                , IdentifierExpression
                                                                    ( Identifier "msgsender" )
                                                                ]
                                                            )
                                                        )
                                                    )
                                                , If
                                                    ( IfStatement
                                                        { expr = BinaryExpression And
                                                            ( UnaryExpression UPreNot
                                                                ( IdentifierExpression
                                                                    ( Identifier "isAdmin" )
                                                                )
                                                            )
                                                            ( UnaryExpression UPreNot
                                                                ( IdentifierExpression
                                                                    ( Identifier "isGuardian" )
                                                                )
                                                            )
                                                        , trueStmt = BlockStatement
                                                            [ Revert
                                                                ( FunctionCall
                                                                    ( IdentifierExpression
                                                                        ( Identifier "AccessManagerUnauthorizedCancel" )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ IdentifierExpression
                                                                            ( Identifier "msgsender" )
                                                                        , IdentifierExpression
                                                                            ( Identifier "caller" )
                                                                        , IdentifierExpression
                                                                            ( Identifier "target" )
                                                                        , IdentifierExpression
                                                                            ( Identifier "selector" )
                                                                        ]
                                                                    )
                                                                )
                                                            ]
                                                        , elseStmt = Nothing
                                                        }
                                                    )
                                                ]
                                            , elseStmt = Nothing
                                            }
                                        )
                                    )
                                }
                            )
                        , ExpressionStatement
                            ( UnaryExpression UPreDelete
                                ( MemberAccess
                                    ( IndexExpression
                                        ( IdentifierExpression
                                            ( Identifier "_schedules" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "operationId" )
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "timepoint" )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 32 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "nonce"
                                    }
                                )
                                ( Just
                                    ( MemberAccess
                                        ( IndexExpression
                                            ( IdentifierExpression
                                                ( Identifier "_schedules" )
                                            )
                                            ( IdentifierExpression
                                                ( Identifier "operationId" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "nonce" )
                                        )
                                    )
                                )
                            )
                        , Emit
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "OperationCanceled" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "operationId" )
                                    , IdentifierExpression
                                        ( Identifier "nonce" )
                                    ]
                                )
                            )
                        , Return
                            ( Just
                                ( IdentifierExpression
                                    ( Identifier "nonce" )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "consumeScheduledOp"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "caller" )
                            }
                        , Parameter
                            { kind = ElementaryType Bytes
                            , location = Just Calldata
                            , ident = Just
                                ( Identifier "data" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Address
                                    , location = Nothing
                                    , ident = Identifier "target"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "_msgSender" )
                                        )
                                        ( CommaArguments [] )
                                    )
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression NotEqual
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "IAccessManaged" )
                                                )
                                                ( CommaArguments
                                                    [ IdentifierExpression
                                                        ( Identifier "target" )
                                                    ]
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "isConsumingScheduledOp" )
                                            )
                                        )
                                        ( CommaArguments [] )
                                    )
                                    ( MemberAccess
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "IAccessManaged" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "isConsumingScheduledOp" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "selector" )
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ Revert
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "AccessManagerUnauthorizedConsume" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "target" )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "_consumeScheduledOp" )
                                )
                                ( CommaArguments
                                    [ FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "hashOperation" )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "caller" )
                                            , IdentifierExpression
                                                ( Identifier "target" )
                                            , IdentifierExpression
                                                ( Identifier "data" )
                                            ]
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_consumeScheduledOp"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( FixedBytes 32 )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "operationId" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 48 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "timepoint"
                                    }
                                )
                                ( Just
                                    ( MemberAccess
                                        ( IndexExpression
                                            ( IdentifierExpression
                                                ( Identifier "_schedules" )
                                            )
                                            ( IdentifierExpression
                                                ( Identifier "operationId" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "timepoint" )
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 32 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "nonce"
                                    }
                                )
                                ( Just
                                    ( MemberAccess
                                        ( IndexExpression
                                            ( IdentifierExpression
                                                ( Identifier "_schedules" )
                                            )
                                            ( IdentifierExpression
                                                ( Identifier "operationId" )
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "nonce" )
                                        )
                                    )
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression Equal
                                    ( IdentifierExpression
                                        ( Identifier "timepoint" )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    )
                                , trueStmt = BlockStatement
                                    [ Revert
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "AccessManagerNotScheduled" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "operationId" )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Just
                                    ( If
                                        ( IfStatement
                                            { expr = BinaryExpression GreaterThan
                                                ( IdentifierExpression
                                                    ( Identifier "timepoint" )
                                                )
                                                ( FunctionCall
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "Time" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "timestamp" )
                                                        )
                                                    )
                                                    ( CommaArguments [] )
                                                )
                                            , trueStmt = BlockStatement
                                                [ Revert
                                                    ( FunctionCall
                                                        ( IdentifierExpression
                                                            ( Identifier "AccessManagerNotReady" )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "operationId" )
                                                            ]
                                                        )
                                                    )
                                                ]
                                            , elseStmt = Just
                                                ( If
                                                    ( IfStatement
                                                        { expr = FunctionCall
                                                            ( IdentifierExpression
                                                                ( Identifier "_isExpired" )
                                                            )
                                                            ( CommaArguments
                                                                [ IdentifierExpression
                                                                    ( Identifier "timepoint" )
                                                                ]
                                                            )
                                                        , trueStmt = BlockStatement
                                                            [ Revert
                                                                ( FunctionCall
                                                                    ( IdentifierExpression
                                                                        ( Identifier "AccessManagerExpired" )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ IdentifierExpression
                                                                            ( Identifier "operationId" )
                                                                        ]
                                                                    )
                                                                )
                                                            ]
                                                        , elseStmt = Nothing
                                                        }
                                                    )
                                                )
                                            }
                                        )
                                    )
                                }
                            )
                        , ExpressionStatement
                            ( UnaryExpression UPreDelete
                                ( MemberAccess
                                    ( IndexExpression
                                        ( IdentifierExpression
                                            ( Identifier "_schedules" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "operationId" )
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "timepoint" )
                                    )
                                )
                            )
                        , Emit
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "OperationExecuted" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "operationId" )
                                    , IdentifierExpression
                                        ( Identifier "nonce" )
                                    ]
                                )
                            )
                        , Return
                            ( Just
                                ( IdentifierExpression
                                    ( Identifier "nonce" )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "hashOperation"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "caller" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ElementaryType Bytes
                            , location = Just Calldata
                            , ident = Just
                                ( Identifier "data" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( FixedBytes 32 )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "keccak256" )
                                    )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "abi" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "encode" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "caller" )
                                                , IdentifierExpression
                                                    ( Identifier "target" )
                                                , IdentifierExpression
                                                    ( Identifier "data" )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "updateAuthority"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "newAuthority" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncVirtual
                        , FuncModifierInvocation
                            ( ModifierInvocation
                                { path = IdentifierPath
                                    [ Identifier "onlyAuthorized" ]
                                , args = Nothing
                                }
                            )
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "IAccessManaged" )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "target" )
                                            ]
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "setAuthority" )
                                    )
                                )
                                ( CommaArguments
                                    [ NewType
                                        ( IdentifierType
                                            ( IdentifierPath
                                                [ Identifier "Authority" ]
                                            )
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_checkAuthorized"
                    , params = []
                    , restrictions = [ FuncVisibility FuncPrivate ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Address
                                    , location = Nothing
                                    , ident = Identifier "caller"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "_msgSender" )
                                        )
                                        ( CommaArguments [] )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecTupleStatement
                                [ Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType Bool
                                        , location = Nothing
                                        , ident = Identifier "immediate"
                                        }
                                    )
                                , Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType
                                            ( UnsignedInteger
                                                ( Just 32 )
                                            )
                                        , location = Nothing
                                        , ident = Identifier "delay"
                                        }
                                    )
                                ]
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "_canCallSelf" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "caller" )
                                        , FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "_msgData" )
                                            )
                                            ( CommaArguments [] )
                                        ]
                                    )
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = UnaryExpression UPreNot
                                    ( IdentifierExpression
                                        ( Identifier "immediate" )
                                    )
                                , trueStmt = BlockStatement
                                    [ If
                                        ( IfStatement
                                            { expr = BinaryExpression Equal
                                                ( IdentifierExpression
                                                    ( Identifier "delay" )
                                                )
                                                ( ExpressionLiteral
                                                    ( NumberLiteral 0.0 Nothing )
                                                )
                                            , trueStmt = BlockStatement
                                                [ VariableStatement
                                                    ( VariableDecTupleStatement
                                                        [ Nothing
                                                        , Just
                                                            ( VariableDeclaration
                                                                { kind = ElementaryType
                                                                    ( UnsignedInteger
                                                                        ( Just 64 )
                                                                    )
                                                                , location = Nothing
                                                                , ident = Identifier "requiredRole"
                                                                }
                                                            )
                                                        , Nothing
                                                        ]
                                                        ( FunctionCall
                                                            ( IdentifierExpression
                                                                ( Identifier "_getAdminRestrictions" )
                                                            )
                                                            ( CommaArguments
                                                                [ FunctionCall
                                                                    ( IdentifierExpression
                                                                        ( Identifier "_msgData" )
                                                                    )
                                                                    ( CommaArguments [] )
                                                                ]
                                                            )
                                                        )
                                                    )
                                                , Revert
                                                    ( FunctionCall
                                                        ( IdentifierExpression
                                                            ( Identifier "AccessManagerUnauthorizedAccount" )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "caller" )
                                                            , IdentifierExpression
                                                                ( Identifier "requiredRole" )
                                                            ]
                                                        )
                                                    )
                                                ]
                                            , elseStmt = Just
                                                ( BlockStatement
                                                    [ ExpressionStatement
                                                        ( FunctionCall
                                                            ( IdentifierExpression
                                                                ( Identifier "_consumeScheduledOp" )
                                                            )
                                                            ( CommaArguments
                                                                [ FunctionCall
                                                                    ( IdentifierExpression
                                                                        ( Identifier "hashOperation" )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ IdentifierExpression
                                                                            ( Identifier "caller" )
                                                                        , FunctionCall
                                                                            ( TypeExpression ( ElementaryType Address ) )
                                                                            ( CommaArguments
                                                                                [ IdentifierExpression
                                                                                    ( Identifier "this" )
                                                                                ]
                                                                            )
                                                                        , FunctionCall
                                                                            ( IdentifierExpression
                                                                                ( Identifier "_msgData" )
                                                                            )
                                                                            ( CommaArguments [] )
                                                                        ]
                                                                    )
                                                                ]
                                                            )
                                                        )
                                                    ]
                                                )
                                            }
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_getAdminRestrictions"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Bytes
                            , location = Just Calldata
                            , ident = Just
                                ( Identifier "data" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability View
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Just
                                ( Identifier "restricted" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 64 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "roleAdminId" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "executionDelay" )
                            }
                        ]
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression LessThan
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "data" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "length" )
                                        )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 4.0 Nothing )
                                    )
                                , trueStmt = BlockStatement
                                    [ Return
                                        ( Just
                                            ( TupleExpression
                                                [ Just
                                                    ( ExpressionLiteral ( BooleanLiteral False ) )
                                                , Just
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 0.0 Nothing )
                                                    )
                                                , Just
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 0.0 Nothing )
                                                    )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( FixedBytes 4 )
                                    , location = Nothing
                                    , ident = Identifier "selector"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "_checkSelector" )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "data" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression Or
                                    ( BinaryExpression Or
                                        ( BinaryExpression Or
                                            ( BinaryExpression Or
                                                ( BinaryExpression Equal
                                                    ( IdentifierExpression
                                                        ( Identifier "selector" )
                                                    )
                                                    ( MemberAccess
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "this" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "labelRole" )
                                                            )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "selector" )
                                                        )
                                                    )
                                                )
                                                ( BinaryExpression Equal
                                                    ( IdentifierExpression
                                                        ( Identifier "selector" )
                                                    )
                                                    ( MemberAccess
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "this" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "setRoleAdmin" )
                                                            )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "selector" )
                                                        )
                                                    )
                                                )
                                            )
                                            ( BinaryExpression Equal
                                                ( IdentifierExpression
                                                    ( Identifier "selector" )
                                                )
                                                ( MemberAccess
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "this" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "setRoleGuardian" )
                                                        )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "selector" )
                                                    )
                                                )
                                            )
                                        )
                                        ( BinaryExpression Equal
                                            ( IdentifierExpression
                                                ( Identifier "selector" )
                                            )
                                            ( MemberAccess
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "this" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "setGrantDelay" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "selector" )
                                                )
                                            )
                                        )
                                    )
                                    ( BinaryExpression Equal
                                        ( IdentifierExpression
                                            ( Identifier "selector" )
                                        )
                                        ( MemberAccess
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "this" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "setTargetAdminDelay" )
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "selector" )
                                            )
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ Return
                                        ( Just
                                            ( TupleExpression
                                                [ Just
                                                    ( ExpressionLiteral ( BooleanLiteral True ) )
                                                , Just
                                                    ( IdentifierExpression
                                                        ( Identifier "ADMIN_ROLE" )
                                                    )
                                                , Just
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 0.0 Nothing )
                                                    )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression Or
                                    ( BinaryExpression Or
                                        ( BinaryExpression Equal
                                            ( IdentifierExpression
                                                ( Identifier "selector" )
                                            )
                                            ( MemberAccess
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "this" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "updateAuthority" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "selector" )
                                                )
                                            )
                                        )
                                        ( BinaryExpression Equal
                                            ( IdentifierExpression
                                                ( Identifier "selector" )
                                            )
                                            ( MemberAccess
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "this" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "setTargetClosed" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "selector" )
                                                )
                                            )
                                        )
                                    )
                                    ( BinaryExpression Equal
                                        ( IdentifierExpression
                                            ( Identifier "selector" )
                                        )
                                        ( MemberAccess
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "this" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "setTargetFunctionRole" )
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "selector" )
                                            )
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ VariableStatement
                                        ( VariableDecStatement
                                            ( VariableDeclaration
                                                { kind = ElementaryType Address
                                                , location = Nothing
                                                , ident = Identifier "target"
                                                }
                                            )
                                            ( Just
                                                ( FunctionCall
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "abi" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "decode" )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ SliceExpression
                                                            ( IdentifierExpression
                                                                ( Identifier "data" )
                                                            )
                                                            ( Just
                                                                ( ExpressionLiteral
                                                                    ( NumberLiteral 4.0 Nothing )
                                                                )
                                                            )
                                                            ( Just
                                                                ( ExpressionLiteral
                                                                    ( NumberLiteral 36.0 Nothing )
                                                                )
                                                            )
                                                        , TupleExpression
                                                            [ Just
                                                                ( TypeExpression ( ElementaryType Address ) )
                                                            ]
                                                        ]
                                                    )
                                                )
                                            )
                                        )
                                    , VariableStatement
                                        ( VariableDecStatement
                                            ( VariableDeclaration
                                                { kind = ElementaryType
                                                    ( UnsignedInteger
                                                        ( Just 32 )
                                                    )
                                                , location = Nothing
                                                , ident = Identifier "delay"
                                                }
                                            )
                                            ( Just
                                                ( FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "getTargetAdminDelay" )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "target" )
                                                        ]
                                                    )
                                                )
                                            )
                                        )
                                    , Return
                                        ( Just
                                            ( TupleExpression
                                                [ Just
                                                    ( ExpressionLiteral ( BooleanLiteral True ) )
                                                , Just
                                                    ( IdentifierExpression
                                                        ( Identifier "ADMIN_ROLE" )
                                                    )
                                                , Just
                                                    ( IdentifierExpression
                                                        ( Identifier "delay" )
                                                    )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression Or
                                    ( BinaryExpression Equal
                                        ( IdentifierExpression
                                            ( Identifier "selector" )
                                        )
                                        ( MemberAccess
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "this" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "grantRole" )
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "selector" )
                                            )
                                        )
                                    )
                                    ( BinaryExpression Equal
                                        ( IdentifierExpression
                                            ( Identifier "selector" )
                                        )
                                        ( MemberAccess
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "this" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "revokeRole" )
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "selector" )
                                            )
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ VariableStatement
                                        ( VariableDecStatement
                                            ( VariableDeclaration
                                                { kind = ElementaryType
                                                    ( UnsignedInteger
                                                        ( Just 64 )
                                                    )
                                                , location = Nothing
                                                , ident = Identifier "roleId"
                                                }
                                            )
                                            ( Just
                                                ( FunctionCall
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "abi" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "decode" )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ SliceExpression
                                                            ( IdentifierExpression
                                                                ( Identifier "data" )
                                                            )
                                                            ( Just
                                                                ( ExpressionLiteral
                                                                    ( NumberLiteral 4.0 Nothing )
                                                                )
                                                            )
                                                            ( Just
                                                                ( ExpressionLiteral
                                                                    ( NumberLiteral 36.0 Nothing )
                                                                )
                                                            )
                                                        , TupleExpression
                                                            [ Just
                                                                ( TypeExpression
                                                                    ( ElementaryType
                                                                        ( UnsignedInteger
                                                                            ( Just 64 )
                                                                        )
                                                                    )
                                                                )
                                                            ]
                                                        ]
                                                    )
                                                )
                                            )
                                        )
                                    , Return
                                        ( Just
                                            ( TupleExpression
                                                [ Just
                                                    ( ExpressionLiteral ( BooleanLiteral True ) )
                                                , Just
                                                    ( FunctionCall
                                                        ( IdentifierExpression
                                                            ( Identifier "getRoleAdmin" )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "roleId" )
                                                            ]
                                                        )
                                                    )
                                                , Just
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 0.0 Nothing )
                                                    )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , Return
                            ( Just
                                ( TupleExpression
                                    [ Just
                                        ( ExpressionLiteral ( BooleanLiteral False ) )
                                    , Just
                                        ( ExpressionLiteral
                                            ( NumberLiteral 0.0 Nothing )
                                        )
                                    , Just
                                        ( ExpressionLiteral
                                            ( NumberLiteral 0.0 Nothing )
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_canCallExtended"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "caller" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ElementaryType Bytes
                            , location = Just Calldata
                            , ident = Just
                                ( Identifier "data" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability View
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Just
                                ( Identifier "immediate" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "delay" )
                            }
                        ]
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression Equal
                                    ( IdentifierExpression
                                        ( Identifier "target" )
                                    )
                                    ( FunctionCall
                                        ( TypeExpression ( ElementaryType Address ) )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "this" )
                                            ]
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ Return
                                        ( Just
                                            ( FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "_canCallSelf" )
                                                )
                                                ( CommaArguments
                                                    [ IdentifierExpression
                                                        ( Identifier "caller" )
                                                    , IdentifierExpression
                                                        ( Identifier "data" )
                                                    ]
                                                )
                                            )
                                        )
                                    ]
                                , elseStmt = Just
                                    ( BlockStatement
                                        [ Return
                                            ( Just
                                                ( ConditionalExpression
                                                    ( BinaryExpression LessThan
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "data" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "length" )
                                                            )
                                                        )
                                                        ( ExpressionLiteral
                                                            ( NumberLiteral 4.0 Nothing )
                                                        )
                                                    )
                                                    ( TupleExpression
                                                        [ Just
                                                            ( ExpressionLiteral ( BooleanLiteral False ) )
                                                        , Just
                                                            ( ExpressionLiteral
                                                                ( NumberLiteral 0.0 Nothing )
                                                            )
                                                        ]
                                                    )
                                                    ( FunctionCall
                                                        ( IdentifierExpression
                                                            ( Identifier "canCall" )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "caller" )
                                                            , IdentifierExpression
                                                                ( Identifier "target" )
                                                            , FunctionCall
                                                                ( IdentifierExpression
                                                                    ( Identifier "_checkSelector" )
                                                                )
                                                                ( CommaArguments
                                                                    [ IdentifierExpression
                                                                        ( Identifier "data" )
                                                                    ]
                                                                )
                                                            ]
                                                        )
                                                    )
                                                )
                                            )
                                        ]
                                    )
                                }
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_canCallSelf"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "caller" )
                            }
                        , Parameter
                            { kind = ElementaryType Bytes
                            , location = Just Calldata
                            , ident = Just
                                ( Identifier "data" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability View
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Just
                                ( Identifier "immediate" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "delay" )
                            }
                        ]
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression LessThan
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "data" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "length" )
                                        )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 4.0 Nothing )
                                    )
                                , trueStmt = BlockStatement
                                    [ Return
                                        ( Just
                                            ( TupleExpression
                                                [ Just
                                                    ( ExpressionLiteral ( BooleanLiteral False ) )
                                                , Just
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 0.0 Nothing )
                                                    )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression Equal
                                    ( IdentifierExpression
                                        ( Identifier "caller" )
                                    )
                                    ( FunctionCall
                                        ( TypeExpression ( ElementaryType Address ) )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "this" )
                                            ]
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ Return
                                        ( Just
                                            ( TupleExpression
                                                [ Just
                                                    ( FunctionCall
                                                        ( IdentifierExpression
                                                            ( Identifier "_isExecuting" )
                                                        )
                                                        ( CommaArguments
                                                            [ FunctionCall
                                                                ( TypeExpression ( ElementaryType Address ) )
                                                                ( CommaArguments
                                                                    [ IdentifierExpression
                                                                        ( Identifier "this" )
                                                                    ]
                                                                )
                                                            , FunctionCall
                                                                ( IdentifierExpression
                                                                    ( Identifier "_checkSelector" )
                                                                )
                                                                ( CommaArguments
                                                                    [ IdentifierExpression
                                                                        ( Identifier "data" )
                                                                    ]
                                                                )
                                                            ]
                                                        )
                                                    )
                                                , Just
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 0.0 Nothing )
                                                    )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , VariableStatement
                            ( VariableDecTupleStatement
                                [ Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType Bool
                                        , location = Nothing
                                        , ident = Identifier "enabled"
                                        }
                                    )
                                , Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType
                                            ( UnsignedInteger
                                                ( Just 64 )
                                            )
                                        , location = Nothing
                                        , ident = Identifier "roleId"
                                        }
                                    )
                                , Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType
                                            ( UnsignedInteger
                                                ( Just 32 )
                                            )
                                        , location = Nothing
                                        , ident = Identifier "operationDelay"
                                        }
                                    )
                                ]
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "_getAdminRestrictions" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "data" )
                                        ]
                                    )
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = UnaryExpression UPreNot
                                    ( IdentifierExpression
                                        ( Identifier "enabled" )
                                    )
                                , trueStmt = BlockStatement
                                    [ Return
                                        ( Just
                                            ( TupleExpression
                                                [ Just
                                                    ( ExpressionLiteral ( BooleanLiteral False ) )
                                                , Just
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 0.0 Nothing )
                                                    )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , VariableStatement
                            ( VariableDecTupleStatement
                                [ Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType Bool
                                        , location = Nothing
                                        , ident = Identifier "inRole"
                                        }
                                    )
                                , Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType
                                            ( UnsignedInteger
                                                ( Just 32 )
                                            )
                                        , location = Nothing
                                        , ident = Identifier "executionDelay"
                                        }
                                    )
                                ]
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "hasRole" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "roleId" )
                                        , IdentifierExpression
                                            ( Identifier "caller" )
                                        ]
                                    )
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = UnaryExpression UPreNot
                                    ( IdentifierExpression
                                        ( Identifier "inRole" )
                                    )
                                , trueStmt = BlockStatement
                                    [ Return
                                        ( Just
                                            ( TupleExpression
                                                [ Just
                                                    ( ExpressionLiteral ( BooleanLiteral False ) )
                                                , Just
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 0.0 Nothing )
                                                    )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( IdentifierExpression
                                    ( Identifier "delay" )
                                )
                                ( FunctionCall
                                    ( TypeExpression
                                        ( ElementaryType
                                            ( UnsignedInteger
                                                ( Just 32 )
                                            )
                                        )
                                    )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "Math" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "max" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "operationDelay" )
                                                , IdentifierExpression
                                                    ( Identifier "executionDelay" )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        , Return
                            ( Just
                                ( TupleExpression
                                    [ Just
                                        ( BinaryExpression Equal
                                            ( IdentifierExpression
                                                ( Identifier "delay" )
                                            )
                                            ( ExpressionLiteral
                                                ( NumberLiteral 0.0 Nothing )
                                            )
                                        )
                                    , Just
                                        ( IdentifierExpression
                                            ( Identifier "delay" )
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_isExecuting"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( FixedBytes 4 )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "selector" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability View
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( BinaryExpression Equal
                                    ( IdentifierExpression
                                        ( Identifier "_executionId" )
                                    )
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "_hashExecutionId" )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "target" )
                                            , IdentifierExpression
                                                ( Identifier "selector" )
                                            ]
                                        )
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_isExpired"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 48 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "timepoint" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability View
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( BinaryExpression LessEqual
                                    ( BinaryExpression Add
                                        ( IdentifierExpression
                                            ( Identifier "timepoint" )
                                        )
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "expiration" )
                                            )
                                            ( CommaArguments [] )
                                        )
                                    )
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "Time" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "timestamp" )
                                            )
                                        )
                                        ( CommaArguments [] )
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_checkSelector"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Bytes
                            , location = Just Calldata
                            , ident = Just
                                ( Identifier "data" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( FixedBytes 4 )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( FunctionCall
                                    ( TypeExpression
                                        ( ElementaryType
                                            ( FixedBytes 4 )
                                        )
                                    )
                                    ( CommaArguments
                                        [ SliceExpression
                                            ( IdentifierExpression
                                                ( Identifier "data" )
                                            )
                                            ( Just
                                                ( ExpressionLiteral
                                                    ( NumberLiteral 0.0 Nothing )
                                                )
                                            )
                                            ( Just
                                                ( ExpressionLiteral
                                                    ( NumberLiteral 4.0 Nothing )
                                                )
                                            )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_hashExecutionId"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "target" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( FixedBytes 4 )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "selector" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( FixedBytes 32 )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "keccak256" )
                                    )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "abi" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "encode" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "target" )
                                                , IdentifierExpression
                                                    ( Identifier "selector" )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            ]
        }
    )
]