[ Pragma
    ( PragmaDefinition
        { pragma = "solidity >=0.6.2 <0.9.0" }
    )
, Pragma
    ( PragmaDefinition
        { pragma = "experimental ABIEncoderV2" }
    )
, Import
    ( ImportDefinition
        ( ImportAliases
            [
                ( Identifier "StdStorage"
                , Nothing
                )
            ,
                ( Identifier "stdStorage"
                , Nothing
                )
            ] "./StdStorage.sol"
        )
    )
, Import
    ( ImportDefinition
        ( ImportAliases
            [
                ( Identifier "console2"
                , Nothing
                )
            ] "./console2.sol"
        )
    )
, Import
    ( ImportDefinition
        ( ImportAliases
            [
                ( Identifier "Vm"
                , Nothing
                )
            ] "./Vm.sol"
        )
    )
, Contract
    ( ContractDefinition
        { abstract = True
        , name = Identifier "StdCheatsSafe"
        , inheritance = Nothing
        , body =
            [ CStateVariableDec
                ( StateVariableDec
                    { kind = IdentifierType
                        ( IdentifierPath
                            [ Identifier "Vm" ]
                        )
                    , modifiers = Just
                        [ StatePrivate
                        , StateConstant
                        ]
                    , ident = Identifier "vm"
                    , expr = Just
                        ( FunctionCall
                            ( IdentifierExpression
                                ( Identifier "Vm" )
                            )
                            ( CommaArguments
                                [ FunctionCall
                                    ( TypeExpression ( ElementaryType Address ) )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( TypeExpression
                                                ( ElementaryType
                                                    ( UnsignedInteger
                                                        ( Just 160 )
                                                    )
                                                )
                                            )
                                            ( CommaArguments
                                                [ FunctionCall
                                                    ( TypeExpression
                                                        ( ElementaryType
                                                            ( UnsignedInteger
                                                                ( Just 256 )
                                                            )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( IdentifierExpression
                                                                ( Identifier "keccak256" )
                                                            )
                                                            ( CommaArguments
                                                                [ ExpressionLiteral
                                                                    ( StringLiteral "hevm cheat code" )
                                                                ]
                                                            )
                                                        ]
                                                    )
                                                ]
                                            )
                                        ]
                                    )
                                ]
                            )
                        )
                    }
                )
            , CStateVariableDec
                ( StateVariableDec
                    { kind = ElementaryType
                        ( UnsignedInteger
                            ( Just 256 )
                        )
                    , modifiers = Just
                        [ StatePrivate
                        , StateConstant
                        ]
                    , ident = Identifier "UINT256_MAX"
                    , expr = Just
                        ( ExpressionLiteral
                            ( NumberLiteral 1.157920892373162e77 Nothing )
                        )
                    }
                )
            , CStateVariableDec
                ( StateVariableDec
                    { kind = ElementaryType Bool
                    , modifiers = Just [ StatePrivate ]
                    , ident = Identifier "gasMeteringOff"
                    , expr = Nothing
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "RawTx1559"
                    , members =
                        [
                            ( ArrayType ( ElementaryType String ) [ ArrayTypeEmpty ]
                            , Identifier "arguments"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "contractAddress"
                            )
                        ,
                            ( ElementaryType String
                            , Identifier "contractName"
                            )
                        ,
                            ( ElementaryType String
                            , Identifier "functionSig"
                            )
                        ,
                            ( ElementaryType
                                ( FixedBytes 32 )
                            , Identifier "hash"
                            )
                        ,
                            ( IdentifierType
                                ( IdentifierPath
                                    [ Identifier "RawTx1559Detail" ]
                                )
                            , Identifier "txDetail"
                            )
                        ,
                            ( ElementaryType String
                            , Identifier "opcode"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "RawTx1559Detail"
                    , members =
                        [
                            ( ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "AccessList" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , Identifier "accessList"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "data"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "from"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "gas"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "nonce"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "to"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "txType"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "value"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "Tx1559"
                    , members =
                        [
                            ( ArrayType ( ElementaryType String ) [ ArrayTypeEmpty ]
                            , Identifier "arguments"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "contractAddress"
                            )
                        ,
                            ( ElementaryType String
                            , Identifier "contractName"
                            )
                        ,
                            ( ElementaryType String
                            , Identifier "functionSig"
                            )
                        ,
                            ( ElementaryType
                                ( FixedBytes 32 )
                            , Identifier "hash"
                            )
                        ,
                            ( IdentifierType
                                ( IdentifierPath
                                    [ Identifier "Tx1559Detail" ]
                                )
                            , Identifier "txDetail"
                            )
                        ,
                            ( ElementaryType String
                            , Identifier "opcode"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "Tx1559Detail"
                    , members =
                        [
                            ( ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "AccessList" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , Identifier "accessList"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "data"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "from"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "gas"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "nonce"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "to"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "txType"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "value"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "TxLegacy"
                    , members =
                        [
                            ( ArrayType ( ElementaryType String ) [ ArrayTypeEmpty ]
                            , Identifier "arguments"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "contractAddress"
                            )
                        ,
                            ( ElementaryType String
                            , Identifier "contractName"
                            )
                        ,
                            ( ElementaryType String
                            , Identifier "functionSig"
                            )
                        ,
                            ( ElementaryType String
                            , Identifier "hash"
                            )
                        ,
                            ( ElementaryType String
                            , Identifier "opcode"
                            )
                        ,
                            ( IdentifierType
                                ( IdentifierPath
                                    [ Identifier "TxDetailLegacy" ]
                                )
                            , Identifier "transaction"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "TxDetailLegacy"
                    , members =
                        [
                            ( ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "AccessList" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , Identifier "accessList"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "chainId"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "data"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "from"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "gas"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "gasPrice"
                            )
                        ,
                            ( ElementaryType
                                ( FixedBytes 32 )
                            , Identifier "hash"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "nonce"
                            )
                        ,
                            ( ElementaryType
                                ( FixedBytes 1 )
                            , Identifier "opcode"
                            )
                        ,
                            ( ElementaryType
                                ( FixedBytes 32 )
                            , Identifier "r"
                            )
                        ,
                            ( ElementaryType
                                ( FixedBytes 32 )
                            , Identifier "s"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "txType"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "to"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 8 )
                                )
                            , Identifier "v"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "value"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "AccessList"
                    , members =
                        [
                            ( ElementaryType Address
                            , Identifier "accessAddress"
                            )
                        ,
                            ( ArrayType
                                ( ElementaryType
                                    ( FixedBytes 32 )
                                ) [ ArrayTypeEmpty ]
                            , Identifier "storageKeys"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "RawReceipt"
                    , members =
                        [
                            ( ElementaryType
                                ( FixedBytes 32 )
                            , Identifier "blockHash"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "blockNumber"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "contractAddress"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "cumulativeGasUsed"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "effectiveGasPrice"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "from"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "gasUsed"
                            )
                        ,
                            ( ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "RawReceiptLog" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , Identifier "logs"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "logsBloom"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "status"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "to"
                            )
                        ,
                            ( ElementaryType
                                ( FixedBytes 32 )
                            , Identifier "transactionHash"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "transactionIndex"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "Receipt"
                    , members =
                        [
                            ( ElementaryType
                                ( FixedBytes 32 )
                            , Identifier "blockHash"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "blockNumber"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "contractAddress"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "cumulativeGasUsed"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "effectiveGasPrice"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "from"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "gasUsed"
                            )
                        ,
                            ( ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "ReceiptLog" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , Identifier "logs"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "logsBloom"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "status"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "to"
                            )
                        ,
                            ( ElementaryType
                                ( FixedBytes 32 )
                            , Identifier "transactionHash"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "transactionIndex"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "EIP1559ScriptArtifact"
                    , members =
                        [
                            ( ArrayType ( ElementaryType String ) [ ArrayTypeEmpty ]
                            , Identifier "libraries"
                            )
                        ,
                            ( ElementaryType String
                            , Identifier "path"
                            )
                        ,
                            ( ArrayType ( ElementaryType String ) [ ArrayTypeEmpty ]
                            , Identifier "pending"
                            )
                        ,
                            ( ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "Receipt" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , Identifier "receipts"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "timestamp"
                            )
                        ,
                            ( ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "Tx1559" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , Identifier "transactions"
                            )
                        ,
                            ( ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "TxReturn" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , Identifier "txReturns"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "RawEIP1559ScriptArtifact"
                    , members =
                        [
                            ( ArrayType ( ElementaryType String ) [ ArrayTypeEmpty ]
                            , Identifier "libraries"
                            )
                        ,
                            ( ElementaryType String
                            , Identifier "path"
                            )
                        ,
                            ( ArrayType ( ElementaryType String ) [ ArrayTypeEmpty ]
                            , Identifier "pending"
                            )
                        ,
                            ( ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "RawReceipt" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , Identifier "receipts"
                            )
                        ,
                            ( ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "TxReturn" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , Identifier "txReturns"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "timestamp"
                            )
                        ,
                            ( ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "RawTx1559" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , Identifier "transactions"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "RawReceiptLog"
                    , members =
                        [
                            ( ElementaryType Address
                            , Identifier "logAddress"
                            )
                        ,
                            ( ElementaryType
                                ( FixedBytes 32 )
                            , Identifier "blockHash"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "blockNumber"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "data"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "logIndex"
                            )
                        ,
                            ( ElementaryType Bool
                            , Identifier "removed"
                            )
                        ,
                            ( ArrayType
                                ( ElementaryType
                                    ( FixedBytes 32 )
                                ) [ ArrayTypeEmpty ]
                            , Identifier "topics"
                            )
                        ,
                            ( ElementaryType
                                ( FixedBytes 32 )
                            , Identifier "transactionHash"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "transactionIndex"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "transactionLogIndex"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "ReceiptLog"
                    , members =
                        [
                            ( ElementaryType Address
                            , Identifier "logAddress"
                            )
                        ,
                            ( ElementaryType
                                ( FixedBytes 32 )
                            , Identifier "blockHash"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "blockNumber"
                            )
                        ,
                            ( ElementaryType Bytes
                            , Identifier "data"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "logIndex"
                            )
                        ,
                            ( ArrayType
                                ( ElementaryType
                                    ( FixedBytes 32 )
                                ) [ ArrayTypeEmpty ]
                            , Identifier "topics"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "transactionIndex"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "transactionLogIndex"
                            )
                        ,
                            ( ElementaryType Bool
                            , Identifier "removed"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "TxReturn"
                    , members =
                        [
                            ( ElementaryType String
                            , Identifier "internalType"
                            )
                        ,
                            ( ElementaryType String
                            , Identifier "value"
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "Account"
                    , members =
                        [
                            ( ElementaryType Address
                            , Identifier "addr"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "key"
                            )
                        ]
                    }
                )
            , CEnum
                ( EnumDefinition
                    { ident = Identifier "AddressType"
                    , members =
                        [ Identifier "Payable"
                        , Identifier "NonPayable"
                        , Identifier "ZeroAddress"
                        , Identifier "Precompile"
                        , Identifier "ForgeAddress"
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "assumeNotBlacklisted"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "token" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 256 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "tokenCodeSize"
                                    }
                                ) Nothing
                            )
                        , Assembly
                            ( AssemblyStatement
                                { dialect = Nothing
                                , flags = []
                                , body =
                                    [ YulAssignment
                                        ( YulAssignmentDeclaration
                                            ( YulIdentifierPath
                                                [ YulIdentifier
                                                    ( Identifier "tokenCodeSize" )
                                                ]
                                            )
                                            ( YulExpressionFunctionCall
                                                ( YulFunctionCallDeclaration
                                                    { ident = YulEvmBuiltin
                                                        ( Identifier "extcodesize" )
                                                    , body =
                                                        [ YulExpressionPath
                                                            ( YulIdentifierPath
                                                                [ YulIdentifier
                                                                    ( Identifier "token" )
                                                                ]
                                                            )
                                                        ]
                                                    }
                                                )
                                            )
                                        )
                                    ]
                                }
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "require" )
                                )
                                ( CommaArguments
                                    [ BinaryExpression GreaterThan
                                        ( IdentifierExpression
                                            ( Identifier "tokenCodeSize" )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 0.0 Nothing )
                                        )
                                    , ExpressionLiteral
                                        ( StringLiteral "StdCheats assumeNotBlacklisted(address,address): Token address is not a contract." )
                                    ]
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bool
                                    , location = Nothing
                                    , ident = Identifier "success"
                                    }
                                ) Nothing
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bytes
                                    , location = Just Memory
                                    , ident = Identifier "returnData"
                                    }
                                ) Nothing
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( TupleExpression
                                    [ Just
                                        ( IdentifierExpression
                                            ( Identifier "success" )
                                        )
                                    , Just
                                        ( IdentifierExpression
                                            ( Identifier "returnData" )
                                        )
                                    ]
                                )
                                ( FunctionCall
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "token" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "staticcall" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "abi" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "encodeWithSelector" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( NumberLiteral 4.267137671e9 Nothing )
                                                , IdentifierExpression
                                                    ( Identifier "addr" )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "assume" )
                                    )
                                )
                                ( CommaArguments
                                    [ BinaryExpression Or
                                        ( UnaryExpression UPreNot
                                            ( IdentifierExpression
                                                ( Identifier "success" )
                                            )
                                        )
                                        ( BinaryExpression Equal
                                            ( FunctionCall
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "abi" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "decode" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ IdentifierExpression
                                                        ( Identifier "returnData" )
                                                    , TupleExpression
                                                        [ Just
                                                            ( TypeExpression ( ElementaryType Bool ) )
                                                        ]
                                                    ]
                                                )
                                            )
                                            ( ExpressionLiteral ( BooleanLiteral False ) )
                                        )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( TupleExpression
                                    [ Just
                                        ( IdentifierExpression
                                            ( Identifier "success" )
                                        )
                                    , Just
                                        ( IdentifierExpression
                                            ( Identifier "returnData" )
                                        )
                                    ]
                                )
                                ( FunctionCall
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "token" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "staticcall" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "abi" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "encodeWithSelector" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( NumberLiteral 3.83342192e9 Nothing )
                                                , IdentifierExpression
                                                    ( Identifier "addr" )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "assume" )
                                    )
                                )
                                ( CommaArguments
                                    [ BinaryExpression Or
                                        ( UnaryExpression UPreNot
                                            ( IdentifierExpression
                                                ( Identifier "success" )
                                            )
                                        )
                                        ( BinaryExpression Equal
                                            ( FunctionCall
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "abi" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "decode" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ IdentifierExpression
                                                        ( Identifier "returnData" )
                                                    , TupleExpression
                                                        [ Just
                                                            ( TypeExpression ( ElementaryType Bool ) )
                                                        ]
                                                    ]
                                                )
                                            )
                                            ( ExpressionLiteral ( BooleanLiteral False ) )
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "assumeNoBlacklisted"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "token" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "assumeNotBlacklisted" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "token" )
                                    , IdentifierExpression
                                        ( Identifier "addr" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "assumeAddressIsNot"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        , Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "AddressType" ]
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addressType" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression Equal
                                    ( IdentifierExpression
                                        ( Identifier "addressType" )
                                    )
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "AddressType" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "Payable" )
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ ExpressionStatement
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "assumeNotPayable" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "addr" )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Just
                                    ( If
                                        ( IfStatement
                                            { expr = BinaryExpression Equal
                                                ( IdentifierExpression
                                                    ( Identifier "addressType" )
                                                )
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "AddressType" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "NonPayable" )
                                                    )
                                                )
                                            , trueStmt = BlockStatement
                                                [ ExpressionStatement
                                                    ( FunctionCall
                                                        ( IdentifierExpression
                                                            ( Identifier "assumePayable" )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "addr" )
                                                            ]
                                                        )
                                                    )
                                                ]
                                            , elseStmt = Just
                                                ( If
                                                    ( IfStatement
                                                        { expr = BinaryExpression Equal
                                                            ( IdentifierExpression
                                                                ( Identifier "addressType" )
                                                            )
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "AddressType" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "ZeroAddress" )
                                                                )
                                                            )
                                                        , trueStmt = BlockStatement
                                                            [ ExpressionStatement
                                                                ( FunctionCall
                                                                    ( IdentifierExpression
                                                                        ( Identifier "assumeNotZeroAddress" )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ IdentifierExpression
                                                                            ( Identifier "addr" )
                                                                        ]
                                                                    )
                                                                )
                                                            ]
                                                        , elseStmt = Just
                                                            ( If
                                                                ( IfStatement
                                                                    { expr = BinaryExpression Equal
                                                                        ( IdentifierExpression
                                                                            ( Identifier "addressType" )
                                                                        )
                                                                        ( MemberAccess
                                                                            ( IdentifierExpression
                                                                                ( Identifier "AddressType" )
                                                                            )
                                                                            ( MemberAccessIdentifier
                                                                                ( Identifier "Precompile" )
                                                                            )
                                                                        )
                                                                    , trueStmt = BlockStatement
                                                                        [ ExpressionStatement
                                                                            ( FunctionCall
                                                                                ( IdentifierExpression
                                                                                    ( Identifier "assumeNotPrecompile" )
                                                                                )
                                                                                ( CommaArguments
                                                                                    [ IdentifierExpression
                                                                                        ( Identifier "addr" )
                                                                                    ]
                                                                                )
                                                                            )
                                                                        ]
                                                                    , elseStmt = Just
                                                                        ( If
                                                                            ( IfStatement
                                                                                { expr = BinaryExpression Equal
                                                                                    ( IdentifierExpression
                                                                                        ( Identifier "addressType" )
                                                                                    )
                                                                                    ( MemberAccess
                                                                                        ( IdentifierExpression
                                                                                            ( Identifier "AddressType" )
                                                                                        )
                                                                                        ( MemberAccessIdentifier
                                                                                            ( Identifier "ForgeAddress" )
                                                                                        )
                                                                                    )
                                                                                , trueStmt = BlockStatement
                                                                                    [ ExpressionStatement
                                                                                        ( FunctionCall
                                                                                            ( IdentifierExpression
                                                                                                ( Identifier "assumeNotForgeAddress" )
                                                                                            )
                                                                                            ( CommaArguments
                                                                                                [ IdentifierExpression
                                                                                                    ( Identifier "addr" )
                                                                                                ]
                                                                                            )
                                                                                        )
                                                                                    ]
                                                                                , elseStmt = Nothing
                                                                                }
                                                                            )
                                                                        )
                                                                    }
                                                                )
                                                            )
                                                        }
                                                    )
                                                )
                                            }
                                        )
                                    )
                                }
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "assumeAddressIsNot"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        , Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "AddressType" ]
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addressType1" )
                            }
                        , Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "AddressType" ]
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addressType2" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "assumeAddressIsNot" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "addr" )
                                    , IdentifierExpression
                                        ( Identifier "addressType1" )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "assumeAddressIsNot" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "addr" )
                                    , IdentifierExpression
                                        ( Identifier "addressType2" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "assumeAddressIsNot"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        , Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "AddressType" ]
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addressType1" )
                            }
                        , Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "AddressType" ]
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addressType2" )
                            }
                        , Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "AddressType" ]
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addressType3" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "assumeAddressIsNot" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "addr" )
                                    , IdentifierExpression
                                        ( Identifier "addressType1" )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "assumeAddressIsNot" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "addr" )
                                    , IdentifierExpression
                                        ( Identifier "addressType2" )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "assumeAddressIsNot" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "addr" )
                                    , IdentifierExpression
                                        ( Identifier "addressType3" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "assumeAddressIsNot"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        , Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "AddressType" ]
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addressType1" )
                            }
                        , Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "AddressType" ]
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addressType2" )
                            }
                        , Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "AddressType" ]
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addressType3" )
                            }
                        , Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "AddressType" ]
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addressType4" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "assumeAddressIsNot" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "addr" )
                                    , IdentifierExpression
                                        ( Identifier "addressType1" )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "assumeAddressIsNot" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "addr" )
                                    , IdentifierExpression
                                        ( Identifier "addressType2" )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "assumeAddressIsNot" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "addr" )
                                    , IdentifierExpression
                                        ( Identifier "addressType3" )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "assumeAddressIsNot" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "addr" )
                                    , IdentifierExpression
                                        ( Identifier "addressType4" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_isPayable"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        ]
                    , restrictions = [ FuncVisibility FuncPrivate ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "require" )
                                )
                                ( CommaArguments
                                    [ BinaryExpression LessThan
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "addr" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "balance" )
                                            )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "UINT256_MAX" )
                                        )
                                    , ExpressionLiteral
                                        ( StringLiteral "StdCheats _isPayable(address): Balance equals max uint256, so it cannot receive any more funds" )
                                    ]
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 256 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "origBalanceTest"
                                    }
                                )
                                ( Just
                                    ( MemberAccess
                                        ( FunctionCall
                                            ( TypeExpression ( ElementaryType Address ) )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "this" )
                                                ]
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "balance" )
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 256 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "origBalanceAddr"
                                    }
                                )
                                ( Just
                                    ( MemberAccess
                                        ( FunctionCall
                                            ( TypeExpression ( ElementaryType Address ) )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "addr" )
                                                ]
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "balance" )
                                        )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "deal" )
                                    )
                                )
                                ( CommaArguments
                                    [ FunctionCall
                                        ( TypeExpression ( ElementaryType Address ) )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "this" )
                                            ]
                                        )
                                    , ExpressionLiteral
                                        ( NumberLiteral 1.0 Nothing )
                                    ]
                                )
                            )
                        , VariableStatement
                            ( VariableDecTupleStatement
                                [ Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType Bool
                                        , location = Nothing
                                        , ident = Identifier "success"
                                        }
                                    )
                                , Nothing
                                ]
                                ( FunctionCall
                                    ( FunctionCallOptions
                                        ( MemberAccess
                                            ( PayableConversion
                                                ( CommaArguments
                                                    [ IdentifierExpression
                                                        ( Identifier "addr" )
                                                    ]
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "call" )
                                            )
                                        )
                                        ( NamedArguments
                                            [
                                                ( Identifier "value"
                                                , ExpressionLiteral
                                                    ( NumberLiteral 1.0 Nothing )
                                                )
                                            ]
                                        )
                                    )
                                    ( CommaArguments
                                        [ ExpressionLiteral
                                            ( StringLiteral "" )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "deal" )
                                    )
                                )
                                ( CommaArguments
                                    [ FunctionCall
                                        ( TypeExpression ( ElementaryType Address ) )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "this" )
                                            ]
                                        )
                                    , IdentifierExpression
                                        ( Identifier "origBalanceTest" )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "deal" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "addr" )
                                    , IdentifierExpression
                                        ( Identifier "origBalanceAddr" )
                                    ]
                                )
                            )
                        , Return
                            ( Just
                                ( IdentifierExpression
                                    ( Identifier "success" )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "assumePayable"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "assume" )
                                    )
                                )
                                ( CommaArguments
                                    [ FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "_isPayable" )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "addr" )
                                            ]
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "assumeNotPayable"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "assume" )
                                    )
                                )
                                ( CommaArguments
                                    [ UnaryExpression UPreNot
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "_isPayable" )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "addr" )
                                                ]
                                            )
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "assumeNotZeroAddress"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "assume" )
                                    )
                                )
                                ( CommaArguments
                                    [ BinaryExpression NotEqual
                                        ( IdentifierExpression
                                            ( Identifier "addr" )
                                        )
                                        ( FunctionCall
                                            ( TypeExpression ( ElementaryType Address ) )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( NumberLiteral 0.0 Nothing )
                                                ]
                                            )
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "assumeNotPrecompile"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "assumeNotPrecompile" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "addr" )
                                    , FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "_pureChainId" )
                                        )
                                        ( CommaArguments [] )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "assumeNotPrecompile"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "chainId" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "assume" )
                                    )
                                )
                                ( CommaArguments
                                    [ BinaryExpression Or
                                        ( BinaryExpression LessThan
                                            ( IdentifierExpression
                                                ( Identifier "addr" )
                                            )
                                            ( FunctionCall
                                                ( TypeExpression ( ElementaryType Address ) )
                                                ( CommaArguments
                                                    [ ExpressionLiteral
                                                        ( NumberLiteral 1.0 Nothing )
                                                    ]
                                                )
                                            )
                                        )
                                        ( BinaryExpression GreaterThan
                                            ( IdentifierExpression
                                                ( Identifier "addr" )
                                            )
                                            ( FunctionCall
                                                ( TypeExpression ( ElementaryType Address ) )
                                                ( CommaArguments
                                                    [ ExpressionLiteral
                                                        ( NumberLiteral 9.0 Nothing )
                                                    ]
                                                )
                                            )
                                        )
                                    ]
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression Or
                                    ( BinaryExpression Equal
                                        ( IdentifierExpression
                                            ( Identifier "chainId" )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 10.0 Nothing )
                                        )
                                    )
                                    ( BinaryExpression Equal
                                        ( IdentifierExpression
                                            ( Identifier "chainId" )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 420.0 Nothing )
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ ExpressionStatement
                                        ( FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "vm" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "assume" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ BinaryExpression Or
                                                    ( BinaryExpression LessThan
                                                        ( IdentifierExpression
                                                            ( Identifier "addr" )
                                                        )
                                                        ( FunctionCall
                                                            ( TypeExpression ( ElementaryType Address ) )
                                                            ( CommaArguments
                                                                [ ExpressionLiteral
                                                                    ( NumberLiteral 3.767933908743734e47 Nothing )
                                                                ]
                                                            )
                                                        )
                                                    )
                                                    ( BinaryExpression GreaterThan
                                                        ( IdentifierExpression
                                                            ( Identifier "addr" )
                                                        )
                                                        ( FunctionCall
                                                            ( TypeExpression ( ElementaryType Address ) )
                                                            ( CommaArguments
                                                                [ ExpressionLiteral
                                                                    ( NumberLiteral 3.767933908743734e47 Nothing )
                                                                ]
                                                            )
                                                        )
                                                    )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Just
                                    ( If
                                        ( IfStatement
                                            { expr = BinaryExpression Or
                                                ( BinaryExpression Equal
                                                    ( IdentifierExpression
                                                        ( Identifier "chainId" )
                                                    )
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 42161.0 Nothing )
                                                    )
                                                )
                                                ( BinaryExpression Equal
                                                    ( IdentifierExpression
                                                        ( Identifier "chainId" )
                                                    )
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 421613.0 Nothing )
                                                    )
                                                )
                                            , trueStmt = BlockStatement
                                                [ ExpressionStatement
                                                    ( FunctionCall
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "vm" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "assume" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ BinaryExpression Or
                                                                ( BinaryExpression LessThan
                                                                    ( IdentifierExpression
                                                                        ( Identifier "addr" )
                                                                    )
                                                                    ( FunctionCall
                                                                        ( TypeExpression ( ElementaryType Address ) )
                                                                        ( CommaArguments
                                                                            [ ExpressionLiteral
                                                                                ( NumberLiteral 100.0 Nothing )
                                                                            ]
                                                                        )
                                                                    )
                                                                )
                                                                ( BinaryExpression GreaterThan
                                                                    ( IdentifierExpression
                                                                        ( Identifier "addr" )
                                                                    )
                                                                    ( FunctionCall
                                                                        ( TypeExpression ( ElementaryType Address ) )
                                                                        ( CommaArguments
                                                                            [ ExpressionLiteral
                                                                                ( NumberLiteral 104.0 Nothing )
                                                                            ]
                                                                        )
                                                                    )
                                                                )
                                                            ]
                                                        )
                                                    )
                                                ]
                                            , elseStmt = Just
                                                ( If
                                                    ( IfStatement
                                                        { expr = BinaryExpression Or
                                                            ( BinaryExpression Equal
                                                                ( IdentifierExpression
                                                                    ( Identifier "chainId" )
                                                                )
                                                                ( ExpressionLiteral
                                                                    ( NumberLiteral 43114.0 Nothing )
                                                                )
                                                            )
                                                            ( BinaryExpression Equal
                                                                ( IdentifierExpression
                                                                    ( Identifier "chainId" )
                                                                )
                                                                ( ExpressionLiteral
                                                                    ( NumberLiteral 43113.0 Nothing )
                                                                )
                                                            )
                                                        , trueStmt = BlockStatement
                                                            [ ExpressionStatement
                                                                ( FunctionCall
                                                                    ( MemberAccess
                                                                        ( IdentifierExpression
                                                                            ( Identifier "vm" )
                                                                        )
                                                                        ( MemberAccessIdentifier
                                                                            ( Identifier "assume" )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ BinaryExpression Or
                                                                            ( BinaryExpression LessThan
                                                                                ( IdentifierExpression
                                                                                    ( Identifier "addr" )
                                                                                )
                                                                                ( FunctionCall
                                                                                    ( TypeExpression ( ElementaryType Address ) )
                                                                                    ( CommaArguments
                                                                                        [ ExpressionLiteral
                                                                                            ( NumberLiteral 5.70899077082384e45 Nothing )
                                                                                        ]
                                                                                    )
                                                                                )
                                                                            )
                                                                            ( BinaryExpression GreaterThan
                                                                                ( IdentifierExpression
                                                                                    ( Identifier "addr" )
                                                                                )
                                                                                ( FunctionCall
                                                                                    ( TypeExpression ( ElementaryType Address ) )
                                                                                    ( CommaArguments
                                                                                        [ ExpressionLiteral
                                                                                            ( NumberLiteral 5.70899077082384e45 Nothing )
                                                                                        ]
                                                                                    )
                                                                                )
                                                                            )
                                                                        ]
                                                                    )
                                                                )
                                                            , ExpressionStatement
                                                                ( FunctionCall
                                                                    ( MemberAccess
                                                                        ( IdentifierExpression
                                                                            ( Identifier "vm" )
                                                                        )
                                                                        ( MemberAccessIdentifier
                                                                            ( Identifier "assume" )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ BinaryExpression Or
                                                                            ( BinaryExpression LessThan
                                                                                ( IdentifierExpression
                                                                                    ( Identifier "addr" )
                                                                                )
                                                                                ( FunctionCall
                                                                                    ( TypeExpression ( ElementaryType Address ) )
                                                                                    ( CommaArguments
                                                                                        [ ExpressionLiteral
                                                                                            ( NumberLiteral 1.141798154164768e46 Nothing )
                                                                                        ]
                                                                                    )
                                                                                )
                                                                            )
                                                                            ( BinaryExpression GreaterThan
                                                                                ( IdentifierExpression
                                                                                    ( Identifier "addr" )
                                                                                )
                                                                                ( FunctionCall
                                                                                    ( TypeExpression ( ElementaryType Address ) )
                                                                                    ( CommaArguments
                                                                                        [ ExpressionLiteral
                                                                                            ( NumberLiteral 1.141798154164768e46 Nothing )
                                                                                        ]
                                                                                    )
                                                                                )
                                                                            )
                                                                        ]
                                                                    )
                                                                )
                                                            , ExpressionStatement
                                                                ( FunctionCall
                                                                    ( MemberAccess
                                                                        ( IdentifierExpression
                                                                            ( Identifier "vm" )
                                                                        )
                                                                        ( MemberAccessIdentifier
                                                                            ( Identifier "assume" )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ BinaryExpression Or
                                                                            ( BinaryExpression LessThan
                                                                                ( IdentifierExpression
                                                                                    ( Identifier "addr" )
                                                                                )
                                                                                ( FunctionCall
                                                                                    ( TypeExpression ( ElementaryType Address ) )
                                                                                    ( CommaArguments
                                                                                        [ ExpressionLiteral
                                                                                            ( NumberLiteral 1.7126972312471519e46 Nothing )
                                                                                        ]
                                                                                    )
                                                                                )
                                                                            )
                                                                            ( BinaryExpression GreaterThan
                                                                                ( IdentifierExpression
                                                                                    ( Identifier "addr" )
                                                                                )
                                                                                ( FunctionCall
                                                                                    ( TypeExpression ( ElementaryType Address ) )
                                                                                    ( CommaArguments
                                                                                        [ ExpressionLiteral
                                                                                            ( NumberLiteral 1.7126972312471519e46 Nothing )
                                                                                        ]
                                                                                    )
                                                                                )
                                                                            )
                                                                        ]
                                                                    )
                                                                )
                                                            ]
                                                        , elseStmt = Nothing
                                                        }
                                                    )
                                                )
                                            }
                                        )
                                    )
                                }
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "assumeNotForgeAddress"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "assume" )
                                    )
                                )
                                ( CommaArguments
                                    [ BinaryExpression And
                                        ( BinaryExpression And
                                            ( BinaryExpression NotEqual
                                                ( IdentifierExpression
                                                    ( Identifier "addr" )
                                                )
                                                ( FunctionCall
                                                    ( TypeExpression ( ElementaryType Address ) )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "vm" )
                                                        ]
                                                    )
                                                )
                                            )
                                            ( BinaryExpression NotEqual
                                                ( IdentifierExpression
                                                    ( Identifier "addr" )
                                                )
                                                ( ExpressionLiteral
                                                    ( NumberLiteral 1.2020987628128114e26 Nothing )
                                                )
                                            )
                                        )
                                        ( BinaryExpression NotEqual
                                            ( IdentifierExpression
                                                ( Identifier "addr" )
                                            )
                                            ( ExpressionLiteral
                                                ( NumberLiteral 4.473017512540339e47 Nothing )
                                            )
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "readEIP1559ScriptArtifact"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "path" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "EIP1559ScriptArtifact" ]
                                )
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType String
                                    , location = Just Memory
                                    , ident = Identifier "data"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "vm" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "readFile" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "path" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bytes
                                    , location = Just Memory
                                    , ident = Identifier "parsedData"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "vm" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "parseJson" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "data" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = IdentifierType
                                        ( IdentifierPath
                                            [ Identifier "RawEIP1559ScriptArtifact" ]
                                        )
                                    , location = Just Memory
                                    , ident = Identifier "rawArtifact"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "abi" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "decode" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "parsedData" )
                                            , TupleExpression
                                                [ Just
                                                    ( IdentifierExpression
                                                        ( Identifier "RawEIP1559ScriptArtifact" )
                                                    )
                                                ]
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = IdentifierType
                                        ( IdentifierPath
                                            [ Identifier "EIP1559ScriptArtifact" ]
                                        )
                                    , location = Just Memory
                                    , ident = Identifier "artifact"
                                    }
                                ) Nothing
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "artifact" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "libraries" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawArtifact" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "libraries" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "artifact" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "path" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawArtifact" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "path" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "artifact" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "timestamp" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawArtifact" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "timestamp" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "artifact" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "pending" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawArtifact" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "pending" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "artifact" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "txReturns" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawArtifact" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "txReturns" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "artifact" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "receipts" )
                                    )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "rawToConvertedReceipts" )
                                    )
                                    ( CommaArguments
                                        [ MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawArtifact" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "receipts" )
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "artifact" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "transactions" )
                                    )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "rawToConvertedEIPTx1559s" )
                                    )
                                    ( CommaArguments
                                        [ MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawArtifact" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "transactions" )
                                            )
                                        ]
                                    )
                                )
                            )
                        , Return
                            ( Just
                                ( IdentifierExpression
                                    ( Identifier "artifact" )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "rawToConvertedEIPTx1559s"
                    , params =
                        [ Parameter
                            { kind = ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "RawTx1559" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "rawTxs" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "Tx1559" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ArrayType
                                        ( IdentifierType
                                            ( IdentifierPath
                                                [ Identifier "Tx1559" ]
                                            )
                                        ) [ ArrayTypeEmpty ]
                                    , location = Just Memory
                                    , ident = Identifier "txs"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( NewType
                                            ( ArrayType
                                                ( IdentifierType
                                                    ( IdentifierPath
                                                        [ Identifier "Tx1559" ]
                                                    )
                                                ) [ ArrayTypeEmpty ]
                                            )
                                        )
                                        ( CommaArguments
                                            [ MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "rawTxs" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "length" )
                                                )
                                            ]
                                        )
                                    )
                                )
                            )
                        , For
                            ( ForStatement
                                { initializer = ForInitializerVariable
                                    ( VariableDecStatement
                                        ( VariableDeclaration
                                            { kind = ElementaryType
                                                ( UnsignedInteger
                                                    ( Just 256 )
                                                )
                                            , location = Nothing
                                            , ident = Identifier "i"
                                            }
                                        ) Nothing
                                    )
                                , condition = Just
                                    ( BinaryExpression LessThan
                                        ( IdentifierExpression
                                            ( Identifier "i" )
                                        )
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawTxs" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "length" )
                                            )
                                        )
                                    )
                                , increment = Just
                                    ( UnaryExpression UPostInc
                                        ( IdentifierExpression
                                            ( Identifier "i" )
                                        )
                                    )
                                , body = BlockStatement
                                    [ ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IndexExpression
                                                ( IdentifierExpression
                                                    ( Identifier "txs" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "i" )
                                                )
                                            )
                                            ( FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "rawToConvertedEIPTx1559" )
                                                )
                                                ( CommaArguments
                                                    [ IndexExpression
                                                        ( IdentifierExpression
                                                            ( Identifier "rawTxs" )
                                                        )
                                                        ( IdentifierExpression
                                                            ( Identifier "i" )
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    ]
                                }
                            )
                        , Return
                            ( Just
                                ( IdentifierExpression
                                    ( Identifier "txs" )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "rawToConvertedEIPTx1559"
                    , params =
                        [ Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "RawTx1559" ]
                                )
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "rawTx" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "Tx1559" ]
                                )
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = IdentifierType
                                        ( IdentifierPath
                                            [ Identifier "Tx1559" ]
                                        )
                                    , location = Just Memory
                                    , ident = Identifier "transaction"
                                    }
                                ) Nothing
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "transaction" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "arguments" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawTx" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "arguments" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "transaction" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "contractName" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawTx" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "contractName" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "transaction" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "functionSig" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawTx" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "functionSig" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "transaction" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "hash" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawTx" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "hash" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "transaction" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "txDetail" )
                                    )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "rawToConvertedEIP1559Detail" )
                                    )
                                    ( CommaArguments
                                        [ MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawTx" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "txDetail" )
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "transaction" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "opcode" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawTx" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "opcode" )
                                    )
                                )
                            )
                        , Return
                            ( Just
                                ( IdentifierExpression
                                    ( Identifier "transaction" )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "rawToConvertedEIP1559Detail"
                    , params =
                        [ Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "RawTx1559Detail" ]
                                )
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "rawDetail" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "Tx1559Detail" ]
                                )
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = IdentifierType
                                        ( IdentifierPath
                                            [ Identifier "Tx1559Detail" ]
                                        )
                                    , location = Just Memory
                                    , ident = Identifier "txDetail"
                                    }
                                ) Nothing
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "txDetail" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "data" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawDetail" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "data" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "txDetail" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "from" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawDetail" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "from" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "txDetail" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "to" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawDetail" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "to" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "txDetail" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "nonce" )
                                    )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "_bytesToUint" )
                                    )
                                    ( CommaArguments
                                        [ MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawDetail" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "nonce" )
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "txDetail" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "txType" )
                                    )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "_bytesToUint" )
                                    )
                                    ( CommaArguments
                                        [ MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawDetail" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "txType" )
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "txDetail" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "value" )
                                    )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "_bytesToUint" )
                                    )
                                    ( CommaArguments
                                        [ MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawDetail" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "value" )
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "txDetail" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "gas" )
                                    )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "_bytesToUint" )
                                    )
                                    ( CommaArguments
                                        [ MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawDetail" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "gas" )
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "txDetail" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "accessList" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawDetail" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "accessList" )
                                    )
                                )
                            )
                        , Return
                            ( Just
                                ( IdentifierExpression
                                    ( Identifier "txDetail" )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "readTx1559s"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "path" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "Tx1559" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType String
                                    , location = Just Memory
                                    , ident = Identifier "deployData"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "vm" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "readFile" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "path" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bytes
                                    , location = Just Memory
                                    , ident = Identifier "parsedDeployData"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "vm" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "parseJson" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "deployData" )
                                            , ExpressionLiteral
                                                ( StringLiteral ".transactions" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ArrayType
                                        ( IdentifierType
                                            ( IdentifierPath
                                                [ Identifier "RawTx1559" ]
                                            )
                                        ) [ ArrayTypeEmpty ]
                                    , location = Just Memory
                                    , ident = Identifier "rawTxs"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "abi" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "decode" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "parsedDeployData" )
                                            , TupleExpression
                                                [ Just
                                                    ( TypeExpression
                                                        ( ArrayType
                                                            ( IdentifierType
                                                                ( IdentifierPath
                                                                    [ Identifier "RawTx1559" ]
                                                                )
                                                            ) [ ArrayTypeEmpty ]
                                                        )
                                                    )
                                                ]
                                            ]
                                        )
                                    )
                                )
                            )
                        , Return
                            ( Just
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "rawToConvertedEIPTx1559s" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "rawTxs" )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "readTx1559"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "path" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "index" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "Tx1559" ]
                                )
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType String
                                    , location = Just Memory
                                    , ident = Identifier "deployData"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "vm" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "readFile" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "path" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType String
                                    , location = Just Memory
                                    , ident = Identifier "key"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( TypeExpression ( ElementaryType String ) )
                                        ( CommaArguments
                                            [ FunctionCall
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "abi" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "encodePacked" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ ExpressionLiteral
                                                        ( StringLiteral ".transactions[" )
                                                    , FunctionCall
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "vm" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "toString" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "index" )
                                                            ]
                                                        )
                                                    , ExpressionLiteral
                                                        ( StringLiteral "]" )
                                                    ]
                                                )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bytes
                                    , location = Just Memory
                                    , ident = Identifier "parsedDeployData"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "vm" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "parseJson" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "deployData" )
                                            , IdentifierExpression
                                                ( Identifier "key" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = IdentifierType
                                        ( IdentifierPath
                                            [ Identifier "RawTx1559" ]
                                        )
                                    , location = Just Memory
                                    , ident = Identifier "rawTx"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "abi" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "decode" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "parsedDeployData" )
                                            , TupleExpression
                                                [ Just
                                                    ( IdentifierExpression
                                                        ( Identifier "RawTx1559" )
                                                    )
                                                ]
                                            ]
                                        )
                                    )
                                )
                            )
                        , Return
                            ( Just
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "rawToConvertedEIPTx1559" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "rawTx" )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "readReceipts"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "path" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "Receipt" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType String
                                    , location = Just Memory
                                    , ident = Identifier "deployData"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "vm" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "readFile" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "path" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bytes
                                    , location = Just Memory
                                    , ident = Identifier "parsedDeployData"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "vm" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "parseJson" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "deployData" )
                                            , ExpressionLiteral
                                                ( StringLiteral ".receipts" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ArrayType
                                        ( IdentifierType
                                            ( IdentifierPath
                                                [ Identifier "RawReceipt" ]
                                            )
                                        ) [ ArrayTypeEmpty ]
                                    , location = Just Memory
                                    , ident = Identifier "rawReceipts"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "abi" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "decode" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "parsedDeployData" )
                                            , TupleExpression
                                                [ Just
                                                    ( TypeExpression
                                                        ( ArrayType
                                                            ( IdentifierType
                                                                ( IdentifierPath
                                                                    [ Identifier "RawReceipt" ]
                                                                )
                                                            ) [ ArrayTypeEmpty ]
                                                        )
                                                    )
                                                ]
                                            ]
                                        )
                                    )
                                )
                            )
                        , Return
                            ( Just
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "rawToConvertedReceipts" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "rawReceipts" )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "readReceipt"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "path" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "index" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "Receipt" ]
                                )
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType String
                                    , location = Just Memory
                                    , ident = Identifier "deployData"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "vm" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "readFile" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "path" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType String
                                    , location = Just Memory
                                    , ident = Identifier "key"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( TypeExpression ( ElementaryType String ) )
                                        ( CommaArguments
                                            [ FunctionCall
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "abi" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "encodePacked" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ ExpressionLiteral
                                                        ( StringLiteral ".receipts[" )
                                                    , FunctionCall
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "vm" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "toString" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "index" )
                                                            ]
                                                        )
                                                    , ExpressionLiteral
                                                        ( StringLiteral "]" )
                                                    ]
                                                )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bytes
                                    , location = Just Memory
                                    , ident = Identifier "parsedDeployData"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "vm" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "parseJson" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "deployData" )
                                            , IdentifierExpression
                                                ( Identifier "key" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = IdentifierType
                                        ( IdentifierPath
                                            [ Identifier "RawReceipt" ]
                                        )
                                    , location = Just Memory
                                    , ident = Identifier "rawReceipt"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "abi" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "decode" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "parsedDeployData" )
                                            , TupleExpression
                                                [ Just
                                                    ( IdentifierExpression
                                                        ( Identifier "RawReceipt" )
                                                    )
                                                ]
                                            ]
                                        )
                                    )
                                )
                            )
                        , Return
                            ( Just
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "rawToConvertedReceipt" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "rawReceipt" )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "rawToConvertedReceipts"
                    , params =
                        [ Parameter
                            { kind = ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "RawReceipt" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "rawReceipts" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "Receipt" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ArrayType
                                        ( IdentifierType
                                            ( IdentifierPath
                                                [ Identifier "Receipt" ]
                                            )
                                        ) [ ArrayTypeEmpty ]
                                    , location = Just Memory
                                    , ident = Identifier "receipts"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( NewType
                                            ( ArrayType
                                                ( IdentifierType
                                                    ( IdentifierPath
                                                        [ Identifier "Receipt" ]
                                                    )
                                                ) [ ArrayTypeEmpty ]
                                            )
                                        )
                                        ( CommaArguments
                                            [ MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "rawReceipts" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "length" )
                                                )
                                            ]
                                        )
                                    )
                                )
                            )
                        , For
                            ( ForStatement
                                { initializer = ForInitializerVariable
                                    ( VariableDecStatement
                                        ( VariableDeclaration
                                            { kind = ElementaryType
                                                ( UnsignedInteger
                                                    ( Just 256 )
                                                )
                                            , location = Nothing
                                            , ident = Identifier "i"
                                            }
                                        ) Nothing
                                    )
                                , condition = Just
                                    ( BinaryExpression LessThan
                                        ( IdentifierExpression
                                            ( Identifier "i" )
                                        )
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawReceipts" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "length" )
                                            )
                                        )
                                    )
                                , increment = Just
                                    ( UnaryExpression UPostInc
                                        ( IdentifierExpression
                                            ( Identifier "i" )
                                        )
                                    )
                                , body = BlockStatement
                                    [ ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IndexExpression
                                                ( IdentifierExpression
                                                    ( Identifier "receipts" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "i" )
                                                )
                                            )
                                            ( FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "rawToConvertedReceipt" )
                                                )
                                                ( CommaArguments
                                                    [ IndexExpression
                                                        ( IdentifierExpression
                                                            ( Identifier "rawReceipts" )
                                                        )
                                                        ( IdentifierExpression
                                                            ( Identifier "i" )
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    ]
                                }
                            )
                        , Return
                            ( Just
                                ( IdentifierExpression
                                    ( Identifier "receipts" )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "rawToConvertedReceipt"
                    , params =
                        [ Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "RawReceipt" ]
                                )
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "rawReceipt" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "Receipt" ]
                                )
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = IdentifierType
                                        ( IdentifierPath
                                            [ Identifier "Receipt" ]
                                        )
                                    , location = Just Memory
                                    , ident = Identifier "receipt"
                                    }
                                ) Nothing
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "receipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "blockHash" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawReceipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "blockHash" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "receipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "to" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawReceipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "to" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "receipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "from" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawReceipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "from" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "receipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "contractAddress" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawReceipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "contractAddress" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "receipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "effectiveGasPrice" )
                                    )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "_bytesToUint" )
                                    )
                                    ( CommaArguments
                                        [ MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawReceipt" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "effectiveGasPrice" )
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "receipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "cumulativeGasUsed" )
                                    )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "_bytesToUint" )
                                    )
                                    ( CommaArguments
                                        [ MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawReceipt" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "cumulativeGasUsed" )
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "receipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "gasUsed" )
                                    )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "_bytesToUint" )
                                    )
                                    ( CommaArguments
                                        [ MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawReceipt" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "gasUsed" )
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "receipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "status" )
                                    )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "_bytesToUint" )
                                    )
                                    ( CommaArguments
                                        [ MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawReceipt" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "status" )
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "receipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "transactionIndex" )
                                    )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "_bytesToUint" )
                                    )
                                    ( CommaArguments
                                        [ MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawReceipt" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "transactionIndex" )
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "receipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "blockNumber" )
                                    )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "_bytesToUint" )
                                    )
                                    ( CommaArguments
                                        [ MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawReceipt" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "blockNumber" )
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "receipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "logs" )
                                    )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "rawToConvertedReceiptLogs" )
                                    )
                                    ( CommaArguments
                                        [ MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawReceipt" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "logs" )
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "receipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "logsBloom" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawReceipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "logsBloom" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "receipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "transactionHash" )
                                    )
                                )
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "rawReceipt" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "transactionHash" )
                                    )
                                )
                            )
                        , Return
                            ( Just
                                ( IdentifierExpression
                                    ( Identifier "receipt" )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "rawToConvertedReceiptLogs"
                    , params =
                        [ Parameter
                            { kind = ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "RawReceiptLog" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "rawLogs" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ArrayType
                                ( IdentifierType
                                    ( IdentifierPath
                                        [ Identifier "ReceiptLog" ]
                                    )
                                ) [ ArrayTypeEmpty ]
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ArrayType
                                        ( IdentifierType
                                            ( IdentifierPath
                                                [ Identifier "ReceiptLog" ]
                                            )
                                        ) [ ArrayTypeEmpty ]
                                    , location = Just Memory
                                    , ident = Identifier "logs"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( NewType
                                            ( ArrayType
                                                ( IdentifierType
                                                    ( IdentifierPath
                                                        [ Identifier "ReceiptLog" ]
                                                    )
                                                ) [ ArrayTypeEmpty ]
                                            )
                                        )
                                        ( CommaArguments
                                            [ MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "rawLogs" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "length" )
                                                )
                                            ]
                                        )
                                    )
                                )
                            )
                        , For
                            ( ForStatement
                                { initializer = ForInitializerVariable
                                    ( VariableDecStatement
                                        ( VariableDeclaration
                                            { kind = ElementaryType
                                                ( UnsignedInteger
                                                    ( Just 256 )
                                                )
                                            , location = Nothing
                                            , ident = Identifier "i"
                                            }
                                        ) Nothing
                                    )
                                , condition = Just
                                    ( BinaryExpression LessThan
                                        ( IdentifierExpression
                                            ( Identifier "i" )
                                        )
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "rawLogs" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "length" )
                                            )
                                        )
                                    )
                                , increment = Just
                                    ( UnaryExpression UPostInc
                                        ( IdentifierExpression
                                            ( Identifier "i" )
                                        )
                                    )
                                , body = BlockStatement
                                    [ ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "logs" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "logAddress" )
                                                )
                                            )
                                            ( MemberAccess
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "rawLogs" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "logAddress" )
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "logs" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "blockHash" )
                                                )
                                            )
                                            ( MemberAccess
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "rawLogs" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "blockHash" )
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "logs" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "blockNumber" )
                                                )
                                            )
                                            ( FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "_bytesToUint" )
                                                )
                                                ( CommaArguments
                                                    [ MemberAccess
                                                        ( IndexExpression
                                                            ( IdentifierExpression
                                                                ( Identifier "rawLogs" )
                                                            )
                                                            ( IdentifierExpression
                                                                ( Identifier "i" )
                                                            )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "blockNumber" )
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "logs" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "data" )
                                                )
                                            )
                                            ( MemberAccess
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "rawLogs" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "data" )
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "logs" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "logIndex" )
                                                )
                                            )
                                            ( FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "_bytesToUint" )
                                                )
                                                ( CommaArguments
                                                    [ MemberAccess
                                                        ( IndexExpression
                                                            ( IdentifierExpression
                                                                ( Identifier "rawLogs" )
                                                            )
                                                            ( IdentifierExpression
                                                                ( Identifier "i" )
                                                            )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "logIndex" )
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "logs" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "topics" )
                                                )
                                            )
                                            ( MemberAccess
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "rawLogs" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "topics" )
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "logs" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "transactionIndex" )
                                                )
                                            )
                                            ( FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "_bytesToUint" )
                                                )
                                                ( CommaArguments
                                                    [ MemberAccess
                                                        ( IndexExpression
                                                            ( IdentifierExpression
                                                                ( Identifier "rawLogs" )
                                                            )
                                                            ( IdentifierExpression
                                                                ( Identifier "i" )
                                                            )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "transactionIndex" )
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "logs" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "transactionLogIndex" )
                                                )
                                            )
                                            ( FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "_bytesToUint" )
                                                )
                                                ( CommaArguments
                                                    [ MemberAccess
                                                        ( IndexExpression
                                                            ( IdentifierExpression
                                                                ( Identifier "rawLogs" )
                                                            )
                                                            ( IdentifierExpression
                                                                ( Identifier "i" )
                                                            )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "transactionLogIndex" )
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "logs" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "removed" )
                                                )
                                            )
                                            ( MemberAccess
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "rawLogs" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "removed" )
                                                )
                                            )
                                        )
                                    ]
                                }
                            )
                        , Return
                            ( Just
                                ( IdentifierExpression
                                    ( Identifier "logs" )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "deployCode"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "what" )
                            }
                        , Parameter
                            { kind = ElementaryType Bytes
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "args" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bytes
                                    , location = Just Memory
                                    , ident = Identifier "bytecode"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "abi" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "encodePacked" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ FunctionCall
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "vm" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "getCode" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ IdentifierExpression
                                                        ( Identifier "what" )
                                                    ]
                                                )
                                            , IdentifierExpression
                                                ( Identifier "args" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , Assembly
                            ( AssemblyStatement
                                { dialect = Nothing
                                , flags = []
                                , body =
                                    [ YulAssignment
                                        ( YulAssignmentDeclaration
                                            ( YulIdentifierPath
                                                [ YulIdentifier
                                                    ( Identifier "addr" )
                                                ]
                                            )
                                            ( YulExpressionFunctionCall
                                                ( YulFunctionCallDeclaration
                                                    { ident = YulEvmBuiltin
                                                        ( Identifier "create" )
                                                    , body =
                                                        [ YulExpressionLiteral
                                                            ( YulDecimalNumber 0 )
                                                        , YulExpressionFunctionCall
                                                            ( YulFunctionCallDeclaration
                                                                { ident = YulEvmBuiltin
                                                                    ( Identifier "add" )
                                                                , body =
                                                                    [ YulExpressionPath
                                                                        ( YulIdentifierPath
                                                                            [ YulIdentifier
                                                                                ( Identifier "bytecode" )
                                                                            ]
                                                                        )
                                                                    , YulExpressionLiteral
                                                                        ( YulHexNumber 32 )
                                                                    ]
                                                                }
                                                            )
                                                        , YulExpressionFunctionCall
                                                            ( YulFunctionCallDeclaration
                                                                { ident = YulEvmBuiltin
                                                                    ( Identifier "mload" )
                                                                , body =
                                                                    [ YulExpressionPath
                                                                        ( YulIdentifierPath
                                                                            [ YulIdentifier
                                                                                ( Identifier "bytecode" )
                                                                            ]
                                                                        )
                                                                    ]
                                                                }
                                                            )
                                                        ]
                                                    }
                                                )
                                            )
                                        )
                                    ]
                                }
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "require" )
                                )
                                ( CommaArguments
                                    [ BinaryExpression NotEqual
                                        ( IdentifierExpression
                                            ( Identifier "addr" )
                                        )
                                        ( FunctionCall
                                            ( TypeExpression ( ElementaryType Address ) )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( NumberLiteral 0.0 Nothing )
                                                ]
                                            )
                                        )
                                    , ExpressionLiteral
                                        ( StringLiteral "StdCheats deployCode(string,bytes): Deployment failed." )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "deployCode"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "what" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bytes
                                    , location = Just Memory
                                    , ident = Identifier "bytecode"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "vm" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "getCode" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "what" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , Assembly
                            ( AssemblyStatement
                                { dialect = Nothing
                                , flags = []
                                , body =
                                    [ YulAssignment
                                        ( YulAssignmentDeclaration
                                            ( YulIdentifierPath
                                                [ YulIdentifier
                                                    ( Identifier "addr" )
                                                ]
                                            )
                                            ( YulExpressionFunctionCall
                                                ( YulFunctionCallDeclaration
                                                    { ident = YulEvmBuiltin
                                                        ( Identifier "create" )
                                                    , body =
                                                        [ YulExpressionLiteral
                                                            ( YulDecimalNumber 0 )
                                                        , YulExpressionFunctionCall
                                                            ( YulFunctionCallDeclaration
                                                                { ident = YulEvmBuiltin
                                                                    ( Identifier "add" )
                                                                , body =
                                                                    [ YulExpressionPath
                                                                        ( YulIdentifierPath
                                                                            [ YulIdentifier
                                                                                ( Identifier "bytecode" )
                                                                            ]
                                                                        )
                                                                    , YulExpressionLiteral
                                                                        ( YulHexNumber 32 )
                                                                    ]
                                                                }
                                                            )
                                                        , YulExpressionFunctionCall
                                                            ( YulFunctionCallDeclaration
                                                                { ident = YulEvmBuiltin
                                                                    ( Identifier "mload" )
                                                                , body =
                                                                    [ YulExpressionPath
                                                                        ( YulIdentifierPath
                                                                            [ YulIdentifier
                                                                                ( Identifier "bytecode" )
                                                                            ]
                                                                        )
                                                                    ]
                                                                }
                                                            )
                                                        ]
                                                    }
                                                )
                                            )
                                        )
                                    ]
                                }
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "require" )
                                )
                                ( CommaArguments
                                    [ BinaryExpression NotEqual
                                        ( IdentifierExpression
                                            ( Identifier "addr" )
                                        )
                                        ( FunctionCall
                                            ( TypeExpression ( ElementaryType Address ) )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( NumberLiteral 0.0 Nothing )
                                                ]
                                            )
                                        )
                                    , ExpressionLiteral
                                        ( StringLiteral "StdCheats deployCode(string): Deployment failed." )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "deployCode"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "what" )
                            }
                        , Parameter
                            { kind = ElementaryType Bytes
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "args" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "val" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bytes
                                    , location = Just Memory
                                    , ident = Identifier "bytecode"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "abi" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "encodePacked" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ FunctionCall
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "vm" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "getCode" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ IdentifierExpression
                                                        ( Identifier "what" )
                                                    ]
                                                )
                                            , IdentifierExpression
                                                ( Identifier "args" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , Assembly
                            ( AssemblyStatement
                                { dialect = Nothing
                                , flags = []
                                , body =
                                    [ YulAssignment
                                        ( YulAssignmentDeclaration
                                            ( YulIdentifierPath
                                                [ YulIdentifier
                                                    ( Identifier "addr" )
                                                ]
                                            )
                                            ( YulExpressionFunctionCall
                                                ( YulFunctionCallDeclaration
                                                    { ident = YulEvmBuiltin
                                                        ( Identifier "create" )
                                                    , body =
                                                        [ YulExpressionPath
                                                            ( YulIdentifierPath
                                                                [ YulIdentifier
                                                                    ( Identifier "val" )
                                                                ]
                                                            )
                                                        , YulExpressionFunctionCall
                                                            ( YulFunctionCallDeclaration
                                                                { ident = YulEvmBuiltin
                                                                    ( Identifier "add" )
                                                                , body =
                                                                    [ YulExpressionPath
                                                                        ( YulIdentifierPath
                                                                            [ YulIdentifier
                                                                                ( Identifier "bytecode" )
                                                                            ]
                                                                        )
                                                                    , YulExpressionLiteral
                                                                        ( YulHexNumber 32 )
                                                                    ]
                                                                }
                                                            )
                                                        , YulExpressionFunctionCall
                                                            ( YulFunctionCallDeclaration
                                                                { ident = YulEvmBuiltin
                                                                    ( Identifier "mload" )
                                                                , body =
                                                                    [ YulExpressionPath
                                                                        ( YulIdentifierPath
                                                                            [ YulIdentifier
                                                                                ( Identifier "bytecode" )
                                                                            ]
                                                                        )
                                                                    ]
                                                                }
                                                            )
                                                        ]
                                                    }
                                                )
                                            )
                                        )
                                    ]
                                }
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "require" )
                                )
                                ( CommaArguments
                                    [ BinaryExpression NotEqual
                                        ( IdentifierExpression
                                            ( Identifier "addr" )
                                        )
                                        ( FunctionCall
                                            ( TypeExpression ( ElementaryType Address ) )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( NumberLiteral 0.0 Nothing )
                                                ]
                                            )
                                        )
                                    , ExpressionLiteral
                                        ( StringLiteral "StdCheats deployCode(string,bytes,uint256): Deployment failed." )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "deployCode"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "what" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "val" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bytes
                                    , location = Just Memory
                                    , ident = Identifier "bytecode"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "vm" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "getCode" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "what" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , Assembly
                            ( AssemblyStatement
                                { dialect = Nothing
                                , flags = []
                                , body =
                                    [ YulAssignment
                                        ( YulAssignmentDeclaration
                                            ( YulIdentifierPath
                                                [ YulIdentifier
                                                    ( Identifier "addr" )
                                                ]
                                            )
                                            ( YulExpressionFunctionCall
                                                ( YulFunctionCallDeclaration
                                                    { ident = YulEvmBuiltin
                                                        ( Identifier "create" )
                                                    , body =
                                                        [ YulExpressionPath
                                                            ( YulIdentifierPath
                                                                [ YulIdentifier
                                                                    ( Identifier "val" )
                                                                ]
                                                            )
                                                        , YulExpressionFunctionCall
                                                            ( YulFunctionCallDeclaration
                                                                { ident = YulEvmBuiltin
                                                                    ( Identifier "add" )
                                                                , body =
                                                                    [ YulExpressionPath
                                                                        ( YulIdentifierPath
                                                                            [ YulIdentifier
                                                                                ( Identifier "bytecode" )
                                                                            ]
                                                                        )
                                                                    , YulExpressionLiteral
                                                                        ( YulHexNumber 32 )
                                                                    ]
                                                                }
                                                            )
                                                        , YulExpressionFunctionCall
                                                            ( YulFunctionCallDeclaration
                                                                { ident = YulEvmBuiltin
                                                                    ( Identifier "mload" )
                                                                , body =
                                                                    [ YulExpressionPath
                                                                        ( YulIdentifierPath
                                                                            [ YulIdentifier
                                                                                ( Identifier "bytecode" )
                                                                            ]
                                                                        )
                                                                    ]
                                                                }
                                                            )
                                                        ]
                                                    }
                                                )
                                            )
                                        )
                                    ]
                                }
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "require" )
                                )
                                ( CommaArguments
                                    [ BinaryExpression NotEqual
                                        ( IdentifierExpression
                                            ( Identifier "addr" )
                                        )
                                        ( FunctionCall
                                            ( TypeExpression ( ElementaryType Address ) )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( NumberLiteral 0.0 Nothing )
                                                ]
                                            )
                                        )
                                    , ExpressionLiteral
                                        ( StringLiteral "StdCheats deployCode(string,uint256): Deployment failed." )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "makeAddrAndKey"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "name" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "privateKey" )
                            }
                        ]
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( BinaryExpression Assign
                                ( IdentifierExpression
                                    ( Identifier "privateKey" )
                                )
                                ( FunctionCall
                                    ( TypeExpression
                                        ( ElementaryType
                                            ( UnsignedInteger
                                                ( Just 256 )
                                            )
                                        )
                                    )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "keccak256" )
                                            )
                                            ( CommaArguments
                                                [ FunctionCall
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "abi" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "encodePacked" )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "name" )
                                                        ]
                                                    )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( IdentifierExpression
                                    ( Identifier "addr" )
                                )
                                ( FunctionCall
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "vm" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "addr" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "privateKey" )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "label" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "addr" )
                                    , IdentifierExpression
                                        ( Identifier "name" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "makeAddr"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "name" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        ]
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( BinaryExpression Assign
                                ( TupleExpression
                                    [ Just
                                        ( IdentifierExpression
                                            ( Identifier "addr" )
                                        )
                                    , Nothing
                                    ]
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "makeAddrAndKey" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "name" )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "destroyAccount"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "who" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "beneficiary" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 256 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "currBalance"
                                    }
                                )
                                ( Just
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "who" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "balance" )
                                        )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "etch" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "who" )
                                    , FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "abi" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "encode" )
                                            )
                                        )
                                        ( CommaArguments [] )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "deal" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "who" )
                                    , ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "resetNonce" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "who" )
                                    ]
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 256 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "beneficiaryBalance"
                                    }
                                )
                                ( Just
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "beneficiary" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "balance" )
                                        )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "deal" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "beneficiary" )
                                    , BinaryExpression Add
                                        ( IdentifierExpression
                                            ( Identifier "currBalance" )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "beneficiaryBalance" )
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "makeAccount"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "name" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "Account" ]
                                )
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "account" )
                            }
                        ]
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( BinaryExpression Assign
                                ( TupleExpression
                                    [ Just
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "account" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "addr" )
                                            )
                                        )
                                    , Just
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "account" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "key" )
                                            )
                                        )
                                    ]
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "makeAddrAndKey" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "name" )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "deriveRememberKey"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "mnemonic" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 32 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "index" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "who" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "privateKey" )
                            }
                        ]
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( BinaryExpression Assign
                                ( IdentifierExpression
                                    ( Identifier "privateKey" )
                                )
                                ( FunctionCall
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "vm" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "deriveKey" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "mnemonic" )
                                        , IdentifierExpression
                                            ( Identifier "index" )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( IdentifierExpression
                                    ( Identifier "who" )
                                )
                                ( FunctionCall
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "vm" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "rememberKey" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "privateKey" )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_bytesToUint"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Bytes
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "b" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "require" )
                                )
                                ( CommaArguments
                                    [ BinaryExpression LessEqual
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "b" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "length" )
                                            )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 32.0 Nothing )
                                        )
                                    , ExpressionLiteral
                                        ( StringLiteral "StdCheats _bytesToUint(bytes): Bytes length exceeds 32." )
                                    ]
                                )
                            )
                        , Return
                            ( Just
                                ( FunctionCall
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "abi" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "decode" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "abi" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "encodePacked" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ FunctionCall
                                                    ( NewType ( ElementaryType Bytes ) )
                                                    ( CommaArguments
                                                        [ BinaryExpression Sub
                                                            ( ExpressionLiteral
                                                                ( NumberLiteral 32.0 Nothing )
                                                            )
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "b" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "length" )
                                                                )
                                                            )
                                                        ]
                                                    )
                                                , IdentifierExpression
                                                    ( Identifier "b" )
                                                ]
                                            )
                                        , TupleExpression
                                            [ Just
                                                ( TypeExpression
                                                    ( ElementaryType
                                                        ( UnsignedInteger
                                                            ( Just 256 )
                                                        )
                                                    )
                                                )
                                            ]
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "isFork"
                    , params = []
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability View
                        , FuncVirtual
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Just
                                ( Identifier "status" )
                            }
                        ]
                    , body = BlockStatement
                        [ Try
                            ( TryStatement
                                { expr = FunctionCall
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "vm" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "activeFork" )
                                        )
                                    )
                                    ( CommaArguments [] )
                                , ret = Nothing
                                , body = BlockStatement
                                    [ ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IdentifierExpression
                                                ( Identifier "status" )
                                            )
                                            ( ExpressionLiteral ( BooleanLiteral True ) )
                                        )
                                    ]
                                , catch =
                                    [ CatchClause
                                        { ident = Nothing
                                        , params = Just
                                            [ Parameter
                                                { kind = ElementaryType Bytes
                                                , location = Just Memory
                                                , ident = Nothing
                                                }
                                            ]
                                        , body = BlockStatement []
                                        }
                                    ]
                                }
                            )
                        ]
                    }
                )
            , CModifier
                ( ModifierDefinition
                    { ident = Identifier "skipWhenForking"
                    , params = Just []
                    , modifiers = []
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = UnaryExpression UPreNot
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "isFork" )
                                        )
                                        ( CommaArguments [] )
                                    )
                                , trueStmt = BlockStatement
                                    [ ExpressionStatement
                                        ( IdentifierExpression
                                            ( Identifier "_" )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        ]
                    }
                )
            , CModifier
                ( ModifierDefinition
                    { ident = Identifier "skipWhenNotForking"
                    , params = Just []
                    , modifiers = []
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "isFork" )
                                    )
                                    ( CommaArguments [] )
                                , trueStmt = BlockStatement
                                    [ ExpressionStatement
                                        ( IdentifierExpression
                                            ( Identifier "_" )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        ]
                    }
                )
            , CModifier
                ( ModifierDefinition
                    { ident = Identifier "noGasMetering"
                    , params = Just []
                    , modifiers = []
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "pauseGasMetering" )
                                    )
                                )
                                ( CommaArguments [] )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bool
                                    , location = Nothing
                                    , ident = Identifier "gasStartedOff"
                                    }
                                )
                                ( Just
                                    ( IdentifierExpression
                                        ( Identifier "gasMeteringOff" )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( IdentifierExpression
                                    ( Identifier "gasMeteringOff" )
                                )
                                ( ExpressionLiteral ( BooleanLiteral True ) )
                            )
                        , ExpressionStatement
                            ( IdentifierExpression
                                ( Identifier "_" )
                            )
                        , If
                            ( IfStatement
                                { expr = UnaryExpression UPreNot
                                    ( IdentifierExpression
                                        ( Identifier "gasStartedOff" )
                                    )
                                , trueStmt = BlockStatement
                                    [ ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IdentifierExpression
                                                ( Identifier "gasMeteringOff" )
                                            )
                                            ( ExpressionLiteral ( BooleanLiteral False ) )
                                        )
                                    , ExpressionStatement
                                        ( FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "vm" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "resumeGasMetering" )
                                                )
                                            )
                                            ( CommaArguments [] )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_viewChainId"
                    , params = []
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability View
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "chainId" )
                            }
                        ]
                    , body = BlockStatement
                        [ Assembly
                            ( AssemblyStatement
                                { dialect = Nothing
                                , flags = []
                                , body =
                                    [ YulAssignment
                                        ( YulAssignmentDeclaration
                                            ( YulIdentifierPath
                                                [ YulIdentifier
                                                    ( Identifier "chainId" )
                                                ]
                                            )
                                            ( YulExpressionFunctionCall
                                                ( YulFunctionCallDeclaration
                                                    { ident = YulEvmBuiltin
                                                        ( Identifier "chainid" )
                                                    , body = []
                                                    }
                                                )
                                            )
                                        )
                                    ]
                                }
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( TypeExpression ( ElementaryType Address ) )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "this" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "_pureChainId"
                    , params = []
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "chainId" )
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = FunctionType
                                        ( MkFunctionType
                                            { params = []
                                            , restrictions =
                                                [ FuncVisibility FuncInternal
                                                , FuncMutability View
                                                ]
                                            , returns = Just
                                                [ Parameter
                                                    { kind = ElementaryType
                                                        ( UnsignedInteger
                                                            ( Just 256 )
                                                        )
                                                    , location = Nothing
                                                    , ident = Nothing
                                                    }
                                                ]
                                            }
                                        )
                                    , location = Nothing
                                    , ident = Identifier "fnIn"
                                    }
                                )
                                ( Just
                                    ( IdentifierExpression
                                        ( Identifier "_viewChainId" )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = FunctionType
                                        ( MkFunctionType
                                            { params = []
                                            , restrictions =
                                                [ FuncVisibility FuncInternal
                                                , FuncMutability Pure
                                                ]
                                            , returns = Just
                                                [ Parameter
                                                    { kind = ElementaryType
                                                        ( UnsignedInteger
                                                            ( Just 256 )
                                                        )
                                                    , location = Nothing
                                                    , ident = Nothing
                                                    }
                                                ]
                                            }
                                        )
                                    , location = Nothing
                                    , ident = Identifier "pureChainId"
                                    }
                                ) Nothing
                            )
                        , Assembly
                            ( AssemblyStatement
                                { dialect = Nothing
                                , flags = []
                                , body =
                                    [ YulAssignment
                                        ( YulAssignmentDeclaration
                                            ( YulIdentifierPath
                                                [ YulIdentifier
                                                    ( Identifier "pureChainId" )
                                                ]
                                            )
                                            ( YulExpressionPath
                                                ( YulIdentifierPath
                                                    [ YulIdentifier
                                                        ( Identifier "fnIn" )
                                                    ]
                                                )
                                            )
                                        )
                                    ]
                                }
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( IdentifierExpression
                                    ( Identifier "chainId" )
                                )
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "pureChainId" )
                                    )
                                    ( CommaArguments [] )
                                )
                            )
                        ]
                    }
                )
            ]
        }
    )
, Contract
    ( ContractDefinition
        { abstract = True
        , name = Identifier "StdCheats"
        , inheritance = Just
            [ InheritanceSpecifier
                ( IdentifierPath
                    [ Identifier "StdCheatsSafe" ]
                ) Nothing
            ]
        , body =
            [ CUsing
                ( UsingDirective
                    { ident = IdentifierPath
                        [ Identifier "stdStorage" ]
                    , bound = DirectiveType
                        ( IdentifierType
                            ( IdentifierPath
                                [ Identifier "StdStorage" ]
                            )
                        )
                    }
                )
            , CStateVariableDec
                ( StateVariableDec
                    { kind = IdentifierType
                        ( IdentifierPath
                            [ Identifier "StdStorage" ]
                        )
                    , modifiers = Just [ StatePrivate ]
                    , ident = Identifier "stdstore"
                    , expr = Nothing
                    }
                )
            , CStateVariableDec
                ( StateVariableDec
                    { kind = IdentifierType
                        ( IdentifierPath
                            [ Identifier "Vm" ]
                        )
                    , modifiers = Just
                        [ StatePrivate
                        , StateConstant
                        ]
                    , ident = Identifier "vm"
                    , expr = Just
                        ( FunctionCall
                            ( IdentifierExpression
                                ( Identifier "Vm" )
                            )
                            ( CommaArguments
                                [ FunctionCall
                                    ( TypeExpression ( ElementaryType Address ) )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( TypeExpression
                                                ( ElementaryType
                                                    ( UnsignedInteger
                                                        ( Just 160 )
                                                    )
                                                )
                                            )
                                            ( CommaArguments
                                                [ FunctionCall
                                                    ( TypeExpression
                                                        ( ElementaryType
                                                            ( UnsignedInteger
                                                                ( Just 256 )
                                                            )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( IdentifierExpression
                                                                ( Identifier "keccak256" )
                                                            )
                                                            ( CommaArguments
                                                                [ ExpressionLiteral
                                                                    ( StringLiteral "hevm cheat code" )
                                                                ]
                                                            )
                                                        ]
                                                    )
                                                ]
                                            )
                                        ]
                                    )
                                ]
                            )
                        )
                    }
                )
            , CStateVariableDec
                ( StateVariableDec
                    { kind = ElementaryType Address
                    , modifiers = Just
                        [ StatePrivate
                        , StateConstant
                        ]
                    , ident = Identifier "CONSOLE2_ADDRESS"
                    , expr = Just
                        ( ExpressionLiteral
                            ( NumberLiteral 1.2020987628128114e26 Nothing )
                        )
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "skip"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "time" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "warp" )
                                    )
                                )
                                ( CommaArguments
                                    [ BinaryExpression Add
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "block" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "timestamp" )
                                            )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "time" )
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "rewind"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "time" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "warp" )
                                    )
                                )
                                ( CommaArguments
                                    [ BinaryExpression Sub
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "block" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "timestamp" )
                                            )
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "time" )
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "hoax"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "msgSender" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "deal" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    , BinaryExpression Shl
                                        ( ExpressionLiteral
                                            ( NumberLiteral 1.0 Nothing )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 128.0 Nothing )
                                        )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "prank" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "hoax"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "msgSender" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "give" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "deal" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    , IdentifierExpression
                                        ( Identifier "give" )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "prank" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "hoax"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "msgSender" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "origin" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "deal" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    , BinaryExpression Shl
                                        ( ExpressionLiteral
                                            ( NumberLiteral 1.0 Nothing )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 128.0 Nothing )
                                        )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "prank" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    , IdentifierExpression
                                        ( Identifier "origin" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "hoax"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "msgSender" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "origin" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "give" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "deal" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    , IdentifierExpression
                                        ( Identifier "give" )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "prank" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    , IdentifierExpression
                                        ( Identifier "origin" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "startHoax"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "msgSender" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "deal" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    , BinaryExpression Shl
                                        ( ExpressionLiteral
                                            ( NumberLiteral 1.0 Nothing )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 128.0 Nothing )
                                        )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "startPrank" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "startHoax"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "msgSender" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "give" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "deal" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    , IdentifierExpression
                                        ( Identifier "give" )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "startPrank" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "startHoax"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "msgSender" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "origin" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "deal" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    , BinaryExpression Shl
                                        ( ExpressionLiteral
                                            ( NumberLiteral 1.0 Nothing )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 128.0 Nothing )
                                        )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "startPrank" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    , IdentifierExpression
                                        ( Identifier "origin" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "startHoax"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "msgSender" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "origin" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "give" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "deal" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    , IdentifierExpression
                                        ( Identifier "give" )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "startPrank" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    , IdentifierExpression
                                        ( Identifier "origin" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "changePrank"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "msgSender" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "console2_log_StdCheats" )
                                )
                                ( CommaArguments
                                    [ ExpressionLiteral
                                        ( StringLiteral "changePrank is deprecated. Please use vm.startPrank instead." )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "stopPrank" )
                                    )
                                )
                                ( CommaArguments [] )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "startPrank" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "changePrank"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "msgSender" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "txOrigin" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "stopPrank" )
                                    )
                                )
                                ( CommaArguments [] )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "startPrank" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "msgSender" )
                                    , IdentifierExpression
                                        ( Identifier "txOrigin" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "deal"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "to" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "give" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "deal" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "to" )
                                    , IdentifierExpression
                                        ( Identifier "give" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "deal"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "token" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "to" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "give" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "deal" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "token" )
                                    , IdentifierExpression
                                        ( Identifier "to" )
                                    , IdentifierExpression
                                        ( Identifier "give" )
                                    , ExpressionLiteral ( BooleanLiteral False )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "dealERC1155"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "token" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "to" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "id" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "give" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "dealERC1155" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "token" )
                                    , IdentifierExpression
                                        ( Identifier "to" )
                                    , IdentifierExpression
                                        ( Identifier "id" )
                                    , IdentifierExpression
                                        ( Identifier "give" )
                                    , ExpressionLiteral ( BooleanLiteral False )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "deal"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "token" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "to" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "give" )
                            }
                        , Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Just
                                ( Identifier "adjust" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecTupleStatement
                                [ Nothing
                                , Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType Bytes
                                        , location = Just Memory
                                        , ident = Identifier "balData"
                                        }
                                    )
                                ]
                                ( FunctionCall
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "token" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "staticcall" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "abi" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "encodeWithSelector" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( NumberLiteral 1.889567281e9 Nothing )
                                                , IdentifierExpression
                                                    ( Identifier "to" )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 256 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "prevBal"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "abi" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "decode" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "balData" )
                                            , TupleExpression
                                                [ Just
                                                    ( TypeExpression
                                                        ( ElementaryType
                                                            ( UnsignedInteger
                                                                ( Just 256 )
                                                            )
                                                        )
                                                    )
                                                ]
                                            ]
                                        )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( FunctionCall
                                                ( MemberAccess
                                                    ( FunctionCall
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "stdstore" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "target" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "token" )
                                                            ]
                                                        )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "sig" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ ExpressionLiteral
                                                        ( NumberLiteral 1.889567281e9 Nothing )
                                                    ]
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "with_key" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "to" )
                                            ]
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "checked_write" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "give" )
                                    ]
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = IdentifierExpression
                                    ( Identifier "adjust" )
                                , trueStmt = BlockStatement
                                    [ VariableStatement
                                        ( VariableDecTupleStatement
                                            [ Nothing
                                            , Just
                                                ( VariableDeclaration
                                                    { kind = ElementaryType Bytes
                                                    , location = Just Memory
                                                    , ident = Identifier "totSupData"
                                                    }
                                                )
                                            ]
                                            ( FunctionCall
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "token" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "staticcall" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ FunctionCall
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "abi" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "encodeWithSelector" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ ExpressionLiteral
                                                                ( NumberLiteral 4.04098525e8 Nothing )
                                                            ]
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    , VariableStatement
                                        ( VariableDecStatement
                                            ( VariableDeclaration
                                                { kind = ElementaryType
                                                    ( UnsignedInteger
                                                        ( Just 256 )
                                                    )
                                                , location = Nothing
                                                , ident = Identifier "totSup"
                                                }
                                            )
                                            ( Just
                                                ( FunctionCall
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "abi" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "decode" )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "totSupData" )
                                                        , TupleExpression
                                                            [ Just
                                                                ( TypeExpression
                                                                    ( ElementaryType
                                                                        ( UnsignedInteger
                                                                            ( Just 256 )
                                                                        )
                                                                    )
                                                                )
                                                            ]
                                                        ]
                                                    )
                                                )
                                            )
                                        )
                                    , If
                                        ( IfStatement
                                            { expr = BinaryExpression LessThan
                                                ( IdentifierExpression
                                                    ( Identifier "give" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "prevBal" )
                                                )
                                            , trueStmt = BlockStatement
                                                [ ExpressionStatement
                                                    ( BinaryExpression AssignSub
                                                        ( IdentifierExpression
                                                            ( Identifier "totSup" )
                                                        )
                                                        ( TupleExpression
                                                            [ Just
                                                                ( BinaryExpression Sub
                                                                    ( IdentifierExpression
                                                                        ( Identifier "prevBal" )
                                                                    )
                                                                    ( IdentifierExpression
                                                                        ( Identifier "give" )
                                                                    )
                                                                )
                                                            ]
                                                        )
                                                    )
                                                ]
                                            , elseStmt = Just
                                                ( BlockStatement
                                                    [ ExpressionStatement
                                                        ( BinaryExpression AssignAdd
                                                            ( IdentifierExpression
                                                                ( Identifier "totSup" )
                                                            )
                                                            ( TupleExpression
                                                                [ Just
                                                                    ( BinaryExpression Sub
                                                                        ( IdentifierExpression
                                                                            ( Identifier "give" )
                                                                        )
                                                                        ( IdentifierExpression
                                                                            ( Identifier "prevBal" )
                                                                        )
                                                                    )
                                                                ]
                                                            )
                                                        )
                                                    ]
                                                )
                                            }
                                        )
                                    , ExpressionStatement
                                        ( FunctionCall
                                            ( MemberAccess
                                                ( FunctionCall
                                                    ( MemberAccess
                                                        ( FunctionCall
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "stdstore" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "target" )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ IdentifierExpression
                                                                    ( Identifier "token" )
                                                                ]
                                                            )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "sig" )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ ExpressionLiteral
                                                            ( NumberLiteral 4.04098525e8 Nothing )
                                                        ]
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "checked_write" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "totSup" )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "dealERC1155"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "token" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "to" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "id" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "give" )
                            }
                        , Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Just
                                ( Identifier "adjust" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecTupleStatement
                                [ Nothing
                                , Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType Bytes
                                        , location = Just Memory
                                        , ident = Identifier "balData"
                                        }
                                    )
                                ]
                                ( FunctionCall
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "token" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "staticcall" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "abi" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "encodeWithSelector" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( NumberLiteral 1.6635278e7 Nothing )
                                                , IdentifierExpression
                                                    ( Identifier "to" )
                                                , IdentifierExpression
                                                    ( Identifier "id" )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 256 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "prevBal"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "abi" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "decode" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "balData" )
                                            , TupleExpression
                                                [ Just
                                                    ( TypeExpression
                                                        ( ElementaryType
                                                            ( UnsignedInteger
                                                                ( Just 256 )
                                                            )
                                                        )
                                                    )
                                                ]
                                            ]
                                        )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( FunctionCall
                                                ( MemberAccess
                                                    ( FunctionCall
                                                        ( MemberAccess
                                                            ( FunctionCall
                                                                ( MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "stdstore" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "target" )
                                                                    )
                                                                )
                                                                ( CommaArguments
                                                                    [ IdentifierExpression
                                                                        ( Identifier "token" )
                                                                    ]
                                                                )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "sig" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ ExpressionLiteral
                                                                ( NumberLiteral 1.6635278e7 Nothing )
                                                            ]
                                                        )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "with_key" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ IdentifierExpression
                                                        ( Identifier "to" )
                                                    ]
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "with_key" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "id" )
                                            ]
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "checked_write" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "give" )
                                    ]
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = IdentifierExpression
                                    ( Identifier "adjust" )
                                , trueStmt = BlockStatement
                                    [ VariableStatement
                                        ( VariableDecTupleStatement
                                            [ Nothing
                                            , Just
                                                ( VariableDeclaration
                                                    { kind = ElementaryType Bytes
                                                    , location = Just Memory
                                                    , ident = Identifier "totSupData"
                                                    }
                                                )
                                            ]
                                            ( FunctionCall
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "token" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "staticcall" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ FunctionCall
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "abi" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "encodeWithSelector" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ ExpressionLiteral
                                                                ( NumberLiteral 3.179655225e9 Nothing )
                                                            , IdentifierExpression
                                                                ( Identifier "id" )
                                                            ]
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( FunctionCall
                                            ( IdentifierExpression
                                                ( Identifier "require" )
                                            )
                                            ( CommaArguments
                                                [ BinaryExpression NotEqual
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "totSupData" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "length" )
                                                        )
                                                    )
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 0.0 Nothing )
                                                    )
                                                , ExpressionLiteral
                                                    ( StringLiteral "StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply." )
                                                ]
                                            )
                                        )
                                    , VariableStatement
                                        ( VariableDecStatement
                                            ( VariableDeclaration
                                                { kind = ElementaryType
                                                    ( UnsignedInteger
                                                        ( Just 256 )
                                                    )
                                                , location = Nothing
                                                , ident = Identifier "totSup"
                                                }
                                            )
                                            ( Just
                                                ( FunctionCall
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "abi" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "decode" )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "totSupData" )
                                                        , TupleExpression
                                                            [ Just
                                                                ( TypeExpression
                                                                    ( ElementaryType
                                                                        ( UnsignedInteger
                                                                            ( Just 256 )
                                                                        )
                                                                    )
                                                                )
                                                            ]
                                                        ]
                                                    )
                                                )
                                            )
                                        )
                                    , If
                                        ( IfStatement
                                            { expr = BinaryExpression LessThan
                                                ( IdentifierExpression
                                                    ( Identifier "give" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "prevBal" )
                                                )
                                            , trueStmt = BlockStatement
                                                [ ExpressionStatement
                                                    ( BinaryExpression AssignSub
                                                        ( IdentifierExpression
                                                            ( Identifier "totSup" )
                                                        )
                                                        ( TupleExpression
                                                            [ Just
                                                                ( BinaryExpression Sub
                                                                    ( IdentifierExpression
                                                                        ( Identifier "prevBal" )
                                                                    )
                                                                    ( IdentifierExpression
                                                                        ( Identifier "give" )
                                                                    )
                                                                )
                                                            ]
                                                        )
                                                    )
                                                ]
                                            , elseStmt = Just
                                                ( BlockStatement
                                                    [ ExpressionStatement
                                                        ( BinaryExpression AssignAdd
                                                            ( IdentifierExpression
                                                                ( Identifier "totSup" )
                                                            )
                                                            ( TupleExpression
                                                                [ Just
                                                                    ( BinaryExpression Sub
                                                                        ( IdentifierExpression
                                                                            ( Identifier "give" )
                                                                        )
                                                                        ( IdentifierExpression
                                                                            ( Identifier "prevBal" )
                                                                        )
                                                                    )
                                                                ]
                                                            )
                                                        )
                                                    ]
                                                )
                                            }
                                        )
                                    , ExpressionStatement
                                        ( FunctionCall
                                            ( MemberAccess
                                                ( FunctionCall
                                                    ( MemberAccess
                                                        ( FunctionCall
                                                            ( MemberAccess
                                                                ( FunctionCall
                                                                    ( MemberAccess
                                                                        ( IdentifierExpression
                                                                            ( Identifier "stdstore" )
                                                                        )
                                                                        ( MemberAccessIdentifier
                                                                            ( Identifier "target" )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ IdentifierExpression
                                                                            ( Identifier "token" )
                                                                        ]
                                                                    )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "sig" )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ ExpressionLiteral
                                                                    ( NumberLiteral 3.179655225e9 Nothing )
                                                                ]
                                                            )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "with_key" )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "id" )
                                                        ]
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "checked_write" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "totSup" )
                                                ]
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "dealERC721"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "token" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "to" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "id" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecTupleStatement
                                [ Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType Bool
                                        , location = Nothing
                                        , ident = Identifier "successMinted"
                                        }
                                    )
                                , Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType Bytes
                                        , location = Just Memory
                                        , ident = Identifier "ownerData"
                                        }
                                    )
                                ]
                                ( FunctionCall
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "token" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "staticcall" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "abi" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "encodeWithSelector" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( NumberLiteral 1.666326814e9 Nothing )
                                                , IdentifierExpression
                                                    ( Identifier "id" )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "require" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "successMinted" )
                                    , ExpressionLiteral
                                        ( StringLiteral "StdCheats deal(address,address,uint,bool): id not minted." )
                                    ]
                                )
                            )
                        , VariableStatement
                            ( VariableDecTupleStatement
                                [ Nothing
                                , Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType Bytes
                                        , location = Just Memory
                                        , ident = Identifier "fromBalData"
                                        }
                                    )
                                ]
                                ( FunctionCall
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "token" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "staticcall" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "abi" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "encodeWithSelector" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( NumberLiteral 1.889567281e9 Nothing )
                                                , FunctionCall
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "abi" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "decode" )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "ownerData" )
                                                        , TupleExpression
                                                            [ Just
                                                                ( TypeExpression ( ElementaryType Address ) )
                                                            ]
                                                        ]
                                                    )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 256 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "fromPrevBal"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "abi" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "decode" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "fromBalData" )
                                            , TupleExpression
                                                [ Just
                                                    ( TypeExpression
                                                        ( ElementaryType
                                                            ( UnsignedInteger
                                                                ( Just 256 )
                                                            )
                                                        )
                                                    )
                                                ]
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecTupleStatement
                                [ Nothing
                                , Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType Bytes
                                        , location = Just Memory
                                        , ident = Identifier "toBalData"
                                        }
                                    )
                                ]
                                ( FunctionCall
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "token" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "staticcall" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "abi" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "encodeWithSelector" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( NumberLiteral 1.889567281e9 Nothing )
                                                , IdentifierExpression
                                                    ( Identifier "to" )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 256 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "toPrevBal"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "abi" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "decode" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "toBalData" )
                                            , TupleExpression
                                                [ Just
                                                    ( TypeExpression
                                                        ( ElementaryType
                                                            ( UnsignedInteger
                                                                ( Just 256 )
                                                            )
                                                        )
                                                    )
                                                ]
                                            ]
                                        )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( FunctionCall
                                                ( MemberAccess
                                                    ( FunctionCall
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "stdstore" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "target" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "token" )
                                                            ]
                                                        )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "sig" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ ExpressionLiteral
                                                        ( NumberLiteral 1.889567281e9 Nothing )
                                                    ]
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "with_key" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ FunctionCall
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "abi" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "decode" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ IdentifierExpression
                                                        ( Identifier "ownerData" )
                                                    , TupleExpression
                                                        [ Just
                                                            ( TypeExpression ( ElementaryType Address ) )
                                                        ]
                                                    ]
                                                )
                                            ]
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "checked_write" )
                                    )
                                )
                                ( CommaArguments
                                    [ UnaryExpression UPreDec
                                        ( IdentifierExpression
                                            ( Identifier "fromPrevBal" )
                                        )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( FunctionCall
                                                ( MemberAccess
                                                    ( FunctionCall
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "stdstore" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "target" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "token" )
                                                            ]
                                                        )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "sig" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ ExpressionLiteral
                                                        ( NumberLiteral 1.889567281e9 Nothing )
                                                    ]
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "with_key" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "to" )
                                            ]
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "checked_write" )
                                    )
                                )
                                ( CommaArguments
                                    [ UnaryExpression UPreInc
                                        ( IdentifierExpression
                                            ( Identifier "toPrevBal" )
                                        )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( FunctionCall
                                                ( MemberAccess
                                                    ( FunctionCall
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "stdstore" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "target" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "token" )
                                                            ]
                                                        )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "sig" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ ExpressionLiteral
                                                        ( NumberLiteral 1.666326814e9 Nothing )
                                                    ]
                                                )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "with_key" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "id" )
                                            ]
                                        )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "checked_write" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "to" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "deployCodeTo"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "what" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "where" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "deployCodeTo" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "what" )
                                    , ExpressionLiteral
                                        ( StringLiteral "" )
                                    , ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    , IdentifierExpression
                                        ( Identifier "where" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "deployCodeTo"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "what" )
                            }
                        , Parameter
                            { kind = ElementaryType Bytes
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "args" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "where" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "deployCodeTo" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "what" )
                                    , IdentifierExpression
                                        ( Identifier "args" )
                                    , ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    , IdentifierExpression
                                        ( Identifier "where" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "deployCodeTo"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "what" )
                            }
                        , Parameter
                            { kind = ElementaryType Bytes
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "args" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "value" )
                            }
                        , Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "where" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncVirtual
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bytes
                                    , location = Just Memory
                                    , ident = Identifier "creationCode"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "vm" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "getCode" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "what" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "etch" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "where" )
                                    , FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "abi" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "encodePacked" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "creationCode" )
                                            , IdentifierExpression
                                                ( Identifier "args" )
                                            ]
                                        )
                                    ]
                                )
                            )
                        , VariableStatement
                            ( VariableDecTupleStatement
                                [ Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType Bool
                                        , location = Nothing
                                        , ident = Identifier "success"
                                        }
                                    )
                                , Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType Bytes
                                        , location = Just Memory
                                        , ident = Identifier "runtimeBytecode"
                                        }
                                    )
                                ]
                                ( FunctionCall
                                    ( FunctionCallOptions
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "where" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "call" )
                                            )
                                        )
                                        ( NamedArguments
                                            [
                                                ( Identifier "value"
                                                , IdentifierExpression
                                                    ( Identifier "value" )
                                                )
                                            ]
                                        )
                                    )
                                    ( CommaArguments
                                        [ ExpressionLiteral
                                            ( StringLiteral "" )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( IdentifierExpression
                                    ( Identifier "require" )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "success" )
                                    , ExpressionLiteral
                                        ( StringLiteral "StdCheats deployCodeTo(string,bytes,uint256,address): Failed to create runtime bytecode." )
                                    ]
                                )
                            )
                        , ExpressionStatement
                            ( FunctionCall
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "vm" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "etch" )
                                    )
                                )
                                ( CommaArguments
                                    [ IdentifierExpression
                                        ( Identifier "where" )
                                    , IdentifierExpression
                                        ( Identifier "runtimeBytecode" )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "console2_log_StdCheats"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "p0" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability View
                        ]
                    , returns = Nothing
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecTupleStatement
                                [ Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType Bool
                                        , location = Nothing
                                        , ident = Identifier "status"
                                        }
                                    )
                                , Nothing
                                ]
                                ( FunctionCall
                                    ( MemberAccess
                                        ( FunctionCall
                                            ( TypeExpression ( ElementaryType Address ) )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "CONSOLE2_ADDRESS" )
                                                ]
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "staticcall" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "abi" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "encodeWithSignature" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( StringLiteral "log(string)" )
                                                , IdentifierExpression
                                                    ( Identifier "p0" )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( IdentifierExpression
                                ( Identifier "status" )
                            )
                        ]
                    }
                )
            ]
        }
    )
]