[ Pragma
    ( PragmaDefinition
        { pragma = "solidity >=0.7.0" }
    )
, Pragma
    ( PragmaDefinition
        { pragma = "abicoder v2" }
    )
, Import
    ( ImportDefinition
        ( ImportPath "src/core/interfaces/IKatanaV3Pool.sol" Nothing )
    )
, Import
    ( ImportDefinition
        ( ImportPath "src/core/libraries/TickMath.sol" Nothing )
    )
, Import
    ( ImportDefinition
        ( ImportPath "src/core/libraries/BitMath.sol" Nothing )
    )
, Import
    ( ImportDefinition
        ( ImportPath "src/core/libraries/FullMath.sol" Nothing )
    )
, Import
    ( ImportDefinition
        ( ImportPath "@openzeppelin/contracts/utils/Strings.sol" Nothing )
    )
, Import
    ( ImportDefinition
        ( ImportPath "@openzeppelin/contracts/math/SafeMath.sol" Nothing )
    )
, Import
    ( ImportDefinition
        ( ImportPath "@openzeppelin/contracts/math/SignedSafeMath.sol" Nothing )
    )
, Import
    ( ImportDefinition
        ( ImportPath "base64-sol/base64.sol" Nothing )
    )
, Import
    ( ImportDefinition
        ( ImportPath "./HexStrings.sol" Nothing )
    )
, Import
    ( ImportDefinition
        ( ImportPath "./NFTSVG.sol" Nothing )
    )
, Library
    ( LibraryDefinition
        { name = Identifier "NFTDescriptor"
        , body =
            [ CUsing
                ( UsingDirective
                    { binders = UsingDirectiveBoundIdent
                        ( IdentifierPath
                            [ Identifier "TickMath" ]
                        )
                    , bound = DirectiveType
                        ( ElementaryType
                            ( SignedInteger
                                ( Just 24 )
                            )
                        )
                    , global = False
                    }
                )
            , CUsing
                ( UsingDirective
                    { binders = UsingDirectiveBoundIdent
                        ( IdentifierPath
                            [ Identifier "Strings" ]
                        )
                    , bound = DirectiveType
                        ( ElementaryType
                            ( UnsignedInteger
                                ( Just 256 )
                            )
                        )
                    , global = False
                    }
                )
            , CUsing
                ( UsingDirective
                    { binders = UsingDirectiveBoundIdent
                        ( IdentifierPath
                            [ Identifier "SafeMath" ]
                        )
                    , bound = DirectiveType
                        ( ElementaryType
                            ( UnsignedInteger
                                ( Just 256 )
                            )
                        )
                    , global = False
                    }
                )
            , CUsing
                ( UsingDirective
                    { binders = UsingDirectiveBoundIdent
                        ( IdentifierPath
                            [ Identifier "SafeMath" ]
                        )
                    , bound = DirectiveType
                        ( ElementaryType
                            ( UnsignedInteger
                                ( Just 160 )
                            )
                        )
                    , global = False
                    }
                )
            , CUsing
                ( UsingDirective
                    { binders = UsingDirectiveBoundIdent
                        ( IdentifierPath
                            [ Identifier "SafeMath" ]
                        )
                    , bound = DirectiveType
                        ( ElementaryType
                            ( UnsignedInteger
                                ( Just 8 )
                            )
                        )
                    , global = False
                    }
                )
            , CUsing
                ( UsingDirective
                    { binders = UsingDirectiveBoundIdent
                        ( IdentifierPath
                            [ Identifier "SignedSafeMath" ]
                        )
                    , bound = DirectiveType
                        ( ElementaryType
                            ( SignedInteger
                                ( Just 256 )
                            )
                        )
                    , global = False
                    }
                )
            , CUsing
                ( UsingDirective
                    { binders = UsingDirectiveBoundIdent
                        ( IdentifierPath
                            [ Identifier "HexStrings" ]
                        )
                    , bound = DirectiveType
                        ( ElementaryType
                            ( UnsignedInteger
                                ( Just 256 )
                            )
                        )
                    , global = False
                    }
                )
            , CStateVariableDec
                ( StateVariableDec
                    { kind = ElementaryType
                        ( UnsignedInteger
                            ( Just 256 )
                        )
                    , modifiers = Just [ StateConstant ]
                    , ident = Identifier "sqrt10X128"
                    , expr = Just
                        ( ExpressionLiteral
                            ( NumberLiteral 1.0760673270633033e39 Nothing )
                        )
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "ConstructTokenURIParams"
                    , members =
                        [
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "tokenId"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "quoteTokenAddress"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "baseTokenAddress"
                            )
                        ,
                            ( ElementaryType String
                            , Identifier "quoteTokenSymbol"
                            )
                        ,
                            ( ElementaryType String
                            , Identifier "baseTokenSymbol"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 8 )
                                )
                            , Identifier "quoteTokenDecimals"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 8 )
                                )
                            , Identifier "baseTokenDecimals"
                            )
                        ,
                            ( ElementaryType Bool
                            , Identifier "flipRatio"
                            )
                        ,
                            ( ElementaryType
                                ( SignedInteger
                                    ( Just 24 )
                                )
                            , Identifier "tickLower"
                            )
                        ,
                            ( ElementaryType
                                ( SignedInteger
                                    ( Just 24 )
                                )
                            , Identifier "tickUpper"
                            )
                        ,
                            ( ElementaryType
                                ( SignedInteger
                                    ( Just 24 )
                                )
                            , Identifier "tickCurrent"
                            )
                        ,
                            ( ElementaryType
                                ( SignedInteger
                                    ( Just 24 )
                                )
                            , Identifier "tickSpacing"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 24 )
                                )
                            , Identifier "fee"
                            )
                        ,
                            ( ElementaryType Address
                            , Identifier "poolAddress"
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "constructTokenURI"
                    , params =
                        [ Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "ConstructTokenURIParams" ]
                                )
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "params" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPublic
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType String
                                    , location = Just Memory
                                    , ident = Identifier "name"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "generateName" )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "params" )
                                            , FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "feeToPercentString" )
                                                )
                                                ( CommaArguments
                                                    [ MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "params" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "fee" )
                                                        )
                                                    ]
                                                )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType String
                                    , location = Just Memory
                                    , ident = Identifier "descriptionPartOne"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "generateDescriptionPartOne" )
                                        )
                                        ( CommaArguments
                                            [ FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "escapeQuotes" )
                                                )
                                                ( CommaArguments
                                                    [ MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "params" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "quoteTokenSymbol" )
                                                        )
                                                    ]
                                                )
                                            , FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "escapeQuotes" )
                                                )
                                                ( CommaArguments
                                                    [ MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "params" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "baseTokenSymbol" )
                                                        )
                                                    ]
                                                )
                                            , FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "addressToString" )
                                                )
                                                ( CommaArguments
                                                    [ MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "params" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "poolAddress" )
                                                        )
                                                    ]
                                                )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType String
                                    , location = Just Memory
                                    , ident = Identifier "descriptionPartTwo"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "generateDescriptionPartTwo" )
                                        )
                                        ( CommaArguments
                                            [ FunctionCall
                                                ( MemberAccess
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "params" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "tokenId" )
                                                        )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "toString" )
                                                    )
                                                )
                                                ( CommaArguments [] )
                                            , FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "escapeQuotes" )
                                                )
                                                ( CommaArguments
                                                    [ MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "params" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "baseTokenSymbol" )
                                                        )
                                                    ]
                                                )
                                            , FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "addressToString" )
                                                )
                                                ( CommaArguments
                                                    [ MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "params" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "quoteTokenAddress" )
                                                        )
                                                    ]
                                                )
                                            , FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "addressToString" )
                                                )
                                                ( CommaArguments
                                                    [ MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "params" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "baseTokenAddress" )
                                                        )
                                                    ]
                                                )
                                            , FunctionCall
                                                ( IdentifierExpression
                                                    ( Identifier "feeToPercentString" )
                                                )
                                                ( CommaArguments
                                                    [ MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "params" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "fee" )
                                                        )
                                                    ]
                                                )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType String
                                    , location = Just Memory
                                    , ident = Identifier "image"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "Base64" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "encode" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ FunctionCall
                                                ( TypeExpression ( ElementaryType Bytes ) )
                                                ( CommaArguments
                                                    [ FunctionCall
                                                        ( IdentifierExpression
                                                            ( Identifier "generateSVGImage" )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "params" )
                                                            ]
                                                        )
                                                    ]
                                                )
                                            ]
                                        )
                                    )
                                )
                            )
                        , Return
                            ( Just
                                ( FunctionCall
                                    ( TypeExpression ( ElementaryType String ) )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "abi" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "encodePacked" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( StringLiteral "data:application/json;base64," )
                                                , FunctionCall
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "Base64" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "encode" )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( TypeExpression ( ElementaryType Bytes ) )
                                                            ( CommaArguments
                                                                [ FunctionCall
                                                                    ( MemberAccess
                                                                        ( IdentifierExpression
                                                                            ( Identifier "abi" )
                                                                        )
                                                                        ( MemberAccessIdentifier
                                                                            ( Identifier "encodePacked" )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ ExpressionLiteral
                                                                            ( StringLiteral "{"name":"" )
                                                                        , IdentifierExpression
                                                                            ( Identifier "name" )
                                                                        , ExpressionLiteral
                                                                            ( StringLiteral "", "description":"" )
                                                                        , IdentifierExpression
                                                                            ( Identifier "descriptionPartOne" )
                                                                        , IdentifierExpression
                                                                            ( Identifier "descriptionPartTwo" )
                                                                        , ExpressionLiteral
                                                                            ( StringLiteral "", "image": "" )
                                                                        , ExpressionLiteral
                                                                            ( StringLiteral "data:image/svg+xml;base64," )
                                                                        , IdentifierExpression
                                                                            ( Identifier "image" )
                                                                        , ExpressionLiteral
                                                                            ( StringLiteral ""}" )
                                                                        ]
                                                                    )
                                                                ]
                                                            )
                                                        ]
                                                    )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "escapeQuotes"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "symbol" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bytes
                                    , location = Just Memory
                                    , ident = Identifier "symbolBytes"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( TypeExpression ( ElementaryType Bytes ) )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "symbol" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 8 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "quotesCount"
                                    }
                                )
                                ( Just
                                    ( ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    )
                                )
                            )
                        , For
                            ( ForStatement
                                { initializer = ForInitializerVariable
                                    ( VariableDecStatement
                                        ( VariableDeclaration
                                            { kind = ElementaryType
                                                ( UnsignedInteger
                                                    ( Just 8 )
                                                )
                                            , location = Nothing
                                            , ident = Identifier "i"
                                            }
                                        )
                                        ( Just
                                            ( ExpressionLiteral
                                                ( NumberLiteral 0.0 Nothing )
                                            )
                                        )
                                    )
                                , condition = Just
                                    ( BinaryExpression LessThan
                                        ( IdentifierExpression
                                            ( Identifier "i" )
                                        )
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "symbolBytes" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "length" )
                                            )
                                        )
                                    )
                                , increment = Just
                                    ( UnaryExpression UPostInc
                                        ( IdentifierExpression
                                            ( Identifier "i" )
                                        )
                                    )
                                , body = BlockStatement
                                    [ If
                                        ( IfStatement
                                            { expr = BinaryExpression Equal
                                                ( IndexExpression
                                                    ( IdentifierExpression
                                                        ( Identifier "symbolBytes" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                                ( ExpressionLiteral
                                                    ( StringLiteral """ )
                                                )
                                            , trueStmt = BlockStatement
                                                [ ExpressionStatement
                                                    ( UnaryExpression UPostInc
                                                        ( IdentifierExpression
                                                            ( Identifier "quotesCount" )
                                                        )
                                                    )
                                                ]
                                            , elseStmt = Nothing
                                            }
                                        )
                                    ]
                                }
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression GreaterThan
                                    ( IdentifierExpression
                                        ( Identifier "quotesCount" )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    )
                                , trueStmt = BlockStatement
                                    [ VariableStatement
                                        ( VariableDecStatement
                                            ( VariableDeclaration
                                                { kind = ElementaryType Bytes
                                                , location = Just Memory
                                                , ident = Identifier "escapedBytes"
                                                }
                                            )
                                            ( Just
                                                ( FunctionCall
                                                    ( NewType ( ElementaryType Bytes ) )
                                                    ( CommaArguments
                                                        [ BinaryExpression Add
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "symbolBytes" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "length" )
                                                                )
                                                            )
                                                            ( TupleExpression
                                                                [ Just
                                                                    ( IdentifierExpression
                                                                        ( Identifier "quotesCount" )
                                                                    )
                                                                ]
                                                            )
                                                        ]
                                                    )
                                                )
                                            )
                                        )
                                    , VariableStatement
                                        ( VariableDecStatement
                                            ( VariableDeclaration
                                                { kind = ElementaryType
                                                    ( UnsignedInteger
                                                        ( Just 256 )
                                                    )
                                                , location = Nothing
                                                , ident = Identifier "index"
                                                }
                                            ) Nothing
                                        )
                                    , For
                                        ( ForStatement
                                            { initializer = ForInitializerVariable
                                                ( VariableDecStatement
                                                    ( VariableDeclaration
                                                        { kind = ElementaryType
                                                            ( UnsignedInteger
                                                                ( Just 8 )
                                                            )
                                                        , location = Nothing
                                                        , ident = Identifier "i"
                                                        }
                                                    )
                                                    ( Just
                                                        ( ExpressionLiteral
                                                            ( NumberLiteral 0.0 Nothing )
                                                        )
                                                    )
                                                )
                                            , condition = Just
                                                ( BinaryExpression LessThan
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "symbolBytes" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "length" )
                                                        )
                                                    )
                                                )
                                            , increment = Just
                                                ( UnaryExpression UPostInc
                                                    ( IdentifierExpression
                                                        ( Identifier "i" )
                                                    )
                                                )
                                            , body = BlockStatement
                                                [ If
                                                    ( IfStatement
                                                        { expr = BinaryExpression Equal
                                                            ( IndexExpression
                                                                ( IdentifierExpression
                                                                    ( Identifier "symbolBytes" )
                                                                )
                                                                ( IdentifierExpression
                                                                    ( Identifier "i" )
                                                                )
                                                            )
                                                            ( ExpressionLiteral
                                                                ( StringLiteral """ )
                                                            )
                                                        , trueStmt = BlockStatement
                                                            [ ExpressionStatement
                                                                ( BinaryExpression Assign
                                                                    ( IndexExpression
                                                                        ( IdentifierExpression
                                                                            ( Identifier "escapedBytes" )
                                                                        )
                                                                        ( UnaryExpression UPostInc
                                                                            ( IdentifierExpression
                                                                                ( Identifier "index" )
                                                                            )
                                                                        )
                                                                    )
                                                                    ( ExpressionLiteral
                                                                        ( StringLiteral "\" )
                                                                    )
                                                                )
                                                            ]
                                                        , elseStmt = Nothing
                                                        }
                                                    )
                                                , ExpressionStatement
                                                    ( BinaryExpression Assign
                                                        ( IndexExpression
                                                            ( IdentifierExpression
                                                                ( Identifier "escapedBytes" )
                                                            )
                                                            ( UnaryExpression UPostInc
                                                                ( IdentifierExpression
                                                                    ( Identifier "index" )
                                                                )
                                                            )
                                                        )
                                                        ( IndexExpression
                                                            ( IdentifierExpression
                                                                ( Identifier "symbolBytes" )
                                                            )
                                                            ( IdentifierExpression
                                                                ( Identifier "i" )
                                                            )
                                                        )
                                                    )
                                                ]
                                            }
                                        )
                                    , Return
                                        ( Just
                                            ( FunctionCall
                                                ( TypeExpression ( ElementaryType String ) )
                                                ( CommaArguments
                                                    [ IdentifierExpression
                                                        ( Identifier "escapedBytes" )
                                                    ]
                                                )
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , Return
                            ( Just
                                ( IdentifierExpression
                                    ( Identifier "symbol" )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "generateDescriptionPartOne"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "quoteTokenSymbol" )
                            }
                        , Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "baseTokenSymbol" )
                            }
                        , Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "poolAddress" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( FunctionCall
                                    ( TypeExpression ( ElementaryType String ) )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "abi" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "encodePacked" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( StringLiteral "This NFT represents a liquidity position in a Katana V3 " )
                                                , IdentifierExpression
                                                    ( Identifier "quoteTokenSymbol" )
                                                , ExpressionLiteral
                                                    ( StringLiteral "-" )
                                                , IdentifierExpression
                                                    ( Identifier "baseTokenSymbol" )
                                                , ExpressionLiteral
                                                    ( StringLiteral " pool. " )
                                                , ExpressionLiteral
                                                    ( StringLiteral "The owner of this NFT can modify or redeem the position.\n" )
                                                , ExpressionLiteral
                                                    ( StringLiteral "\nPool Address: " )
                                                , IdentifierExpression
                                                    ( Identifier "poolAddress" )
                                                , ExpressionLiteral
                                                    ( StringLiteral "\n" )
                                                , IdentifierExpression
                                                    ( Identifier "quoteTokenSymbol" )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "generateDescriptionPartTwo"
                    , params =
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "tokenId" )
                            }
                        , Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "baseTokenSymbol" )
                            }
                        , Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "quoteTokenAddress" )
                            }
                        , Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "baseTokenAddress" )
                            }
                        , Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "feeTier" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( FunctionCall
                                    ( TypeExpression ( ElementaryType String ) )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "abi" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "encodePacked" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( StringLiteral " Address: " )
                                                , IdentifierExpression
                                                    ( Identifier "quoteTokenAddress" )
                                                , ExpressionLiteral
                                                    ( StringLiteral "\n" )
                                                , IdentifierExpression
                                                    ( Identifier "baseTokenSymbol" )
                                                , ExpressionLiteral
                                                    ( StringLiteral " Address: " )
                                                , IdentifierExpression
                                                    ( Identifier "baseTokenAddress" )
                                                , ExpressionLiteral
                                                    ( StringLiteral "\nFee Tier: " )
                                                , IdentifierExpression
                                                    ( Identifier "feeTier" )
                                                , ExpressionLiteral
                                                    ( StringLiteral "\nToken ID: " )
                                                , IdentifierExpression
                                                    ( Identifier "tokenId" )
                                                , ExpressionLiteral
                                                    ( StringLiteral "\n\n" )
                                                , ExpressionLiteral
                                                    ( UnicodeStringLiteral "⚠️ DISCLAIMER: Due diligence is imperative when assessing this NFT. Make sure token addresses match the expected tokens, as token symbols may be imitated." )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "generateName"
                    , params =
                        [ Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "ConstructTokenURIParams" ]
                                )
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "params" )
                            }
                        , Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "feeTier" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( FunctionCall
                                    ( TypeExpression ( ElementaryType String ) )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "abi" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "encodePacked" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( StringLiteral "Katana - " )
                                                , IdentifierExpression
                                                    ( Identifier "feeTier" )
                                                , ExpressionLiteral
                                                    ( StringLiteral " - " )
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "escapeQuotes" )
                                                    )
                                                    ( CommaArguments
                                                        [ MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "quoteTokenSymbol" )
                                                            )
                                                        ]
                                                    )
                                                , ExpressionLiteral
                                                    ( StringLiteral "/" )
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "escapeQuotes" )
                                                    )
                                                    ( CommaArguments
                                                        [ MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "baseTokenSymbol" )
                                                            )
                                                        ]
                                                    )
                                                , ExpressionLiteral
                                                    ( StringLiteral " - " )
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "tickToDecimalString" )
                                                    )
                                                    ( CommaArguments
                                                        [ ConditionalExpression
                                                            ( UnaryExpression UPreNot
                                                                ( MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "params" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "flipRatio" )
                                                                    )
                                                                )
                                                            )
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "params" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "tickLower" )
                                                                )
                                                            )
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "params" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "tickUpper" )
                                                                )
                                                            )
                                                        , MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "tickSpacing" )
                                                            )
                                                        , MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "baseTokenDecimals" )
                                                            )
                                                        , MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "quoteTokenDecimals" )
                                                            )
                                                        , MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "flipRatio" )
                                                            )
                                                        ]
                                                    )
                                                , ExpressionLiteral
                                                    ( StringLiteral "<>" )
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "tickToDecimalString" )
                                                    )
                                                    ( CommaArguments
                                                        [ ConditionalExpression
                                                            ( UnaryExpression UPreNot
                                                                ( MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "params" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "flipRatio" )
                                                                    )
                                                                )
                                                            )
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "params" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "tickUpper" )
                                                                )
                                                            )
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "params" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "tickLower" )
                                                                )
                                                            )
                                                        , MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "tickSpacing" )
                                                            )
                                                        , MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "baseTokenDecimals" )
                                                            )
                                                        , MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "quoteTokenDecimals" )
                                                            )
                                                        , MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "flipRatio" )
                                                            )
                                                        ]
                                                    )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CStruct
                ( StructDefinition
                    { ident = Identifier "DecimalStringParams"
                    , members =
                        [
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , Identifier "sigfigs"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 8 )
                                )
                            , Identifier "bufferLength"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 8 )
                                )
                            , Identifier "sigfigIndex"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 8 )
                                )
                            , Identifier "decimalIndex"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 8 )
                                )
                            , Identifier "zerosStartIndex"
                            )
                        ,
                            ( ElementaryType
                                ( UnsignedInteger
                                    ( Just 8 )
                                )
                            , Identifier "zerosEndIndex"
                            )
                        ,
                            ( ElementaryType Bool
                            , Identifier "isLessThanOne"
                            )
                        ,
                            ( ElementaryType Bool
                            , Identifier "isPercent"
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "generateDecimalString"
                    , params =
                        [ Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "DecimalStringParams" ]
                                )
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "params" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bytes
                                    , location = Just Memory
                                    , ident = Identifier "buffer"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( NewType ( ElementaryType Bytes ) )
                                        ( CommaArguments
                                            [ MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "params" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "bufferLength" )
                                                )
                                            ]
                                        )
                                    )
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "params" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "isPercent" )
                                    )
                                , trueStmt = BlockStatement
                                    [ ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IndexExpression
                                                ( IdentifierExpression
                                                    ( Identifier "buffer" )
                                                )
                                                ( BinaryExpression Sub
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "buffer" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "length" )
                                                        )
                                                    )
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 1.0 Nothing )
                                                    )
                                                )
                                            )
                                            ( ExpressionLiteral
                                                ( StringLiteral "%" )
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , If
                            ( IfStatement
                                { expr = MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "params" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "isLessThanOne" )
                                    )
                                , trueStmt = BlockStatement
                                    [ ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IndexExpression
                                                ( IdentifierExpression
                                                    ( Identifier "buffer" )
                                                )
                                                ( ExpressionLiteral
                                                    ( NumberLiteral 0.0 Nothing )
                                                )
                                            )
                                            ( ExpressionLiteral
                                                ( StringLiteral "0" )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IndexExpression
                                                ( IdentifierExpression
                                                    ( Identifier "buffer" )
                                                )
                                                ( ExpressionLiteral
                                                    ( NumberLiteral 1.0 Nothing )
                                                )
                                            )
                                            ( ExpressionLiteral
                                                ( StringLiteral "." )
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , For
                            ( ForStatement
                                { initializer = ForInitializerVariable
                                    ( VariableDecStatement
                                        ( VariableDeclaration
                                            { kind = ElementaryType
                                                ( UnsignedInteger
                                                    ( Just 256 )
                                                )
                                            , location = Nothing
                                            , ident = Identifier "zerosCursor"
                                            }
                                        )
                                        ( Just
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "params" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "zerosStartIndex" )
                                                )
                                            )
                                        )
                                    )
                                , condition = Just
                                    ( BinaryExpression LessThan
                                        ( IdentifierExpression
                                            ( Identifier "zerosCursor" )
                                        )
                                        ( FunctionCall
                                            ( MemberAccess
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "params" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "zerosEndIndex" )
                                                    )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "add" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( NumberLiteral 1.0 Nothing )
                                                ]
                                            )
                                        )
                                    )
                                , increment = Just
                                    ( UnaryExpression UPostInc
                                        ( IdentifierExpression
                                            ( Identifier "zerosCursor" )
                                        )
                                    )
                                , body = BlockStatement
                                    [ ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IndexExpression
                                                ( IdentifierExpression
                                                    ( Identifier "buffer" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "zerosCursor" )
                                                )
                                            )
                                            ( FunctionCall
                                                ( TypeExpression
                                                    ( ElementaryType
                                                        ( FixedBytes 1 )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ FunctionCall
                                                        ( TypeExpression
                                                            ( ElementaryType
                                                                ( UnsignedInteger
                                                                    ( Just 8 )
                                                                )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ ExpressionLiteral
                                                                ( NumberLiteral 48.0 Nothing )
                                                            ]
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    ]
                                }
                            )
                        , While
                            ( WhileStatement
                                { expr = BinaryExpression GreaterThan
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "params" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "sigfigs" )
                                        )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    )
                                , stmt = BlockStatement
                                    [ If
                                        ( IfStatement
                                            { expr = BinaryExpression And
                                                ( BinaryExpression GreaterThan
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "params" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "decimalIndex" )
                                                        )
                                                    )
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 0.0 Nothing )
                                                    )
                                                )
                                                ( BinaryExpression Equal
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "params" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "sigfigIndex" )
                                                        )
                                                    )
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "params" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "decimalIndex" )
                                                        )
                                                    )
                                                )
                                            , trueStmt = BlockStatement
                                                [ ExpressionStatement
                                                    ( BinaryExpression Assign
                                                        ( IndexExpression
                                                            ( IdentifierExpression
                                                                ( Identifier "buffer" )
                                                            )
                                                            ( UnaryExpression UPreInc
                                                                ( MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "params" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "sigfigIndex" )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                        ( ExpressionLiteral
                                                            ( StringLiteral "." )
                                                        )
                                                    )
                                                ]
                                            , elseStmt = Nothing
                                            }
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IndexExpression
                                                ( IdentifierExpression
                                                    ( Identifier "buffer" )
                                                )
                                                ( UnaryExpression UPreInc
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "params" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "sigfigIndex" )
                                                        )
                                                    )
                                                )
                                            )
                                            ( FunctionCall
                                                ( TypeExpression
                                                    ( ElementaryType
                                                        ( FixedBytes 1 )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ FunctionCall
                                                        ( TypeExpression
                                                            ( ElementaryType
                                                                ( UnsignedInteger
                                                                    ( Just 8 )
                                                                )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ FunctionCall
                                                                ( MemberAccess
                                                                    ( FunctionCall
                                                                        ( TypeExpression
                                                                            ( ElementaryType
                                                                                ( UnsignedInteger
                                                                                    ( Just 256 )
                                                                                )
                                                                            )
                                                                        )
                                                                        ( CommaArguments
                                                                            [ ExpressionLiteral
                                                                                ( NumberLiteral 48.0 Nothing )
                                                                            ]
                                                                        )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "add" )
                                                                    )
                                                                )
                                                                ( CommaArguments
                                                                    [ BinaryExpression Mod
                                                                        ( MemberAccess
                                                                            ( IdentifierExpression
                                                                                ( Identifier "params" )
                                                                            )
                                                                            ( MemberAccessIdentifier
                                                                                ( Identifier "sigfigs" )
                                                                            )
                                                                        )
                                                                        ( ExpressionLiteral
                                                                            ( NumberLiteral 10.0 Nothing )
                                                                        )
                                                                    ]
                                                                )
                                                            ]
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression AssignDiv
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "params" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "sigfigs" )
                                                )
                                            )
                                            ( ExpressionLiteral
                                                ( NumberLiteral 10.0 Nothing )
                                            )
                                        )
                                    ]
                                }
                            )
                        , Return
                            ( Just
                                ( FunctionCall
                                    ( TypeExpression ( ElementaryType String ) )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "buffer" )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "tickToDecimalString"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( SignedInteger
                                    ( Just 24 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "tick" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( SignedInteger
                                    ( Just 24 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "tickSpacing" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 8 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "baseTokenDecimals" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 8 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "quoteTokenDecimals" )
                            }
                        , Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Just
                                ( Identifier "flipRatio" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression Equal
                                    ( IdentifierExpression
                                        ( Identifier "tick" )
                                    )
                                    ( BinaryExpression Mul
                                        ( TupleExpression
                                            [ Just
                                                ( BinaryExpression Div
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "TickMath" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "MIN_TICK" )
                                                        )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "tickSpacing" )
                                                    )
                                                )
                                            ]
                                        )
                                        ( IdentifierExpression
                                            ( Identifier "tickSpacing" )
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ Return
                                        ( Just
                                            ( ConditionalExpression
                                                ( UnaryExpression UPreNot
                                                    ( IdentifierExpression
                                                        ( Identifier "flipRatio" )
                                                    )
                                                )
                                                ( ExpressionLiteral
                                                    ( StringLiteral "MIN" )
                                                )
                                                ( ExpressionLiteral
                                                    ( StringLiteral "MAX" )
                                                )
                                            )
                                        )
                                    ]
                                , elseStmt = Just
                                    ( If
                                        ( IfStatement
                                            { expr = BinaryExpression Equal
                                                ( IdentifierExpression
                                                    ( Identifier "tick" )
                                                )
                                                ( BinaryExpression Mul
                                                    ( TupleExpression
                                                        [ Just
                                                            ( BinaryExpression Div
                                                                ( MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "TickMath" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "MAX_TICK" )
                                                                    )
                                                                )
                                                                ( IdentifierExpression
                                                                    ( Identifier "tickSpacing" )
                                                                )
                                                            )
                                                        ]
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "tickSpacing" )
                                                    )
                                                )
                                            , trueStmt = BlockStatement
                                                [ Return
                                                    ( Just
                                                        ( ConditionalExpression
                                                            ( UnaryExpression UPreNot
                                                                ( IdentifierExpression
                                                                    ( Identifier "flipRatio" )
                                                                )
                                                            )
                                                            ( ExpressionLiteral
                                                                ( StringLiteral "MAX" )
                                                            )
                                                            ( ExpressionLiteral
                                                                ( StringLiteral "MIN" )
                                                            )
                                                        )
                                                    )
                                                ]
                                            , elseStmt = Just
                                                ( BlockStatement
                                                    [ VariableStatement
                                                        ( VariableDecStatement
                                                            ( VariableDeclaration
                                                                { kind = ElementaryType
                                                                    ( UnsignedInteger
                                                                        ( Just 160 )
                                                                    )
                                                                , location = Nothing
                                                                , ident = Identifier "sqrtRatioX96"
                                                                }
                                                            )
                                                            ( Just
                                                                ( FunctionCall
                                                                    ( MemberAccess
                                                                        ( IdentifierExpression
                                                                            ( Identifier "TickMath" )
                                                                        )
                                                                        ( MemberAccessIdentifier
                                                                            ( Identifier "getSqrtRatioAtTick" )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ IdentifierExpression
                                                                            ( Identifier "tick" )
                                                                        ]
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    , If
                                                        ( IfStatement
                                                            { expr = IdentifierExpression
                                                                ( Identifier "flipRatio" )
                                                            , trueStmt = BlockStatement
                                                                [ ExpressionStatement
                                                                    ( BinaryExpression Assign
                                                                        ( IdentifierExpression
                                                                            ( Identifier "sqrtRatioX96" )
                                                                        )
                                                                        ( FunctionCall
                                                                            ( TypeExpression
                                                                                ( ElementaryType
                                                                                    ( UnsignedInteger
                                                                                        ( Just 160 )
                                                                                    )
                                                                                )
                                                                            )
                                                                            ( CommaArguments
                                                                                [ FunctionCall
                                                                                    ( MemberAccess
                                                                                        ( FunctionCall
                                                                                            ( TypeExpression
                                                                                                ( ElementaryType
                                                                                                    ( UnsignedInteger
                                                                                                        ( Just 256 )
                                                                                                    )
                                                                                                )
                                                                                            )
                                                                                            ( CommaArguments
                                                                                                [ BinaryExpression Shl
                                                                                                    ( ExpressionLiteral
                                                                                                        ( NumberLiteral 1.0 Nothing )
                                                                                                    )
                                                                                                    ( ExpressionLiteral
                                                                                                        ( NumberLiteral 192.0 Nothing )
                                                                                                    )
                                                                                                ]
                                                                                            )
                                                                                        )
                                                                                        ( MemberAccessIdentifier
                                                                                            ( Identifier "div" )
                                                                                        )
                                                                                    )
                                                                                    ( CommaArguments
                                                                                        [ IdentifierExpression
                                                                                            ( Identifier "sqrtRatioX96" )
                                                                                        ]
                                                                                    )
                                                                                ]
                                                                            )
                                                                        )
                                                                    )
                                                                ]
                                                            , elseStmt = Nothing
                                                            }
                                                        )
                                                    , Return
                                                        ( Just
                                                            ( FunctionCall
                                                                ( IdentifierExpression
                                                                    ( Identifier "fixedPointToDecimalString" )
                                                                )
                                                                ( CommaArguments
                                                                    [ IdentifierExpression
                                                                        ( Identifier "sqrtRatioX96" )
                                                                    , IdentifierExpression
                                                                        ( Identifier "baseTokenDecimals" )
                                                                    , IdentifierExpression
                                                                        ( Identifier "quoteTokenDecimals" )
                                                                    ]
                                                                )
                                                            )
                                                        )
                                                    ]
                                                )
                                            }
                                        )
                                    )
                                }
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "sigfigsRounded"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "value" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 8 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "digits" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        , Parameter
                            { kind = ElementaryType Bool
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bool
                                    , location = Nothing
                                    , ident = Identifier "extraDigit"
                                    }
                                ) Nothing
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression GreaterThan
                                    ( IdentifierExpression
                                        ( Identifier "digits" )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 5.0 Nothing )
                                    )
                                , trueStmt = BlockStatement
                                    [ ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IdentifierExpression
                                                ( Identifier "value" )
                                            )
                                            ( FunctionCall
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "value" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "div" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ TupleExpression
                                                        [ Just
                                                            ( BinaryExpression Exp
                                                                ( ExpressionLiteral
                                                                    ( NumberLiteral 10.0 Nothing )
                                                                )
                                                                ( TupleExpression
                                                                    [ Just
                                                                        ( BinaryExpression Sub
                                                                            ( IdentifierExpression
                                                                                ( Identifier "digits" )
                                                                            )
                                                                            ( ExpressionLiteral
                                                                                ( NumberLiteral 5.0 Nothing )
                                                                            )
                                                                        )
                                                                    ]
                                                                )
                                                            )
                                                        ]
                                                    ]
                                                )
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bool
                                    , location = Nothing
                                    , ident = Identifier "roundUp"
                                    }
                                )
                                ( Just
                                    ( BinaryExpression GreaterThan
                                        ( BinaryExpression Mod
                                            ( IdentifierExpression
                                                ( Identifier "value" )
                                            )
                                            ( ExpressionLiteral
                                                ( NumberLiteral 10.0 Nothing )
                                            )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 4.0 Nothing )
                                        )
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( IdentifierExpression
                                    ( Identifier "value" )
                                )
                                ( FunctionCall
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "value" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "div" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ ExpressionLiteral
                                            ( NumberLiteral 10.0 Nothing )
                                        ]
                                    )
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = IdentifierExpression
                                    ( Identifier "roundUp" )
                                , trueStmt = BlockStatement
                                    [ ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IdentifierExpression
                                                ( Identifier "value" )
                                            )
                                            ( BinaryExpression Add
                                                ( IdentifierExpression
                                                    ( Identifier "value" )
                                                )
                                                ( ExpressionLiteral
                                                    ( NumberLiteral 1.0 Nothing )
                                                )
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression Equal
                                    ( IdentifierExpression
                                        ( Identifier "value" )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 100000.0 Nothing )
                                    )
                                , trueStmt = BlockStatement
                                    [ ExpressionStatement
                                        ( BinaryExpression AssignDiv
                                            ( IdentifierExpression
                                                ( Identifier "value" )
                                            )
                                            ( ExpressionLiteral
                                                ( NumberLiteral 10.0 Nothing )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IdentifierExpression
                                                ( Identifier "extraDigit" )
                                            )
                                            ( ExpressionLiteral ( BooleanLiteral True ) )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , Return
                            ( Just
                                ( TupleExpression
                                    [ Just
                                        ( IdentifierExpression
                                            ( Identifier "value" )
                                        )
                                    , Just
                                        ( IdentifierExpression
                                            ( Identifier "extraDigit" )
                                        )
                                    ]
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "adjustForDecimalPrecision"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 160 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "sqrtRatioX96" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 8 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "baseTokenDecimals" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 8 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "quoteTokenDecimals" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "adjustedSqrtRatioX96" )
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 256 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "difference"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "abs" )
                                        )
                                        ( CommaArguments
                                            [ FunctionCall
                                                ( MemberAccess
                                                    ( FunctionCall
                                                        ( TypeExpression
                                                            ( ElementaryType
                                                                ( SignedInteger
                                                                    ( Just 256 )
                                                                )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "baseTokenDecimals" )
                                                            ]
                                                        )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "sub" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ FunctionCall
                                                        ( TypeExpression
                                                            ( ElementaryType
                                                                ( SignedInteger
                                                                    ( Just 256 )
                                                                )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "quoteTokenDecimals" )
                                                            ]
                                                        )
                                                    ]
                                                )
                                            ]
                                        )
                                    )
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression And
                                    ( BinaryExpression GreaterThan
                                        ( IdentifierExpression
                                            ( Identifier "difference" )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 0.0 Nothing )
                                        )
                                    )
                                    ( BinaryExpression LessEqual
                                        ( IdentifierExpression
                                            ( Identifier "difference" )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 18.0 Nothing )
                                        )
                                    )
                                , trueStmt = BlockStatement
                                    [ If
                                        ( IfStatement
                                            { expr = BinaryExpression GreaterThan
                                                ( IdentifierExpression
                                                    ( Identifier "baseTokenDecimals" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "quoteTokenDecimals" )
                                                )
                                            , trueStmt = BlockStatement
                                                [ ExpressionStatement
                                                    ( BinaryExpression Assign
                                                        ( IdentifierExpression
                                                            ( Identifier "adjustedSqrtRatioX96" )
                                                        )
                                                        ( FunctionCall
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "sqrtRatioX96" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "mul" )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ BinaryExpression Exp
                                                                    ( ExpressionLiteral
                                                                        ( NumberLiteral 10.0 Nothing )
                                                                    )
                                                                    ( TupleExpression
                                                                        [ Just
                                                                            ( FunctionCall
                                                                                ( MemberAccess
                                                                                    ( IdentifierExpression
                                                                                        ( Identifier "difference" )
                                                                                    )
                                                                                    ( MemberAccessIdentifier
                                                                                        ( Identifier "div" )
                                                                                    )
                                                                                )
                                                                                ( CommaArguments
                                                                                    [ ExpressionLiteral
                                                                                        ( NumberLiteral 2.0 Nothing )
                                                                                    ]
                                                                                )
                                                                            )
                                                                        ]
                                                                    )
                                                                ]
                                                            )
                                                        )
                                                    )
                                                , If
                                                    ( IfStatement
                                                        { expr = BinaryExpression Equal
                                                            ( BinaryExpression Mod
                                                                ( IdentifierExpression
                                                                    ( Identifier "difference" )
                                                                )
                                                                ( ExpressionLiteral
                                                                    ( NumberLiteral 2.0 Nothing )
                                                                )
                                                            )
                                                            ( ExpressionLiteral
                                                                ( NumberLiteral 1.0 Nothing )
                                                            )
                                                        , trueStmt = BlockStatement
                                                            [ ExpressionStatement
                                                                ( BinaryExpression Assign
                                                                    ( IdentifierExpression
                                                                        ( Identifier "adjustedSqrtRatioX96" )
                                                                    )
                                                                    ( FunctionCall
                                                                        ( MemberAccess
                                                                            ( IdentifierExpression
                                                                                ( Identifier "FullMath" )
                                                                            )
                                                                            ( MemberAccessIdentifier
                                                                                ( Identifier "mulDiv" )
                                                                            )
                                                                        )
                                                                        ( CommaArguments
                                                                            [ IdentifierExpression
                                                                                ( Identifier "adjustedSqrtRatioX96" )
                                                                            , IdentifierExpression
                                                                                ( Identifier "sqrt10X128" )
                                                                            , BinaryExpression Shl
                                                                                ( ExpressionLiteral
                                                                                    ( NumberLiteral 1.0 Nothing )
                                                                                )
                                                                                ( ExpressionLiteral
                                                                                    ( NumberLiteral 128.0 Nothing )
                                                                                )
                                                                            ]
                                                                        )
                                                                    )
                                                                )
                                                            ]
                                                        , elseStmt = Nothing
                                                        }
                                                    )
                                                ]
                                            , elseStmt = Just
                                                ( BlockStatement
                                                    [ ExpressionStatement
                                                        ( BinaryExpression Assign
                                                            ( IdentifierExpression
                                                                ( Identifier "adjustedSqrtRatioX96" )
                                                            )
                                                            ( FunctionCall
                                                                ( MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "sqrtRatioX96" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "div" )
                                                                    )
                                                                )
                                                                ( CommaArguments
                                                                    [ BinaryExpression Exp
                                                                        ( ExpressionLiteral
                                                                            ( NumberLiteral 10.0 Nothing )
                                                                        )
                                                                        ( TupleExpression
                                                                            [ Just
                                                                                ( FunctionCall
                                                                                    ( MemberAccess
                                                                                        ( IdentifierExpression
                                                                                            ( Identifier "difference" )
                                                                                        )
                                                                                        ( MemberAccessIdentifier
                                                                                            ( Identifier "div" )
                                                                                        )
                                                                                    )
                                                                                    ( CommaArguments
                                                                                        [ ExpressionLiteral
                                                                                            ( NumberLiteral 2.0 Nothing )
                                                                                        ]
                                                                                    )
                                                                                )
                                                                            ]
                                                                        )
                                                                    ]
                                                                )
                                                            )
                                                        )
                                                    , If
                                                        ( IfStatement
                                                            { expr = BinaryExpression Equal
                                                                ( BinaryExpression Mod
                                                                    ( IdentifierExpression
                                                                        ( Identifier "difference" )
                                                                    )
                                                                    ( ExpressionLiteral
                                                                        ( NumberLiteral 2.0 Nothing )
                                                                    )
                                                                )
                                                                ( ExpressionLiteral
                                                                    ( NumberLiteral 1.0 Nothing )
                                                                )
                                                            , trueStmt = BlockStatement
                                                                [ ExpressionStatement
                                                                    ( BinaryExpression Assign
                                                                        ( IdentifierExpression
                                                                            ( Identifier "adjustedSqrtRatioX96" )
                                                                        )
                                                                        ( FunctionCall
                                                                            ( MemberAccess
                                                                                ( IdentifierExpression
                                                                                    ( Identifier "FullMath" )
                                                                                )
                                                                                ( MemberAccessIdentifier
                                                                                    ( Identifier "mulDiv" )
                                                                                )
                                                                            )
                                                                            ( CommaArguments
                                                                                [ IdentifierExpression
                                                                                    ( Identifier "adjustedSqrtRatioX96" )
                                                                                , BinaryExpression Shl
                                                                                    ( ExpressionLiteral
                                                                                        ( NumberLiteral 1.0 Nothing )
                                                                                    )
                                                                                    ( ExpressionLiteral
                                                                                        ( NumberLiteral 128.0 Nothing )
                                                                                    )
                                                                                , IdentifierExpression
                                                                                    ( Identifier "sqrt10X128" )
                                                                                ]
                                                                            )
                                                                        )
                                                                    )
                                                                ]
                                                            , elseStmt = Nothing
                                                            }
                                                        )
                                                    ]
                                                )
                                            }
                                        )
                                    ]
                                , elseStmt = Just
                                    ( BlockStatement
                                        [ ExpressionStatement
                                            ( BinaryExpression Assign
                                                ( IdentifierExpression
                                                    ( Identifier "adjustedSqrtRatioX96" )
                                                )
                                                ( FunctionCall
                                                    ( TypeExpression
                                                        ( ElementaryType
                                                            ( UnsignedInteger
                                                                ( Just 256 )
                                                            )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "sqrtRatioX96" )
                                                        ]
                                                    )
                                                )
                                            )
                                        ]
                                    )
                                }
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "abs"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( SignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "x" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( FunctionCall
                                    ( TypeExpression
                                        ( ElementaryType
                                            ( UnsignedInteger
                                                ( Just 256 )
                                            )
                                        )
                                    )
                                    ( CommaArguments
                                        [ ConditionalExpression
                                            ( BinaryExpression GreaterEqual
                                                ( IdentifierExpression
                                                    ( Identifier "x" )
                                                )
                                                ( ExpressionLiteral
                                                    ( NumberLiteral 0.0 Nothing )
                                                )
                                            )
                                            ( IdentifierExpression
                                                ( Identifier "x" )
                                            )
                                            ( UnaryExpression UPreSub
                                                ( IdentifierExpression
                                                    ( Identifier "x" )
                                                )
                                            )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "fixedPointToDecimalString"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 160 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "sqrtRatioX96" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 8 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "baseTokenDecimals" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 8 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "quoteTokenDecimals" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 256 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "adjustedSqrtRatioX96"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( IdentifierExpression
                                            ( Identifier "adjustForDecimalPrecision" )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "sqrtRatioX96" )
                                            , IdentifierExpression
                                                ( Identifier "baseTokenDecimals" )
                                            , IdentifierExpression
                                                ( Identifier "quoteTokenDecimals" )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 256 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "value"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "FullMath" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "mulDiv" )
                                            )
                                        )
                                        ( CommaArguments
                                            [ IdentifierExpression
                                                ( Identifier "adjustedSqrtRatioX96" )
                                            , IdentifierExpression
                                                ( Identifier "adjustedSqrtRatioX96" )
                                            , BinaryExpression Shl
                                                ( ExpressionLiteral
                                                    ( NumberLiteral 1.0 Nothing )
                                                )
                                                ( ExpressionLiteral
                                                    ( NumberLiteral 64.0 Nothing )
                                                )
                                            ]
                                        )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType Bool
                                    , location = Nothing
                                    , ident = Identifier "priceBelow1"
                                    }
                                )
                                ( Just
                                    ( BinaryExpression LessThan
                                        ( IdentifierExpression
                                            ( Identifier "adjustedSqrtRatioX96" )
                                        )
                                        ( BinaryExpression Exp
                                            ( ExpressionLiteral
                                                ( NumberLiteral 2.0 Nothing )
                                            )
                                            ( ExpressionLiteral
                                                ( NumberLiteral 96.0 Nothing )
                                            )
                                        )
                                    )
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = IdentifierExpression
                                    ( Identifier "priceBelow1" )
                                , trueStmt = BlockStatement
                                    [ ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IdentifierExpression
                                                ( Identifier "value" )
                                            )
                                            ( FunctionCall
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "FullMath" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "mulDiv" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ IdentifierExpression
                                                        ( Identifier "value" )
                                                    , BinaryExpression Exp
                                                        ( ExpressionLiteral
                                                            ( NumberLiteral 10.0 Nothing )
                                                        )
                                                        ( ExpressionLiteral
                                                            ( NumberLiteral 44.0 Nothing )
                                                        )
                                                    , BinaryExpression Shl
                                                        ( ExpressionLiteral
                                                            ( NumberLiteral 1.0 Nothing )
                                                        )
                                                        ( ExpressionLiteral
                                                            ( NumberLiteral 128.0 Nothing )
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    ]
                                , elseStmt = Just
                                    ( BlockStatement
                                        [ ExpressionStatement
                                            ( BinaryExpression Assign
                                                ( IdentifierExpression
                                                    ( Identifier "value" )
                                                )
                                                ( FunctionCall
                                                    ( MemberAccess
                                                        ( IdentifierExpression
                                                            ( Identifier "FullMath" )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "mulDiv" )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "value" )
                                                        , BinaryExpression Exp
                                                            ( ExpressionLiteral
                                                                ( NumberLiteral 10.0 Nothing )
                                                            )
                                                            ( ExpressionLiteral
                                                                ( NumberLiteral 5.0 Nothing )
                                                            )
                                                        , BinaryExpression Shl
                                                            ( ExpressionLiteral
                                                                ( NumberLiteral 1.0 Nothing )
                                                            )
                                                            ( ExpressionLiteral
                                                                ( NumberLiteral 128.0 Nothing )
                                                            )
                                                        ]
                                                    )
                                                )
                                            )
                                        ]
                                    )
                                }
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 256 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "temp"
                                    }
                                )
                                ( Just
                                    ( IdentifierExpression
                                        ( Identifier "value" )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 8 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "digits"
                                    }
                                ) Nothing
                            )
                        , While
                            ( WhileStatement
                                { expr = BinaryExpression NotEqual
                                    ( IdentifierExpression
                                        ( Identifier "temp" )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    )
                                , stmt = BlockStatement
                                    [ ExpressionStatement
                                        ( UnaryExpression UPostInc
                                            ( IdentifierExpression
                                                ( Identifier "digits" )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression AssignDiv
                                            ( IdentifierExpression
                                                ( Identifier "temp" )
                                            )
                                            ( ExpressionLiteral
                                                ( NumberLiteral 10.0 Nothing )
                                            )
                                        )
                                    ]
                                }
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( IdentifierExpression
                                    ( Identifier "digits" )
                                )
                                ( BinaryExpression Sub
                                    ( IdentifierExpression
                                        ( Identifier "digits" )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 1.0 Nothing )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecTupleStatement
                                [ Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType
                                            ( UnsignedInteger
                                                ( Just 256 )
                                            )
                                        , location = Nothing
                                        , ident = Identifier "sigfigs"
                                        }
                                    )
                                , Just
                                    ( VariableDeclaration
                                        { kind = ElementaryType Bool
                                        , location = Nothing
                                        , ident = Identifier "extraDigit"
                                        }
                                    )
                                ]
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "sigfigsRounded" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "value" )
                                        , IdentifierExpression
                                            ( Identifier "digits" )
                                        ]
                                    )
                                )
                            )
                        , If
                            ( IfStatement
                                { expr = IdentifierExpression
                                    ( Identifier "extraDigit" )
                                , trueStmt = BlockStatement
                                    [ ExpressionStatement
                                        ( UnaryExpression UPostInc
                                            ( IdentifierExpression
                                                ( Identifier "digits" )
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = IdentifierType
                                        ( IdentifierPath
                                            [ Identifier "DecimalStringParams" ]
                                        )
                                    , location = Just Memory
                                    , ident = Identifier "params"
                                    }
                                ) Nothing
                            )
                        , If
                            ( IfStatement
                                { expr = IdentifierExpression
                                    ( Identifier "priceBelow1" )
                                , trueStmt = BlockStatement
                                    [ ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "params" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "bufferLength" )
                                                )
                                            )
                                            ( FunctionCall
                                                ( TypeExpression
                                                    ( ElementaryType
                                                        ( UnsignedInteger
                                                            ( Just 8 )
                                                        )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ FunctionCall
                                                        ( MemberAccess
                                                            ( FunctionCall
                                                                ( TypeExpression
                                                                    ( ElementaryType
                                                                        ( UnsignedInteger
                                                                            ( Just 8 )
                                                                        )
                                                                    )
                                                                )
                                                                ( CommaArguments
                                                                    [ ExpressionLiteral
                                                                        ( NumberLiteral 7.0 Nothing )
                                                                    ]
                                                                )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "add" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ FunctionCall
                                                                ( MemberAccess
                                                                    ( FunctionCall
                                                                        ( TypeExpression
                                                                            ( ElementaryType
                                                                                ( UnsignedInteger
                                                                                    ( Just 8 )
                                                                                )
                                                                            )
                                                                        )
                                                                        ( CommaArguments
                                                                            [ ExpressionLiteral
                                                                                ( NumberLiteral 43.0 Nothing )
                                                                            ]
                                                                        )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "sub" )
                                                                    )
                                                                )
                                                                ( CommaArguments
                                                                    [ IdentifierExpression
                                                                        ( Identifier "digits" )
                                                                    ]
                                                                )
                                                            ]
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "params" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "zerosStartIndex" )
                                                )
                                            )
                                            ( ExpressionLiteral
                                                ( NumberLiteral 2.0 Nothing )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "params" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "zerosEndIndex" )
                                                )
                                            )
                                            ( FunctionCall
                                                ( TypeExpression
                                                    ( ElementaryType
                                                        ( UnsignedInteger
                                                            ( Just 8 )
                                                        )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ FunctionCall
                                                        ( MemberAccess
                                                            ( FunctionCall
                                                                ( MemberAccess
                                                                    ( FunctionCall
                                                                        ( TypeExpression
                                                                            ( ElementaryType
                                                                                ( UnsignedInteger
                                                                                    ( Just 256 )
                                                                                )
                                                                            )
                                                                        )
                                                                        ( CommaArguments
                                                                            [ ExpressionLiteral
                                                                                ( NumberLiteral 43.0 Nothing )
                                                                            ]
                                                                        )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "sub" )
                                                                    )
                                                                )
                                                                ( CommaArguments
                                                                    [ IdentifierExpression
                                                                        ( Identifier "digits" )
                                                                    ]
                                                                )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "add" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ ExpressionLiteral
                                                                ( NumberLiteral 1.0 Nothing )
                                                            ]
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "params" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "sigfigIndex" )
                                                )
                                            )
                                            ( FunctionCall
                                                ( TypeExpression
                                                    ( ElementaryType
                                                        ( UnsignedInteger
                                                            ( Just 8 )
                                                        )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ FunctionCall
                                                        ( MemberAccess
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "params" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "bufferLength" )
                                                                )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "sub" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ ExpressionLiteral
                                                                ( NumberLiteral 1.0 Nothing )
                                                            ]
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    ]
                                , elseStmt = Just
                                    ( If
                                        ( IfStatement
                                            { expr = BinaryExpression GreaterEqual
                                                ( IdentifierExpression
                                                    ( Identifier "digits" )
                                                )
                                                ( ExpressionLiteral
                                                    ( NumberLiteral 9.0 Nothing )
                                                )
                                            , trueStmt = BlockStatement
                                                [ ExpressionStatement
                                                    ( BinaryExpression Assign
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "bufferLength" )
                                                            )
                                                        )
                                                        ( FunctionCall
                                                            ( TypeExpression
                                                                ( ElementaryType
                                                                    ( UnsignedInteger
                                                                        ( Just 8 )
                                                                    )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ FunctionCall
                                                                    ( MemberAccess
                                                                        ( IdentifierExpression
                                                                            ( Identifier "digits" )
                                                                        )
                                                                        ( MemberAccessIdentifier
                                                                            ( Identifier "sub" )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ ExpressionLiteral
                                                                            ( NumberLiteral 4.0 Nothing )
                                                                        ]
                                                                    )
                                                                ]
                                                            )
                                                        )
                                                    )
                                                , ExpressionStatement
                                                    ( BinaryExpression Assign
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "zerosStartIndex" )
                                                            )
                                                        )
                                                        ( ExpressionLiteral
                                                            ( NumberLiteral 5.0 Nothing )
                                                        )
                                                    )
                                                , ExpressionStatement
                                                    ( BinaryExpression Assign
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "zerosEndIndex" )
                                                            )
                                                        )
                                                        ( FunctionCall
                                                            ( TypeExpression
                                                                ( ElementaryType
                                                                    ( UnsignedInteger
                                                                        ( Just 8 )
                                                                    )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ FunctionCall
                                                                    ( MemberAccess
                                                                        ( MemberAccess
                                                                            ( IdentifierExpression
                                                                                ( Identifier "params" )
                                                                            )
                                                                            ( MemberAccessIdentifier
                                                                                ( Identifier "bufferLength" )
                                                                            )
                                                                        )
                                                                        ( MemberAccessIdentifier
                                                                            ( Identifier "sub" )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ ExpressionLiteral
                                                                            ( NumberLiteral 1.0 Nothing )
                                                                        ]
                                                                    )
                                                                ]
                                                            )
                                                        )
                                                    )
                                                , ExpressionStatement
                                                    ( BinaryExpression Assign
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "sigfigIndex" )
                                                            )
                                                        )
                                                        ( ExpressionLiteral
                                                            ( NumberLiteral 4.0 Nothing )
                                                        )
                                                    )
                                                ]
                                            , elseStmt = Just
                                                ( BlockStatement
                                                    [ ExpressionStatement
                                                        ( BinaryExpression Assign
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "params" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "bufferLength" )
                                                                )
                                                            )
                                                            ( ExpressionLiteral
                                                                ( NumberLiteral 6.0 Nothing )
                                                            )
                                                        )
                                                    , ExpressionStatement
                                                        ( BinaryExpression Assign
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "params" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "sigfigIndex" )
                                                                )
                                                            )
                                                            ( ExpressionLiteral
                                                                ( NumberLiteral 5.0 Nothing )
                                                            )
                                                        )
                                                    , ExpressionStatement
                                                        ( BinaryExpression Assign
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "params" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "decimalIndex" )
                                                                )
                                                            )
                                                            ( FunctionCall
                                                                ( TypeExpression
                                                                    ( ElementaryType
                                                                        ( UnsignedInteger
                                                                            ( Just 8 )
                                                                        )
                                                                    )
                                                                )
                                                                ( CommaArguments
                                                                    [ FunctionCall
                                                                        ( MemberAccess
                                                                            ( FunctionCall
                                                                                ( MemberAccess
                                                                                    ( IdentifierExpression
                                                                                        ( Identifier "digits" )
                                                                                    )
                                                                                    ( MemberAccessIdentifier
                                                                                        ( Identifier "sub" )
                                                                                    )
                                                                                )
                                                                                ( CommaArguments
                                                                                    [ ExpressionLiteral
                                                                                        ( NumberLiteral 5.0 Nothing )
                                                                                    ]
                                                                                )
                                                                            )
                                                                            ( MemberAccessIdentifier
                                                                                ( Identifier "add" )
                                                                            )
                                                                        )
                                                                        ( CommaArguments
                                                                            [ ExpressionLiteral
                                                                                ( NumberLiteral 1.0 Nothing )
                                                                            ]
                                                                        )
                                                                    ]
                                                                )
                                                            )
                                                        )
                                                    ]
                                                )
                                            }
                                        )
                                    )
                                }
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "params" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "sigfigs" )
                                    )
                                )
                                ( IdentifierExpression
                                    ( Identifier "sigfigs" )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "params" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "isLessThanOne" )
                                    )
                                )
                                ( IdentifierExpression
                                    ( Identifier "priceBelow1" )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "params" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "isPercent" )
                                    )
                                )
                                ( ExpressionLiteral ( BooleanLiteral False ) )
                            )
                        , Return
                            ( Just
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "generateDecimalString" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "params" )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "feeToPercentString"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 24 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "fee" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression Equal
                                    ( IdentifierExpression
                                        ( Identifier "fee" )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    )
                                , trueStmt = BlockStatement
                                    [ Return
                                        ( Just
                                            ( ExpressionLiteral
                                                ( StringLiteral "0%" )
                                            )
                                        )
                                    ]
                                , elseStmt = Nothing
                                }
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 24 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "temp"
                                    }
                                )
                                ( Just
                                    ( IdentifierExpression
                                        ( Identifier "fee" )
                                    )
                                )
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 256 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "digits"
                                    }
                                ) Nothing
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 8 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "numSigfigs"
                                    }
                                ) Nothing
                            )
                        , While
                            ( WhileStatement
                                { expr = BinaryExpression NotEqual
                                    ( IdentifierExpression
                                        ( Identifier "temp" )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    )
                                , stmt = BlockStatement
                                    [ If
                                        ( IfStatement
                                            { expr = BinaryExpression GreaterThan
                                                ( IdentifierExpression
                                                    ( Identifier "numSigfigs" )
                                                )
                                                ( ExpressionLiteral
                                                    ( NumberLiteral 0.0 Nothing )
                                                )
                                            , trueStmt = BlockStatement
                                                [ ExpressionStatement
                                                    ( UnaryExpression UPostInc
                                                        ( IdentifierExpression
                                                            ( Identifier "numSigfigs" )
                                                        )
                                                    )
                                                ]
                                            , elseStmt = Just
                                                ( If
                                                    ( IfStatement
                                                        { expr = BinaryExpression NotEqual
                                                            ( BinaryExpression Mod
                                                                ( IdentifierExpression
                                                                    ( Identifier "temp" )
                                                                )
                                                                ( ExpressionLiteral
                                                                    ( NumberLiteral 10.0 Nothing )
                                                                )
                                                            )
                                                            ( ExpressionLiteral
                                                                ( NumberLiteral 0.0 Nothing )
                                                            )
                                                        , trueStmt = BlockStatement
                                                            [ ExpressionStatement
                                                                ( UnaryExpression UPostInc
                                                                    ( IdentifierExpression
                                                                        ( Identifier "numSigfigs" )
                                                                    )
                                                                )
                                                            ]
                                                        , elseStmt = Nothing
                                                        }
                                                    )
                                                )
                                            }
                                        )
                                    , ExpressionStatement
                                        ( UnaryExpression UPostInc
                                            ( IdentifierExpression
                                                ( Identifier "digits" )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression AssignDiv
                                            ( IdentifierExpression
                                                ( Identifier "temp" )
                                            )
                                            ( ExpressionLiteral
                                                ( NumberLiteral 10.0 Nothing )
                                            )
                                        )
                                    ]
                                }
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = IdentifierType
                                        ( IdentifierPath
                                            [ Identifier "DecimalStringParams" ]
                                        )
                                    , location = Just Memory
                                    , ident = Identifier "params"
                                    }
                                ) Nothing
                            )
                        , VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = ElementaryType
                                        ( UnsignedInteger
                                            ( Just 256 )
                                        )
                                    , location = Nothing
                                    , ident = Identifier "nZeros"
                                    }
                                ) Nothing
                            )
                        , If
                            ( IfStatement
                                { expr = BinaryExpression GreaterEqual
                                    ( IdentifierExpression
                                        ( Identifier "digits" )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 5.0 Nothing )
                                    )
                                , trueStmt = BlockStatement
                                    [ VariableStatement
                                        ( VariableDecStatement
                                            ( VariableDeclaration
                                                { kind = ElementaryType
                                                    ( UnsignedInteger
                                                        ( Just 256 )
                                                    )
                                                , location = Nothing
                                                , ident = Identifier "decimalPlace"
                                                }
                                            )
                                            ( Just
                                                ( ConditionalExpression
                                                    ( BinaryExpression GreaterEqual
                                                        ( FunctionCall
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "digits" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "sub" )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ IdentifierExpression
                                                                    ( Identifier "numSigfigs" )
                                                                ]
                                                            )
                                                        )
                                                        ( ExpressionLiteral
                                                            ( NumberLiteral 4.0 Nothing )
                                                        )
                                                    )
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 0.0 Nothing )
                                                    )
                                                    ( ExpressionLiteral
                                                        ( NumberLiteral 1.0 Nothing )
                                                    )
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( IdentifierExpression
                                                ( Identifier "nZeros" )
                                            )
                                            ( ConditionalExpression
                                                ( BinaryExpression LessThan
                                                    ( FunctionCall
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "digits" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "sub" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ ExpressionLiteral
                                                                ( NumberLiteral 5.0 Nothing )
                                                            ]
                                                        )
                                                    )
                                                    ( TupleExpression
                                                        [ Just
                                                            ( FunctionCall
                                                                ( MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "numSigfigs" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "sub" )
                                                                    )
                                                                )
                                                                ( CommaArguments
                                                                    [ ExpressionLiteral
                                                                        ( NumberLiteral 1.0 Nothing )
                                                                    ]
                                                                )
                                                            )
                                                        ]
                                                    )
                                                )
                                                ( ExpressionLiteral
                                                    ( NumberLiteral 0.0 Nothing )
                                                )
                                                ( FunctionCall
                                                    ( MemberAccess
                                                        ( FunctionCall
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "digits" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "sub" )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ ExpressionLiteral
                                                                    ( NumberLiteral 5.0 Nothing )
                                                                ]
                                                            )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "sub" )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "numSigfigs" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "sub" )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ ExpressionLiteral
                                                                    ( NumberLiteral 1.0 Nothing )
                                                                ]
                                                            )
                                                        ]
                                                    )
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "params" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "zerosStartIndex" )
                                                )
                                            )
                                            ( IdentifierExpression
                                                ( Identifier "numSigfigs" )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "params" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "zerosEndIndex" )
                                                )
                                            )
                                            ( FunctionCall
                                                ( TypeExpression
                                                    ( ElementaryType
                                                        ( UnsignedInteger
                                                            ( Just 8 )
                                                        )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ FunctionCall
                                                        ( MemberAccess
                                                            ( FunctionCall
                                                                ( MemberAccess
                                                                    ( MemberAccess
                                                                        ( IdentifierExpression
                                                                            ( Identifier "params" )
                                                                        )
                                                                        ( MemberAccessIdentifier
                                                                            ( Identifier "zerosStartIndex" )
                                                                        )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "add" )
                                                                    )
                                                                )
                                                                ( CommaArguments
                                                                    [ IdentifierExpression
                                                                        ( Identifier "nZeros" )
                                                                    ]
                                                                )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "sub" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ ExpressionLiteral
                                                                ( NumberLiteral 1.0 Nothing )
                                                            ]
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "params" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "sigfigIndex" )
                                                )
                                            )
                                            ( FunctionCall
                                                ( TypeExpression
                                                    ( ElementaryType
                                                        ( UnsignedInteger
                                                            ( Just 8 )
                                                        )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ FunctionCall
                                                        ( MemberAccess
                                                            ( FunctionCall
                                                                ( MemberAccess
                                                                    ( MemberAccess
                                                                        ( IdentifierExpression
                                                                            ( Identifier "params" )
                                                                        )
                                                                        ( MemberAccessIdentifier
                                                                            ( Identifier "zerosStartIndex" )
                                                                        )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "sub" )
                                                                    )
                                                                )
                                                                ( CommaArguments
                                                                    [ ExpressionLiteral
                                                                        ( NumberLiteral 1.0 Nothing )
                                                                    ]
                                                                )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "add" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "decimalPlace" )
                                                            ]
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    , ExpressionStatement
                                        ( BinaryExpression Assign
                                            ( MemberAccess
                                                ( IdentifierExpression
                                                    ( Identifier "params" )
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "bufferLength" )
                                                )
                                            )
                                            ( FunctionCall
                                                ( TypeExpression
                                                    ( ElementaryType
                                                        ( UnsignedInteger
                                                            ( Just 8 )
                                                        )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ FunctionCall
                                                        ( MemberAccess
                                                            ( FunctionCall
                                                                ( MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "nZeros" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "add" )
                                                                    )
                                                                )
                                                                ( CommaArguments
                                                                    [ FunctionCall
                                                                        ( MemberAccess
                                                                            ( IdentifierExpression
                                                                                ( Identifier "numSigfigs" )
                                                                            )
                                                                            ( MemberAccessIdentifier
                                                                                ( Identifier "add" )
                                                                            )
                                                                        )
                                                                        ( CommaArguments
                                                                            [ ExpressionLiteral
                                                                                ( NumberLiteral 1.0 Nothing )
                                                                            ]
                                                                        )
                                                                    ]
                                                                )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "add" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "decimalPlace" )
                                                            ]
                                                        )
                                                    ]
                                                )
                                            )
                                        )
                                    ]
                                , elseStmt = Just
                                    ( BlockStatement
                                        [ ExpressionStatement
                                            ( BinaryExpression Assign
                                                ( IdentifierExpression
                                                    ( Identifier "nZeros" )
                                                )
                                                ( FunctionCall
                                                    ( MemberAccess
                                                        ( FunctionCall
                                                            ( TypeExpression
                                                                ( ElementaryType
                                                                    ( UnsignedInteger
                                                                        ( Just 256 )
                                                                    )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ ExpressionLiteral
                                                                    ( NumberLiteral 5.0 Nothing )
                                                                ]
                                                            )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "sub" )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "digits" )
                                                        ]
                                                    )
                                                )
                                            )
                                        , ExpressionStatement
                                            ( BinaryExpression Assign
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "params" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "zerosStartIndex" )
                                                    )
                                                )
                                                ( ExpressionLiteral
                                                    ( NumberLiteral 2.0 Nothing )
                                                )
                                            )
                                        , ExpressionStatement
                                            ( BinaryExpression Assign
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "params" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "zerosEndIndex" )
                                                    )
                                                )
                                                ( FunctionCall
                                                    ( TypeExpression
                                                        ( ElementaryType
                                                            ( UnsignedInteger
                                                                ( Just 8 )
                                                            )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( MemberAccess
                                                                ( FunctionCall
                                                                    ( MemberAccess
                                                                        ( IdentifierExpression
                                                                            ( Identifier "nZeros" )
                                                                        )
                                                                        ( MemberAccessIdentifier
                                                                            ( Identifier "add" )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ MemberAccess
                                                                            ( IdentifierExpression
                                                                                ( Identifier "params" )
                                                                            )
                                                                            ( MemberAccessIdentifier
                                                                                ( Identifier "zerosStartIndex" )
                                                                            )
                                                                        ]
                                                                    )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "sub" )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ ExpressionLiteral
                                                                    ( NumberLiteral 1.0 Nothing )
                                                                ]
                                                            )
                                                        ]
                                                    )
                                                )
                                            )
                                        , ExpressionStatement
                                            ( BinaryExpression Assign
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "params" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "bufferLength" )
                                                    )
                                                )
                                                ( FunctionCall
                                                    ( TypeExpression
                                                        ( ElementaryType
                                                            ( UnsignedInteger
                                                                ( Just 8 )
                                                            )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( MemberAccess
                                                                ( IdentifierExpression
                                                                    ( Identifier "nZeros" )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "add" )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ FunctionCall
                                                                    ( MemberAccess
                                                                        ( IdentifierExpression
                                                                            ( Identifier "numSigfigs" )
                                                                        )
                                                                        ( MemberAccessIdentifier
                                                                            ( Identifier "add" )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ ExpressionLiteral
                                                                            ( NumberLiteral 2.0 Nothing )
                                                                        ]
                                                                    )
                                                                ]
                                                            )
                                                        ]
                                                    )
                                                )
                                            )
                                        , ExpressionStatement
                                            ( BinaryExpression Assign
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "params" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "sigfigIndex" )
                                                    )
                                                )
                                                ( FunctionCall
                                                    ( TypeExpression
                                                        ( ElementaryType
                                                            ( UnsignedInteger
                                                                ( Just 8 )
                                                            )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( MemberAccess
                                                                ( TupleExpression
                                                                    [ Just
                                                                        ( MemberAccess
                                                                            ( IdentifierExpression
                                                                                ( Identifier "params" )
                                                                            )
                                                                            ( MemberAccessIdentifier
                                                                                ( Identifier "bufferLength" )
                                                                            )
                                                                        )
                                                                    ]
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "sub" )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ ExpressionLiteral
                                                                    ( NumberLiteral 2.0 Nothing )
                                                                ]
                                                            )
                                                        ]
                                                    )
                                                )
                                            )
                                        , ExpressionStatement
                                            ( BinaryExpression Assign
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "params" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "isLessThanOne" )
                                                    )
                                                )
                                                ( ExpressionLiteral ( BooleanLiteral True ) )
                                            )
                                        ]
                                    )
                                }
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "params" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "sigfigs" )
                                    )
                                )
                                ( FunctionCall
                                    ( MemberAccess
                                        ( FunctionCall
                                            ( TypeExpression
                                                ( ElementaryType
                                                    ( UnsignedInteger
                                                        ( Just 256 )
                                                    )
                                                )
                                            )
                                            ( CommaArguments
                                                [ IdentifierExpression
                                                    ( Identifier "fee" )
                                                ]
                                            )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "div" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ BinaryExpression Exp
                                            ( ExpressionLiteral
                                                ( NumberLiteral 10.0 Nothing )
                                            )
                                            ( TupleExpression
                                                [ Just
                                                    ( FunctionCall
                                                        ( MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "digits" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "sub" )
                                                            )
                                                        )
                                                        ( CommaArguments
                                                            [ IdentifierExpression
                                                                ( Identifier "numSigfigs" )
                                                            ]
                                                        )
                                                    )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "params" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "isPercent" )
                                    )
                                )
                                ( ExpressionLiteral ( BooleanLiteral True ) )
                            )
                        , ExpressionStatement
                            ( BinaryExpression Assign
                                ( MemberAccess
                                    ( IdentifierExpression
                                        ( Identifier "params" )
                                    )
                                    ( MemberAccessIdentifier
                                        ( Identifier "decimalIndex" )
                                    )
                                )
                                ( ConditionalExpression
                                    ( BinaryExpression GreaterThan
                                        ( IdentifierExpression
                                            ( Identifier "digits" )
                                        )
                                        ( ExpressionLiteral
                                            ( NumberLiteral 4.0 Nothing )
                                        )
                                    )
                                    ( FunctionCall
                                        ( TypeExpression
                                            ( ElementaryType
                                                ( UnsignedInteger
                                                    ( Just 8 )
                                                )
                                            )
                                        )
                                        ( CommaArguments
                                            [ FunctionCall
                                                ( MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "digits" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "sub" )
                                                    )
                                                )
                                                ( CommaArguments
                                                    [ ExpressionLiteral
                                                        ( NumberLiteral 4.0 Nothing )
                                                    ]
                                                )
                                            ]
                                        )
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 0.0 Nothing )
                                    )
                                )
                            )
                        , Return
                            ( Just
                                ( FunctionCall
                                    ( IdentifierExpression
                                        ( Identifier "generateDecimalString" )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "params" )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "addressToString"
                    , params =
                        [ Parameter
                            { kind = ElementaryType Address
                            , location = Nothing
                            , ident = Just
                                ( Identifier "addr" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( FunctionCall
                                    ( MemberAccess
                                        ( TupleExpression
                                            [ Just
                                                ( FunctionCall
                                                    ( TypeExpression
                                                        ( ElementaryType
                                                            ( UnsignedInteger
                                                                ( Just 256 )
                                                            )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "addr" )
                                                        ]
                                                    )
                                                )
                                            ]
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "toHexString" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ ExpressionLiteral
                                            ( NumberLiteral 20.0 Nothing )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "generateSVGImage"
                    , params =
                        [ Parameter
                            { kind = IdentifierType
                                ( IdentifierPath
                                    [ Identifier "ConstructTokenURIParams" ]
                                )
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "params" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "svg" )
                            }
                        ]
                    , body = BlockStatement
                        [ VariableStatement
                            ( VariableDecStatement
                                ( VariableDeclaration
                                    { kind = IdentifierType
                                        ( IdentifierPath
                                            [ Identifier "NFTSVG"
                                            , Identifier "SVGParams"
                                            ]
                                        )
                                    , location = Just Memory
                                    , ident = Identifier "svgParams"
                                    }
                                )
                                ( Just
                                    ( FunctionCall
                                        ( MemberAccess
                                            ( IdentifierExpression
                                                ( Identifier "NFTSVG" )
                                            )
                                            ( MemberAccessIdentifier
                                                ( Identifier "SVGParams" )
                                            )
                                        )
                                        ( NamedArguments
                                            [
                                                ( Identifier "quoteToken"
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "addressToString" )
                                                    )
                                                    ( CommaArguments
                                                        [ MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "quoteTokenAddress" )
                                                            )
                                                        ]
                                                    )
                                                )
                                            ,
                                                ( Identifier "baseToken"
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "addressToString" )
                                                    )
                                                    ( CommaArguments
                                                        [ MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "baseTokenAddress" )
                                                            )
                                                        ]
                                                    )
                                                )
                                            ,
                                                ( Identifier "poolAddress"
                                                , MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "params" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "poolAddress" )
                                                    )
                                                )
                                            ,
                                                ( Identifier "quoteTokenSymbol"
                                                , MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "params" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "quoteTokenSymbol" )
                                                    )
                                                )
                                            ,
                                                ( Identifier "baseTokenSymbol"
                                                , MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "params" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "baseTokenSymbol" )
                                                    )
                                                )
                                            ,
                                                ( Identifier "feeTier"
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "feeToPercentString" )
                                                    )
                                                    ( CommaArguments
                                                        [ MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "fee" )
                                                            )
                                                        ]
                                                    )
                                                )
                                            ,
                                                ( Identifier "tickLower"
                                                , MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "params" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "tickLower" )
                                                    )
                                                )
                                            ,
                                                ( Identifier "tickUpper"
                                                , MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "params" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "tickUpper" )
                                                    )
                                                )
                                            ,
                                                ( Identifier "tickSpacing"
                                                , MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "params" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "tickSpacing" )
                                                    )
                                                )
                                            ,
                                                ( Identifier "overRange"
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "overRange" )
                                                    )
                                                    ( CommaArguments
                                                        [ MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "tickLower" )
                                                            )
                                                        , MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "tickUpper" )
                                                            )
                                                        , MemberAccess
                                                            ( IdentifierExpression
                                                                ( Identifier "params" )
                                                            )
                                                            ( MemberAccessIdentifier
                                                                ( Identifier "tickCurrent" )
                                                            )
                                                        ]
                                                    )
                                                )
                                            ,
                                                ( Identifier "tokenId"
                                                , MemberAccess
                                                    ( IdentifierExpression
                                                        ( Identifier "params" )
                                                    )
                                                    ( MemberAccessIdentifier
                                                        ( Identifier "tokenId" )
                                                    )
                                                )
                                            ,
                                                ( Identifier "color0"
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "tokenToColorHex" )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( TypeExpression
                                                                ( ElementaryType
                                                                    ( UnsignedInteger
                                                                        ( Just 256 )
                                                                    )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "params" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "quoteTokenAddress" )
                                                                    )
                                                                ]
                                                            )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 136.0 Nothing )
                                                        ]
                                                    )
                                                )
                                            ,
                                                ( Identifier "color1"
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "tokenToColorHex" )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( TypeExpression
                                                                ( ElementaryType
                                                                    ( UnsignedInteger
                                                                        ( Just 256 )
                                                                    )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "params" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "baseTokenAddress" )
                                                                    )
                                                                ]
                                                            )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 136.0 Nothing )
                                                        ]
                                                    )
                                                )
                                            ,
                                                ( Identifier "color2"
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "tokenToColorHex" )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( TypeExpression
                                                                ( ElementaryType
                                                                    ( UnsignedInteger
                                                                        ( Just 256 )
                                                                    )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "params" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "quoteTokenAddress" )
                                                                    )
                                                                ]
                                                            )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 0.0 Nothing )
                                                        ]
                                                    )
                                                )
                                            ,
                                                ( Identifier "color3"
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "tokenToColorHex" )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( TypeExpression
                                                                ( ElementaryType
                                                                    ( UnsignedInteger
                                                                        ( Just 256 )
                                                                    )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "params" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "baseTokenAddress" )
                                                                    )
                                                                ]
                                                            )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 0.0 Nothing )
                                                        ]
                                                    )
                                                )
                                            ,
                                                ( Identifier "x1"
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "scale" )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( IdentifierExpression
                                                                ( Identifier "getCircleCoord" )
                                                            )
                                                            ( CommaArguments
                                                                [ FunctionCall
                                                                    ( TypeExpression
                                                                        ( ElementaryType
                                                                            ( UnsignedInteger
                                                                                ( Just 256 )
                                                                            )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ MemberAccess
                                                                            ( IdentifierExpression
                                                                                ( Identifier "params" )
                                                                            )
                                                                            ( MemberAccessIdentifier
                                                                                ( Identifier "quoteTokenAddress" )
                                                                            )
                                                                        ]
                                                                    )
                                                                , ExpressionLiteral
                                                                    ( NumberLiteral 16.0 Nothing )
                                                                , MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "params" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "tokenId" )
                                                                    )
                                                                ]
                                                            )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 0.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 255.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 16.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 274.0 Nothing )
                                                        ]
                                                    )
                                                )
                                            ,
                                                ( Identifier "y1"
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "scale" )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( IdentifierExpression
                                                                ( Identifier "getCircleCoord" )
                                                            )
                                                            ( CommaArguments
                                                                [ FunctionCall
                                                                    ( TypeExpression
                                                                        ( ElementaryType
                                                                            ( UnsignedInteger
                                                                                ( Just 256 )
                                                                            )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ MemberAccess
                                                                            ( IdentifierExpression
                                                                                ( Identifier "params" )
                                                                            )
                                                                            ( MemberAccessIdentifier
                                                                                ( Identifier "baseTokenAddress" )
                                                                            )
                                                                        ]
                                                                    )
                                                                , ExpressionLiteral
                                                                    ( NumberLiteral 16.0 Nothing )
                                                                , MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "params" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "tokenId" )
                                                                    )
                                                                ]
                                                            )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 0.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 255.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 100.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 484.0 Nothing )
                                                        ]
                                                    )
                                                )
                                            ,
                                                ( Identifier "x2"
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "scale" )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( IdentifierExpression
                                                                ( Identifier "getCircleCoord" )
                                                            )
                                                            ( CommaArguments
                                                                [ FunctionCall
                                                                    ( TypeExpression
                                                                        ( ElementaryType
                                                                            ( UnsignedInteger
                                                                                ( Just 256 )
                                                                            )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ MemberAccess
                                                                            ( IdentifierExpression
                                                                                ( Identifier "params" )
                                                                            )
                                                                            ( MemberAccessIdentifier
                                                                                ( Identifier "quoteTokenAddress" )
                                                                            )
                                                                        ]
                                                                    )
                                                                , ExpressionLiteral
                                                                    ( NumberLiteral 32.0 Nothing )
                                                                , MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "params" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "tokenId" )
                                                                    )
                                                                ]
                                                            )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 0.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 255.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 16.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 274.0 Nothing )
                                                        ]
                                                    )
                                                )
                                            ,
                                                ( Identifier "y2"
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "scale" )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( IdentifierExpression
                                                                ( Identifier "getCircleCoord" )
                                                            )
                                                            ( CommaArguments
                                                                [ FunctionCall
                                                                    ( TypeExpression
                                                                        ( ElementaryType
                                                                            ( UnsignedInteger
                                                                                ( Just 256 )
                                                                            )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ MemberAccess
                                                                            ( IdentifierExpression
                                                                                ( Identifier "params" )
                                                                            )
                                                                            ( MemberAccessIdentifier
                                                                                ( Identifier "baseTokenAddress" )
                                                                            )
                                                                        ]
                                                                    )
                                                                , ExpressionLiteral
                                                                    ( NumberLiteral 32.0 Nothing )
                                                                , MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "params" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "tokenId" )
                                                                    )
                                                                ]
                                                            )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 0.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 255.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 100.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 484.0 Nothing )
                                                        ]
                                                    )
                                                )
                                            ,
                                                ( Identifier "x3"
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "scale" )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( IdentifierExpression
                                                                ( Identifier "getCircleCoord" )
                                                            )
                                                            ( CommaArguments
                                                                [ FunctionCall
                                                                    ( TypeExpression
                                                                        ( ElementaryType
                                                                            ( UnsignedInteger
                                                                                ( Just 256 )
                                                                            )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ MemberAccess
                                                                            ( IdentifierExpression
                                                                                ( Identifier "params" )
                                                                            )
                                                                            ( MemberAccessIdentifier
                                                                                ( Identifier "quoteTokenAddress" )
                                                                            )
                                                                        ]
                                                                    )
                                                                , ExpressionLiteral
                                                                    ( NumberLiteral 48.0 Nothing )
                                                                , MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "params" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "tokenId" )
                                                                    )
                                                                ]
                                                            )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 0.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 255.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 16.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 274.0 Nothing )
                                                        ]
                                                    )
                                                )
                                            ,
                                                ( Identifier "y3"
                                                , FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "scale" )
                                                    )
                                                    ( CommaArguments
                                                        [ FunctionCall
                                                            ( IdentifierExpression
                                                                ( Identifier "getCircleCoord" )
                                                            )
                                                            ( CommaArguments
                                                                [ FunctionCall
                                                                    ( TypeExpression
                                                                        ( ElementaryType
                                                                            ( UnsignedInteger
                                                                                ( Just 256 )
                                                                            )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ MemberAccess
                                                                            ( IdentifierExpression
                                                                                ( Identifier "params" )
                                                                            )
                                                                            ( MemberAccessIdentifier
                                                                                ( Identifier "baseTokenAddress" )
                                                                            )
                                                                        ]
                                                                    )
                                                                , ExpressionLiteral
                                                                    ( NumberLiteral 48.0 Nothing )
                                                                , MemberAccess
                                                                    ( IdentifierExpression
                                                                        ( Identifier "params" )
                                                                    )
                                                                    ( MemberAccessIdentifier
                                                                        ( Identifier "tokenId" )
                                                                    )
                                                                ]
                                                            )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 0.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 255.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 100.0 Nothing )
                                                        , ExpressionLiteral
                                                            ( NumberLiteral 484.0 Nothing )
                                                        ]
                                                    )
                                                )
                                            ]
                                        )
                                    )
                                )
                            )
                        , Return
                            ( Just
                                ( FunctionCall
                                    ( MemberAccess
                                        ( IdentifierExpression
                                            ( Identifier "NFTSVG" )
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "generateSVG" )
                                        )
                                    )
                                    ( CommaArguments
                                        [ IdentifierExpression
                                            ( Identifier "svgParams" )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "overRange"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( SignedInteger
                                    ( Just 24 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "tickLower" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( SignedInteger
                                    ( Just 24 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "tickUpper" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( SignedInteger
                                    ( Just 24 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "tickCurrent" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( SignedInteger
                                    ( Just 8 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ If
                            ( IfStatement
                                { expr = BinaryExpression LessThan
                                    ( IdentifierExpression
                                        ( Identifier "tickCurrent" )
                                    )
                                    ( IdentifierExpression
                                        ( Identifier "tickLower" )
                                    )
                                , trueStmt = BlockStatement
                                    [ Return
                                        ( Just
                                            ( UnaryExpression UPreSub
                                                ( ExpressionLiteral
                                                    ( NumberLiteral 1.0 Nothing )
                                                )
                                            )
                                        )
                                    ]
                                , elseStmt = Just
                                    ( If
                                        ( IfStatement
                                            { expr = BinaryExpression GreaterThan
                                                ( IdentifierExpression
                                                    ( Identifier "tickCurrent" )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "tickUpper" )
                                                )
                                            , trueStmt = BlockStatement
                                                [ Return
                                                    ( Just
                                                        ( ExpressionLiteral
                                                            ( NumberLiteral 1.0 Nothing )
                                                        )
                                                    )
                                                ]
                                            , elseStmt = Just
                                                ( BlockStatement
                                                    [ Return
                                                        ( Just
                                                            ( ExpressionLiteral
                                                                ( NumberLiteral 0.0 Nothing )
                                                            )
                                                        )
                                                    ]
                                                )
                                            }
                                        )
                                    )
                                }
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "scale"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "n" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "inMn" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "inMx" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "outMn" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "outMx" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncPrivate
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( FunctionCall
                                    ( MemberAccess
                                        ( TupleExpression
                                            [ Just
                                                ( FunctionCall
                                                    ( MemberAccess
                                                        ( FunctionCall
                                                            ( MemberAccess
                                                                ( FunctionCall
                                                                    ( MemberAccess
                                                                        ( FunctionCall
                                                                            ( MemberAccess
                                                                                ( IdentifierExpression
                                                                                    ( Identifier "n" )
                                                                                )
                                                                                ( MemberAccessIdentifier
                                                                                    ( Identifier "sub" )
                                                                                )
                                                                            )
                                                                            ( CommaArguments
                                                                                [ IdentifierExpression
                                                                                    ( Identifier "inMn" )
                                                                                ]
                                                                            )
                                                                        )
                                                                        ( MemberAccessIdentifier
                                                                            ( Identifier "mul" )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ FunctionCall
                                                                            ( MemberAccess
                                                                                ( IdentifierExpression
                                                                                    ( Identifier "outMx" )
                                                                                )
                                                                                ( MemberAccessIdentifier
                                                                                    ( Identifier "sub" )
                                                                                )
                                                                            )
                                                                            ( CommaArguments
                                                                                [ IdentifierExpression
                                                                                    ( Identifier "outMn" )
                                                                                ]
                                                                            )
                                                                        ]
                                                                    )
                                                                )
                                                                ( MemberAccessIdentifier
                                                                    ( Identifier "div" )
                                                                )
                                                            )
                                                            ( CommaArguments
                                                                [ FunctionCall
                                                                    ( MemberAccess
                                                                        ( IdentifierExpression
                                                                            ( Identifier "inMx" )
                                                                        )
                                                                        ( MemberAccessIdentifier
                                                                            ( Identifier "sub" )
                                                                        )
                                                                    )
                                                                    ( CommaArguments
                                                                        [ IdentifierExpression
                                                                            ( Identifier "inMn" )
                                                                        ]
                                                                    )
                                                                ]
                                                            )
                                                        )
                                                        ( MemberAccessIdentifier
                                                            ( Identifier "add" )
                                                        )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "outMn" )
                                                        ]
                                                    )
                                                )
                                            ]
                                        )
                                        ( MemberAccessIdentifier
                                            ( Identifier "toString" )
                                        )
                                    )
                                    ( CommaArguments [] )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "tokenToColorHex"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "token" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "offset" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType String
                            , location = Just Memory
                            , ident = Just
                                ( Identifier "str" )
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( FunctionCall
                                    ( TypeExpression ( ElementaryType String ) )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( MemberAccess
                                                ( TupleExpression
                                                    [ Just
                                                        ( BinaryExpression Sar
                                                            ( IdentifierExpression
                                                                ( Identifier "token" )
                                                            )
                                                            ( IdentifierExpression
                                                                ( Identifier "offset" )
                                                            )
                                                        )
                                                    ]
                                                )
                                                ( MemberAccessIdentifier
                                                    ( Identifier "toHexStringNoPrefix" )
                                                )
                                            )
                                            ( CommaArguments
                                                [ ExpressionLiteral
                                                    ( NumberLiteral 3.0 Nothing )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "getCircleCoord"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "tokenAddress" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "offset" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "tokenId" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( BinaryExpression Mod
                                    ( TupleExpression
                                        [ Just
                                            ( BinaryExpression Mul
                                                ( FunctionCall
                                                    ( IdentifierExpression
                                                        ( Identifier "sliceTokenHex" )
                                                    )
                                                    ( CommaArguments
                                                        [ IdentifierExpression
                                                            ( Identifier "tokenAddress" )
                                                        , IdentifierExpression
                                                            ( Identifier "offset" )
                                                        ]
                                                    )
                                                )
                                                ( IdentifierExpression
                                                    ( Identifier "tokenId" )
                                                )
                                            )
                                        ]
                                    )
                                    ( ExpressionLiteral
                                        ( NumberLiteral 255.0 Nothing )
                                    )
                                )
                            )
                        ]
                    }
                )
            , CFunction
                ( FunctionDefinition
                    { name = Identifier "sliceTokenHex"
                    , params =
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "token" )
                            }
                        , Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Just
                                ( Identifier "offset" )
                            }
                        ]
                    , restrictions =
                        [ FuncVisibility FuncInternal
                        , FuncMutability Pure
                        ]
                    , returns = Just
                        [ Parameter
                            { kind = ElementaryType
                                ( UnsignedInteger
                                    ( Just 256 )
                                )
                            , location = Nothing
                            , ident = Nothing
                            }
                        ]
                    , body = BlockStatement
                        [ Return
                            ( Just
                                ( FunctionCall
                                    ( TypeExpression
                                        ( ElementaryType
                                            ( UnsignedInteger
                                                ( Just 256 )
                                            )
                                        )
                                    )
                                    ( CommaArguments
                                        [ FunctionCall
                                            ( TypeExpression
                                                ( ElementaryType
                                                    ( UnsignedInteger
                                                        ( Just 8 )
                                                    )
                                                )
                                            )
                                            ( CommaArguments
                                                [ BinaryExpression Sar
                                                    ( IdentifierExpression
                                                        ( Identifier "token" )
                                                    )
                                                    ( IdentifierExpression
                                                        ( Identifier "offset" )
                                                    )
                                                ]
                                            )
                                        ]
                                    )
                                )
                            )
                        ]
                    }
                )
            ]
        }
    )
]